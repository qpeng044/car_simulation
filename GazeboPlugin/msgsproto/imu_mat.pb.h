// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu_mat.proto

#ifndef PROTOBUF_INCLUDED_imu_5fmat_2eproto
#define PROTOBUF_INCLUDED_imu_5fmat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time_mat.pb.h"
#include "vector3d_mat.pb.h"
#include "quaternion_mat.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_imu_5fmat_2eproto 

namespace protobuf_imu_5fmat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_imu_5fmat_2eproto
namespace robotics {
namespace matlab {
class IMUMat;
class IMUMatDefaultTypeInternal;
extern IMUMatDefaultTypeInternal _IMUMat_default_instance_;
}  // namespace matlab
}  // namespace robotics
namespace google {
namespace protobuf {
template<> ::robotics::matlab::IMUMat* Arena::CreateMaybeMessage<::robotics::matlab::IMUMat>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robotics {
namespace matlab {

// ===================================================================

class IMUMat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robotics.matlab.IMUMat) */ {
 public:
  IMUMat();
  virtual ~IMUMat();

  IMUMat(const IMUMat& from);

  inline IMUMat& operator=(const IMUMat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUMat(IMUMat&& from) noexcept
    : IMUMat() {
    *this = ::std::move(from);
  }

  inline IMUMat& operator=(IMUMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUMat* internal_default_instance() {
    return reinterpret_cast<const IMUMat*>(
               &_IMUMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMUMat* other);
  friend void swap(IMUMat& a, IMUMat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUMat* New() const final {
    return CreateMaybeMessage<IMUMat>(NULL);
  }

  IMUMat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUMat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUMat& from);
  void MergeFrom(const IMUMat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUMat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_entity_name = 2;
  bool has_m_entity_name() const;
  void clear_m_entity_name();
  static const int kMEntityNameFieldNumber = 2;
  const ::std::string& m_entity_name() const;
  void set_m_entity_name(const ::std::string& value);
  #if LANG_CXX11
  void set_m_entity_name(::std::string&& value);
  #endif
  void set_m_entity_name(const char* value);
  void set_m_entity_name(const char* value, size_t size);
  ::std::string* mutable_m_entity_name();
  ::std::string* release_m_entity_name();
  void set_allocated_m_entity_name(::std::string* m_entity_name);

  // required .robotics.matlab.TimeMat m_stamp = 1;
  bool has_m_stamp() const;
  void clear_m_stamp();
  static const int kMStampFieldNumber = 1;
  private:
  const ::robotics::matlab::TimeMat& _internal_m_stamp() const;
  public:
  const ::robotics::matlab::TimeMat& m_stamp() const;
  ::robotics::matlab::TimeMat* release_m_stamp();
  ::robotics::matlab::TimeMat* mutable_m_stamp();
  void set_allocated_m_stamp(::robotics::matlab::TimeMat* m_stamp);

  // required .robotics.matlab.QuaternionMat m_orientation = 3;
  bool has_m_orientation() const;
  void clear_m_orientation();
  static const int kMOrientationFieldNumber = 3;
  private:
  const ::robotics::matlab::QuaternionMat& _internal_m_orientation() const;
  public:
  const ::robotics::matlab::QuaternionMat& m_orientation() const;
  ::robotics::matlab::QuaternionMat* release_m_orientation();
  ::robotics::matlab::QuaternionMat* mutable_m_orientation();
  void set_allocated_m_orientation(::robotics::matlab::QuaternionMat* m_orientation);

  // required .robotics.matlab.Vector3dMat m_angular_velocity = 4;
  bool has_m_angular_velocity() const;
  void clear_m_angular_velocity();
  static const int kMAngularVelocityFieldNumber = 4;
  private:
  const ::robotics::matlab::Vector3dMat& _internal_m_angular_velocity() const;
  public:
  const ::robotics::matlab::Vector3dMat& m_angular_velocity() const;
  ::robotics::matlab::Vector3dMat* release_m_angular_velocity();
  ::robotics::matlab::Vector3dMat* mutable_m_angular_velocity();
  void set_allocated_m_angular_velocity(::robotics::matlab::Vector3dMat* m_angular_velocity);

  // required .robotics.matlab.Vector3dMat m_linear_acceleration = 5;
  bool has_m_linear_acceleration() const;
  void clear_m_linear_acceleration();
  static const int kMLinearAccelerationFieldNumber = 5;
  private:
  const ::robotics::matlab::Vector3dMat& _internal_m_linear_acceleration() const;
  public:
  const ::robotics::matlab::Vector3dMat& m_linear_acceleration() const;
  ::robotics::matlab::Vector3dMat* release_m_linear_acceleration();
  ::robotics::matlab::Vector3dMat* mutable_m_linear_acceleration();
  void set_allocated_m_linear_acceleration(::robotics::matlab::Vector3dMat* m_linear_acceleration);

  // @@protoc_insertion_point(class_scope:robotics.matlab.IMUMat)
 private:
  void set_has_m_stamp();
  void clear_has_m_stamp();
  void set_has_m_entity_name();
  void clear_has_m_entity_name();
  void set_has_m_orientation();
  void clear_has_m_orientation();
  void set_has_m_angular_velocity();
  void clear_has_m_angular_velocity();
  void set_has_m_linear_acceleration();
  void clear_has_m_linear_acceleration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr m_entity_name_;
  ::robotics::matlab::TimeMat* m_stamp_;
  ::robotics::matlab::QuaternionMat* m_orientation_;
  ::robotics::matlab::Vector3dMat* m_angular_velocity_;
  ::robotics::matlab::Vector3dMat* m_linear_acceleration_;
  friend struct ::protobuf_imu_5fmat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUMat

// required .robotics.matlab.TimeMat m_stamp = 1;
inline bool IMUMat::has_m_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUMat::set_has_m_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUMat::clear_has_m_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::robotics::matlab::TimeMat& IMUMat::_internal_m_stamp() const {
  return *m_stamp_;
}
inline const ::robotics::matlab::TimeMat& IMUMat::m_stamp() const {
  const ::robotics::matlab::TimeMat* p = m_stamp_;
  // @@protoc_insertion_point(field_get:robotics.matlab.IMUMat.m_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::robotics::matlab::TimeMat*>(
      &::robotics::matlab::_TimeMat_default_instance_);
}
inline ::robotics::matlab::TimeMat* IMUMat::release_m_stamp() {
  // @@protoc_insertion_point(field_release:robotics.matlab.IMUMat.m_stamp)
  clear_has_m_stamp();
  ::robotics::matlab::TimeMat* temp = m_stamp_;
  m_stamp_ = NULL;
  return temp;
}
inline ::robotics::matlab::TimeMat* IMUMat::mutable_m_stamp() {
  set_has_m_stamp();
  if (m_stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::robotics::matlab::TimeMat>(GetArenaNoVirtual());
    m_stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robotics.matlab.IMUMat.m_stamp)
  return m_stamp_;
}
inline void IMUMat::set_allocated_m_stamp(::robotics::matlab::TimeMat* m_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(m_stamp_);
  }
  if (m_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      m_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, m_stamp, submessage_arena);
    }
    set_has_m_stamp();
  } else {
    clear_has_m_stamp();
  }
  m_stamp_ = m_stamp;
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.IMUMat.m_stamp)
}

// required string m_entity_name = 2;
inline bool IMUMat::has_m_entity_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUMat::set_has_m_entity_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUMat::clear_has_m_entity_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUMat::clear_m_entity_name() {
  m_entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_entity_name();
}
inline const ::std::string& IMUMat::m_entity_name() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.IMUMat.m_entity_name)
  return m_entity_name_.GetNoArena();
}
inline void IMUMat::set_m_entity_name(const ::std::string& value) {
  set_has_m_entity_name();
  m_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robotics.matlab.IMUMat.m_entity_name)
}
#if LANG_CXX11
inline void IMUMat::set_m_entity_name(::std::string&& value) {
  set_has_m_entity_name();
  m_entity_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robotics.matlab.IMUMat.m_entity_name)
}
#endif
inline void IMUMat::set_m_entity_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_m_entity_name();
  m_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robotics.matlab.IMUMat.m_entity_name)
}
inline void IMUMat::set_m_entity_name(const char* value, size_t size) {
  set_has_m_entity_name();
  m_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robotics.matlab.IMUMat.m_entity_name)
}
inline ::std::string* IMUMat::mutable_m_entity_name() {
  set_has_m_entity_name();
  // @@protoc_insertion_point(field_mutable:robotics.matlab.IMUMat.m_entity_name)
  return m_entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUMat::release_m_entity_name() {
  // @@protoc_insertion_point(field_release:robotics.matlab.IMUMat.m_entity_name)
  if (!has_m_entity_name()) {
    return NULL;
  }
  clear_has_m_entity_name();
  return m_entity_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUMat::set_allocated_m_entity_name(::std::string* m_entity_name) {
  if (m_entity_name != NULL) {
    set_has_m_entity_name();
  } else {
    clear_has_m_entity_name();
  }
  m_entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_entity_name);
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.IMUMat.m_entity_name)
}

// required .robotics.matlab.QuaternionMat m_orientation = 3;
inline bool IMUMat::has_m_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUMat::set_has_m_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUMat::clear_has_m_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::robotics::matlab::QuaternionMat& IMUMat::_internal_m_orientation() const {
  return *m_orientation_;
}
inline const ::robotics::matlab::QuaternionMat& IMUMat::m_orientation() const {
  const ::robotics::matlab::QuaternionMat* p = m_orientation_;
  // @@protoc_insertion_point(field_get:robotics.matlab.IMUMat.m_orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::robotics::matlab::QuaternionMat*>(
      &::robotics::matlab::_QuaternionMat_default_instance_);
}
inline ::robotics::matlab::QuaternionMat* IMUMat::release_m_orientation() {
  // @@protoc_insertion_point(field_release:robotics.matlab.IMUMat.m_orientation)
  clear_has_m_orientation();
  ::robotics::matlab::QuaternionMat* temp = m_orientation_;
  m_orientation_ = NULL;
  return temp;
}
inline ::robotics::matlab::QuaternionMat* IMUMat::mutable_m_orientation() {
  set_has_m_orientation();
  if (m_orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::robotics::matlab::QuaternionMat>(GetArenaNoVirtual());
    m_orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robotics.matlab.IMUMat.m_orientation)
  return m_orientation_;
}
inline void IMUMat::set_allocated_m_orientation(::robotics::matlab::QuaternionMat* m_orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(m_orientation_);
  }
  if (m_orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      m_orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, m_orientation, submessage_arena);
    }
    set_has_m_orientation();
  } else {
    clear_has_m_orientation();
  }
  m_orientation_ = m_orientation;
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.IMUMat.m_orientation)
}

// required .robotics.matlab.Vector3dMat m_angular_velocity = 4;
inline bool IMUMat::has_m_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUMat::set_has_m_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUMat::clear_has_m_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::robotics::matlab::Vector3dMat& IMUMat::_internal_m_angular_velocity() const {
  return *m_angular_velocity_;
}
inline const ::robotics::matlab::Vector3dMat& IMUMat::m_angular_velocity() const {
  const ::robotics::matlab::Vector3dMat* p = m_angular_velocity_;
  // @@protoc_insertion_point(field_get:robotics.matlab.IMUMat.m_angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::robotics::matlab::Vector3dMat*>(
      &::robotics::matlab::_Vector3dMat_default_instance_);
}
inline ::robotics::matlab::Vector3dMat* IMUMat::release_m_angular_velocity() {
  // @@protoc_insertion_point(field_release:robotics.matlab.IMUMat.m_angular_velocity)
  clear_has_m_angular_velocity();
  ::robotics::matlab::Vector3dMat* temp = m_angular_velocity_;
  m_angular_velocity_ = NULL;
  return temp;
}
inline ::robotics::matlab::Vector3dMat* IMUMat::mutable_m_angular_velocity() {
  set_has_m_angular_velocity();
  if (m_angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::robotics::matlab::Vector3dMat>(GetArenaNoVirtual());
    m_angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robotics.matlab.IMUMat.m_angular_velocity)
  return m_angular_velocity_;
}
inline void IMUMat::set_allocated_m_angular_velocity(::robotics::matlab::Vector3dMat* m_angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(m_angular_velocity_);
  }
  if (m_angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      m_angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, m_angular_velocity, submessage_arena);
    }
    set_has_m_angular_velocity();
  } else {
    clear_has_m_angular_velocity();
  }
  m_angular_velocity_ = m_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.IMUMat.m_angular_velocity)
}

// required .robotics.matlab.Vector3dMat m_linear_acceleration = 5;
inline bool IMUMat::has_m_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUMat::set_has_m_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUMat::clear_has_m_linear_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::robotics::matlab::Vector3dMat& IMUMat::_internal_m_linear_acceleration() const {
  return *m_linear_acceleration_;
}
inline const ::robotics::matlab::Vector3dMat& IMUMat::m_linear_acceleration() const {
  const ::robotics::matlab::Vector3dMat* p = m_linear_acceleration_;
  // @@protoc_insertion_point(field_get:robotics.matlab.IMUMat.m_linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::robotics::matlab::Vector3dMat*>(
      &::robotics::matlab::_Vector3dMat_default_instance_);
}
inline ::robotics::matlab::Vector3dMat* IMUMat::release_m_linear_acceleration() {
  // @@protoc_insertion_point(field_release:robotics.matlab.IMUMat.m_linear_acceleration)
  clear_has_m_linear_acceleration();
  ::robotics::matlab::Vector3dMat* temp = m_linear_acceleration_;
  m_linear_acceleration_ = NULL;
  return temp;
}
inline ::robotics::matlab::Vector3dMat* IMUMat::mutable_m_linear_acceleration() {
  set_has_m_linear_acceleration();
  if (m_linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::robotics::matlab::Vector3dMat>(GetArenaNoVirtual());
    m_linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robotics.matlab.IMUMat.m_linear_acceleration)
  return m_linear_acceleration_;
}
inline void IMUMat::set_allocated_m_linear_acceleration(::robotics::matlab::Vector3dMat* m_linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(m_linear_acceleration_);
  }
  if (m_linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      m_linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, m_linear_acceleration, submessage_arena);
    }
    set_has_m_linear_acceleration();
  } else {
    clear_has_m_linear_acceleration();
  }
  m_linear_acceleration_ = m_linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.IMUMat.m_linear_acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace matlab
}  // namespace robotics

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_imu_5fmat_2eproto
