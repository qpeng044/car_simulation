// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mw.internal.robotics.gazebotransport.TestMsgs.proto

#include "mw.internal.robotics.gazebotransport.TestMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestArrays;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestScalars;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestNestedMessage;
}  // namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
class TestScalarsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestScalars>
      _instance;
} _TestScalars_default_instance_;
class TestArraysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestArrays>
      _instance;
} _TestArrays_default_instance_;
class TestNestedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestNestedMessage>
      _instance;
} _TestNestedMessage_default_instance_;
class TestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage>
      _instance;
  const ::mw::internal::robotics::gazebotransport::TestScalars* test_scalar_;
  const ::mw::internal::robotics::gazebotransport::TestArrays* test_array_;
  const ::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message_;
} _TestMessage_default_instance_;
class TestPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestPose>
      _instance;
} _TestPose_default_instance_;
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto {
static void InitDefaultsTestScalars() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestScalars_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestScalars();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestScalars::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestScalars =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestScalars}, {}};

static void InitDefaultsTestArrays() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestArrays_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestArrays();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestArrays::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestArrays =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestArrays}, {}};

static void InitDefaultsTestNestedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestNestedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestNestedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestNestedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestNestedMessage}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestScalars.base,}};

static void InitDefaultsTestMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TestMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTestMessage}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestScalars.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestArrays.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestNestedMessage.base,}};

static void InitDefaultsTestPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestPose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestPose}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestScalars.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestArrays.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestNestedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestPose.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, integer_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, unsigned_integer_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, integer_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, unsigned_integer_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, binary_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, binary_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, byte_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, character_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, enum_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, logical_item_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, integer_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, unsigned_integer_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, integer_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, unsigned_integer_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, binary_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, binary_32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, byte_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, character_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, enum_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, logical_item_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, scalar_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, array_nested_message_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, header_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_scalar_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_array_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, payload_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, w_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::mw::internal::robotics::gazebotransport::TestScalars)},
  { 25, 40, sizeof(::mw::internal::robotics::gazebotransport::TestArrays)},
  { 50, 57, sizeof(::mw::internal::robotics::gazebotransport::TestNestedMessage)},
  { 59, 69, sizeof(::mw::internal::robotics::gazebotransport::TestMessage)},
  { 73, 82, sizeof(::mw::internal::robotics::gazebotransport::TestPose)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TestScalars_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TestArrays_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TestPose_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mw.internal.robotics.gazebotransport.TestMsgs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3mw.internal.robotics.gazebotransport.T"
      "estMsgs.proto\022$mw.internal.robotics.gaze"
      "botransport\"\233\002\n\013TestScalars\022\022\n\ninteger_6"
      "4\030\001 \002(\003\022\033\n\023unsigned_integer_64\030\002 \002(\004\022\022\n\n"
      "integer_32\030\003 \002(\005\022\033\n\023unsigned_integer_32\030"
      "\004 \002(\r\022\021\n\tbinary_64\030\005 \002(\001\022\021\n\tbinary_32\030\006 "
      "\002(\002\022\022\n\nbyte_array\030\007 \002(\014\022\027\n\017character_arr"
      "ay\030\010 \002(\t\022A\n\tenum_item\030\t \002(\0162..mw.interna"
      "l.robotics.gazebotransport.TestEnum\022\024\n\014l"
      "ogical_item\030\n \002(\010\"\232\002\n\nTestArrays\022\022\n\ninte"
      "ger_64\030\001 \003(\003\022\033\n\023unsigned_integer_64\030\002 \003("
      "\004\022\022\n\ninteger_32\030\003 \003(\005\022\033\n\023unsigned_intege"
      "r_32\030\004 \003(\r\022\021\n\tbinary_64\030\005 \003(\001\022\021\n\tbinary_"
      "32\030\006 \003(\002\022\022\n\nbyte_array\030\007 \003(\014\022\027\n\017characte"
      "r_array\030\010 \003(\t\022A\n\tenum_item\030\t \003(\0162..mw.in"
      "ternal.robotics.gazebotransport.TestEnum"
      "\022\024\n\014logical_item\030\n \003(\010\"\266\001\n\021TestNestedMes"
      "sage\022P\n\025scalar_nested_message\030\001 \002(\01321.mw"
      ".internal.robotics.gazebotransport.TestS"
      "calars\022O\n\024array_nested_message\030\002 \003(\01321.m"
      "w.internal.robotics.gazebotransport.Test"
      "Scalars\"\222\002\n\013TestMessage\022\016\n\006header\030\001 \002(\001\022"
      "H\n\013test_scalar\030\002 \001(\01321.mw.internal.robot"
      "ics.gazebotransport.TestScalarsH\000\022F\n\ntes"
      "t_array\030\003 \001(\01320.mw.internal.robotics.gaz"
      "ebotransport.TestArraysH\000\022V\n\023test_nested"
      "_message\030\004 \001(\01327.mw.internal.robotics.ga"
      "zebotransport.TestNestedMessageH\000B\t\n\007pay"
      "load\"6\n\010TestPose\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t"
      "\n\001z\030\003 \002(\001\022\t\n\001w\030\004 \002(\001*\"\n\010TestEnum\022\n\n\006ITEM"
      "_A\020\000\022\n\n\006ITEM_B\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mw.internal.robotics.gazebotransport.TestMsgs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_enum_descriptors[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestScalars::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestScalars::kInteger64FieldNumber;
const int TestScalars::kUnsignedInteger64FieldNumber;
const int TestScalars::kInteger32FieldNumber;
const int TestScalars::kUnsignedInteger32FieldNumber;
const int TestScalars::kBinary64FieldNumber;
const int TestScalars::kBinary32FieldNumber;
const int TestScalars::kByteArrayFieldNumber;
const int TestScalars::kCharacterArrayFieldNumber;
const int TestScalars::kEnumItemFieldNumber;
const int TestScalars::kLogicalItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestScalars::TestScalars()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestScalars.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestScalars)
}
TestScalars::TestScalars(const TestScalars& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_byte_array()) {
    byte_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_array_);
  }
  character_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_character_array()) {
    character_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_array_);
  }
  ::memcpy(&integer_64_, &from.integer_64_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_item_) -
    reinterpret_cast<char*>(&integer_64_)) + sizeof(logical_item_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestScalars)
}

void TestScalars::SharedCtor() {
  byte_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_item_) -
      reinterpret_cast<char*>(&integer_64_)) + sizeof(logical_item_));
}

TestScalars::~TestScalars() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestScalars)
  SharedDtor();
}

void TestScalars::SharedDtor() {
  byte_array_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_array_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestScalars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestScalars::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestScalars& TestScalars::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestScalars.base);
  return *internal_default_instance();
}


void TestScalars::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestScalars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      byte_array_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      character_array_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&integer_64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&binary_32_) -
        reinterpret_cast<char*>(&integer_64_)) + sizeof(binary_32_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&enum_item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logical_item_) -
        reinterpret_cast<char*>(&enum_item_)) + sizeof(logical_item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestScalars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestScalars)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 integer_64 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_integer_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integer_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 unsigned_integer_64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_unsigned_integer_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unsigned_integer_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 integer_32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_integer_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 unsigned_integer_32 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unsigned_integer_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsigned_integer_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double binary_64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_binary_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &binary_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float binary_32 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_binary_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &binary_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes byte_array = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string character_array = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->character_array().data(), static_cast<int>(this->character_array().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TestScalars.character_array");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value)) {
            set_enum_item(static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool logical_item = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_logical_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logical_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestScalars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestScalars)
  return false;
#undef DO_
}

void TestScalars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestScalars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 integer_64 = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer_64(), output);
  }

  // required uint64 unsigned_integer_64 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unsigned_integer_64(), output);
  }

  // required int32 integer_32 = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integer_32(), output);
  }

  // required uint32 unsigned_integer_32 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unsigned_integer_32(), output);
  }

  // required double binary_64 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->binary_64(), output);
  }

  // required float binary_32 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->binary_32(), output);
  }

  // required bytes byte_array = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->byte_array(), output);
  }

  // required string character_array = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array().data(), static_cast<int>(this->character_array().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestScalars.character_array");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->character_array(), output);
  }

  // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->enum_item(), output);
  }

  // required bool logical_item = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->logical_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestScalars)
}

::google::protobuf::uint8* TestScalars::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestScalars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 integer_64 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->integer_64(), target);
  }

  // required uint64 unsigned_integer_64 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unsigned_integer_64(), target);
  }

  // required int32 integer_32 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integer_32(), target);
  }

  // required uint32 unsigned_integer_32 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unsigned_integer_32(), target);
  }

  // required double binary_64 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->binary_64(), target);
  }

  // required float binary_32 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->binary_32(), target);
  }

  // required bytes byte_array = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->byte_array(), target);
  }

  // required string character_array = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array().data(), static_cast<int>(this->character_array().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestScalars.character_array");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->character_array(), target);
  }

  // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->enum_item(), target);
  }

  // required bool logical_item = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->logical_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestScalars)
  return target;
}

size_t TestScalars::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestScalars)
  size_t total_size = 0;

  if (has_byte_array()) {
    // required bytes byte_array = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byte_array());
  }

  if (has_character_array()) {
    // required string character_array = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character_array());
  }

  if (has_integer_64()) {
    // required int64 integer_64 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->integer_64());
  }

  if (has_unsigned_integer_64()) {
    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unsigned_integer_64());
  }

  if (has_integer_32()) {
    // required int32 integer_32 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_32());
  }

  if (has_unsigned_integer_32()) {
    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsigned_integer_32());
  }

  if (has_binary_64()) {
    // required double binary_64 = 5;
    total_size += 1 + 8;
  }

  if (has_binary_32()) {
    // required float binary_32 = 6;
    total_size += 1 + 4;
  }

  if (has_enum_item()) {
    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_item());
  }

  if (has_logical_item()) {
    // required bool logical_item = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TestScalars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestScalars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes byte_array = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byte_array());

    // required string character_array = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character_array());

    // required int64 integer_64 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->integer_64());

    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unsigned_integer_64());

    // required int32 integer_32 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_32());

    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsigned_integer_32());

    // required double binary_64 = 5;
    total_size += 1 + 8;

    // required float binary_32 = 6;
    total_size += 1 + 4;

    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_item());

    // required bool logical_item = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestScalars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  GOOGLE_DCHECK_NE(&from, this);
  const TestScalars* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestScalars>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestScalars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestScalars)
    MergeFrom(*source);
  }
}

void TestScalars::MergeFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_byte_array();
      byte_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_array_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_character_array();
      character_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_array_);
    }
    if (cached_has_bits & 0x00000004u) {
      integer_64_ = from.integer_64_;
    }
    if (cached_has_bits & 0x00000008u) {
      unsigned_integer_64_ = from.unsigned_integer_64_;
    }
    if (cached_has_bits & 0x00000010u) {
      integer_32_ = from.integer_32_;
    }
    if (cached_has_bits & 0x00000020u) {
      unsigned_integer_32_ = from.unsigned_integer_32_;
    }
    if (cached_has_bits & 0x00000040u) {
      binary_64_ = from.binary_64_;
    }
    if (cached_has_bits & 0x00000080u) {
      binary_32_ = from.binary_32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      enum_item_ = from.enum_item_;
    }
    if (cached_has_bits & 0x00000200u) {
      logical_item_ = from.logical_item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestScalars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestScalars::CopyFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestScalars::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void TestScalars::Swap(TestScalars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestScalars::InternalSwap(TestScalars* other) {
  using std::swap;
  byte_array_.Swap(&other->byte_array_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  character_array_.Swap(&other->character_array_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(integer_64_, other->integer_64_);
  swap(unsigned_integer_64_, other->unsigned_integer_64_);
  swap(integer_32_, other->integer_32_);
  swap(unsigned_integer_32_, other->unsigned_integer_32_);
  swap(binary_64_, other->binary_64_);
  swap(binary_32_, other->binary_32_);
  swap(enum_item_, other->enum_item_);
  swap(logical_item_, other->logical_item_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestScalars::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestArrays::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestArrays::kInteger64FieldNumber;
const int TestArrays::kUnsignedInteger64FieldNumber;
const int TestArrays::kInteger32FieldNumber;
const int TestArrays::kUnsignedInteger32FieldNumber;
const int TestArrays::kBinary64FieldNumber;
const int TestArrays::kBinary32FieldNumber;
const int TestArrays::kByteArrayFieldNumber;
const int TestArrays::kCharacterArrayFieldNumber;
const int TestArrays::kEnumItemFieldNumber;
const int TestArrays::kLogicalItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestArrays::TestArrays()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestArrays.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestArrays)
}
TestArrays::TestArrays(const TestArrays& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      integer_64_(from.integer_64_),
      unsigned_integer_64_(from.unsigned_integer_64_),
      integer_32_(from.integer_32_),
      unsigned_integer_32_(from.unsigned_integer_32_),
      binary_64_(from.binary_64_),
      binary_32_(from.binary_32_),
      byte_array_(from.byte_array_),
      character_array_(from.character_array_),
      enum_item_(from.enum_item_),
      logical_item_(from.logical_item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestArrays)
}

void TestArrays::SharedCtor() {
}

TestArrays::~TestArrays() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestArrays)
  SharedDtor();
}

void TestArrays::SharedDtor() {
}

void TestArrays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestArrays::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestArrays& TestArrays::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestArrays.base);
  return *internal_default_instance();
}


void TestArrays::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestArrays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integer_64_.Clear();
  unsigned_integer_64_.Clear();
  integer_32_.Clear();
  unsigned_integer_32_.Clear();
  binary_64_.Clear();
  binary_32_.Clear();
  byte_array_.Clear();
  character_array_.Clear();
  enum_item_.Clear();
  logical_item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestArrays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestArrays)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 integer_64 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_integer_64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_integer_64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 unsigned_integer_64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_unsigned_integer_64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unsigned_integer_64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 integer_32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_integer_32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_integer_32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unsigned_integer_32 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_unsigned_integer_32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unsigned_integer_32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double binary_64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_binary_64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_binary_64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float binary_32 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_binary_32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_binary_32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes byte_array = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_byte_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string character_array = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_character_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->character_array(this->character_array_size() - 1).data(),
            static_cast<int>(this->character_array(this->character_array_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TestArrays.character_array");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value)) {
            add_enum_item(static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 9,
                 ::mw::internal::robotics::gazebotransport::TestEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_enum_item())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool logical_item = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80u, input, this->mutable_logical_item())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_logical_item())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestArrays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestArrays)
  return false;
#undef DO_
}

void TestArrays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestArrays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 integer_64 = 1;
  for (int i = 0, n = this->integer_64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->integer_64(i), output);
  }

  // repeated uint64 unsigned_integer_64 = 2;
  for (int i = 0, n = this->unsigned_integer_64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->unsigned_integer_64(i), output);
  }

  // repeated int32 integer_32 = 3;
  for (int i = 0, n = this->integer_32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->integer_32(i), output);
  }

  // repeated uint32 unsigned_integer_32 = 4;
  for (int i = 0, n = this->unsigned_integer_32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unsigned_integer_32(i), output);
  }

  // repeated double binary_64 = 5;
  for (int i = 0, n = this->binary_64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->binary_64(i), output);
  }

  // repeated float binary_32 = 6;
  for (int i = 0, n = this->binary_32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->binary_32(i), output);
  }

  // repeated bytes byte_array = 7;
  for (int i = 0, n = this->byte_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->byte_array(i), output);
  }

  // repeated string character_array = 8;
  for (int i = 0, n = this->character_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array(i).data(), static_cast<int>(this->character_array(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestArrays.character_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->character_array(i), output);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  for (int i = 0, n = this->enum_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->enum_item(i), output);
  }

  // repeated bool logical_item = 10;
  for (int i = 0, n = this->logical_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->logical_item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestArrays)
}

::google::protobuf::uint8* TestArrays::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestArrays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 integer_64 = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->integer_64_, target);

  // repeated uint64 unsigned_integer_64 = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->unsigned_integer_64_, target);

  // repeated int32 integer_32 = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->integer_32_, target);

  // repeated uint32 unsigned_integer_32 = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->unsigned_integer_32_, target);

  // repeated double binary_64 = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->binary_64_, target);

  // repeated float binary_32 = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->binary_32_, target);

  // repeated bytes byte_array = 7;
  for (int i = 0, n = this->byte_array_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->byte_array(i), target);
  }

  // repeated string character_array = 8;
  for (int i = 0, n = this->character_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array(i).data(), static_cast<int>(this->character_array(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestArrays.character_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->character_array(i), target);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    9, this->enum_item_, target);

  // repeated bool logical_item = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(10, this->logical_item_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestArrays)
  return target;
}

size_t TestArrays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestArrays)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 integer_64 = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->integer_64_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->integer_64_size());
    total_size += data_size;
  }

  // repeated uint64 unsigned_integer_64 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->unsigned_integer_64_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unsigned_integer_64_size());
    total_size += data_size;
  }

  // repeated int32 integer_32 = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->integer_32_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->integer_32_size());
    total_size += data_size;
  }

  // repeated uint32 unsigned_integer_32 = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unsigned_integer_32_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unsigned_integer_32_size());
    total_size += data_size;
  }

  // repeated double binary_64 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->binary_64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->binary_64_size());
    total_size += data_size;
  }

  // repeated float binary_32 = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->binary_32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->binary_32_size());
    total_size += data_size;
  }

  // repeated bytes byte_array = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->byte_array_size());
  for (int i = 0, n = this->byte_array_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->byte_array(i));
  }

  // repeated string character_array = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->character_array_size());
  for (int i = 0, n = this->character_array_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->character_array(i));
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->enum_item_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->enum_item(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated bool logical_item = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_item_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->logical_item_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestArrays::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  GOOGLE_DCHECK_NE(&from, this);
  const TestArrays* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestArrays>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestArrays)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestArrays)
    MergeFrom(*source);
  }
}

void TestArrays::MergeFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  integer_64_.MergeFrom(from.integer_64_);
  unsigned_integer_64_.MergeFrom(from.unsigned_integer_64_);
  integer_32_.MergeFrom(from.integer_32_);
  unsigned_integer_32_.MergeFrom(from.unsigned_integer_32_);
  binary_64_.MergeFrom(from.binary_64_);
  binary_32_.MergeFrom(from.binary_32_);
  byte_array_.MergeFrom(from.byte_array_);
  character_array_.MergeFrom(from.character_array_);
  enum_item_.MergeFrom(from.enum_item_);
  logical_item_.MergeFrom(from.logical_item_);
}

void TestArrays::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestArrays::CopyFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArrays::IsInitialized() const {
  return true;
}

void TestArrays::Swap(TestArrays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestArrays::InternalSwap(TestArrays* other) {
  using std::swap;
  integer_64_.InternalSwap(&other->integer_64_);
  unsigned_integer_64_.InternalSwap(&other->unsigned_integer_64_);
  integer_32_.InternalSwap(&other->integer_32_);
  unsigned_integer_32_.InternalSwap(&other->unsigned_integer_32_);
  binary_64_.InternalSwap(&other->binary_64_);
  binary_32_.InternalSwap(&other->binary_32_);
  byte_array_.InternalSwap(CastToBase(&other->byte_array_));
  character_array_.InternalSwap(CastToBase(&other->character_array_));
  enum_item_.InternalSwap(&other->enum_item_);
  logical_item_.InternalSwap(&other->logical_item_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestArrays::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestNestedMessage::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_._instance.get_mutable()->scalar_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(
      ::mw::internal::robotics::gazebotransport::TestScalars::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedMessage::kScalarNestedMessageFieldNumber;
const int TestNestedMessage::kArrayNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestNestedMessage::TestNestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestNestedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}
TestNestedMessage::TestNestedMessage(const TestNestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_nested_message_(from.array_nested_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scalar_nested_message()) {
    scalar_nested_message_ = new ::mw::internal::robotics::gazebotransport::TestScalars(*from.scalar_nested_message_);
  } else {
    scalar_nested_message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

void TestNestedMessage::SharedCtor() {
  scalar_nested_message_ = NULL;
}

TestNestedMessage::~TestNestedMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
  SharedDtor();
}

void TestNestedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete scalar_nested_message_;
}

void TestNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestNestedMessage::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestNestedMessage& TestNestedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestNestedMessage.base);
  return *internal_default_instance();
}


void TestNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_nested_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scalar_nested_message_ != NULL);
    scalar_nested_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestNestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalar_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return false;
#undef DO_
}

void TestNestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_scalar_nested_message(), output);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_nested_message_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->array_nested_message(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

::google::protobuf::uint8* TestNestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_scalar_nested_message(), deterministic, target);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_nested_message_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->array_nested_message(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return target;
}

size_t TestNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (has_scalar_nested_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scalar_nested_message_);
  }
  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->array_nested_message_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array_nested_message(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestNestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestNestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestNestedMessage)
    MergeFrom(*source);
  }
}

void TestNestedMessage::MergeFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_nested_message_.MergeFrom(from.array_nested_message_);
  if (from.has_scalar_nested_message()) {
    mutable_scalar_nested_message()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from.scalar_nested_message());
  }
}

void TestNestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedMessage::CopyFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->array_nested_message())) return false;
  if (has_scalar_nested_message()) {
    if (!this->scalar_nested_message_->IsInitialized()) return false;
  }
  return true;
}

void TestNestedMessage::Swap(TestNestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestNestedMessage::InternalSwap(TestNestedMessage* other) {
  using std::swap;
  CastToBase(&array_nested_message_)->InternalSwap(CastToBase(&other->array_nested_message_));
  swap(scalar_nested_message_, other->scalar_nested_message_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestNestedMessage::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestMessage::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_scalar_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(
      ::mw::internal::robotics::gazebotransport::TestScalars::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_array_ = const_cast< ::mw::internal::robotics::gazebotransport::TestArrays*>(
      ::mw::internal::robotics::gazebotransport::TestArrays::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestNestedMessage*>(
      ::mw::internal::robotics::gazebotransport::TestNestedMessage::internal_default_instance());
}
void TestMessage::set_allocated_test_scalar(::mw::internal::robotics::gazebotransport::TestScalars* test_scalar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (test_scalar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_scalar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_scalar, submessage_arena);
    }
    set_has_test_scalar();
    payload_.test_scalar_ = test_scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
}
void TestMessage::set_allocated_test_array(::mw::internal::robotics::gazebotransport::TestArrays* test_array) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (test_array) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_array = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_array, submessage_arena);
    }
    set_has_test_array();
    payload_.test_array_ = test_array;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_array)
}
void TestMessage::set_allocated_test_nested_message(::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (test_nested_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_nested_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_nested_message, submessage_arena);
    }
    set_has_test_nested_message();
    payload_.test_nested_message_ = test_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kHeaderFieldNumber;
const int TestMessage::kTestScalarFieldNumber;
const int TestMessage::kTestArrayFieldNumber;
const int TestMessage::kTestNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_ = from.header_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kTestScalar: {
      mutable_test_scalar()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from.test_scalar());
      break;
    }
    case kTestArray: {
      mutable_test_array()->::mw::internal::robotics::gazebotransport::TestArrays::MergeFrom(from.test_array());
      break;
    }
    case kTestNestedMessage: {
      mutable_test_nested_message()->::mw::internal::robotics::gazebotransport::TestNestedMessage::MergeFrom(from.test_nested_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestMessage)
}

void TestMessage::SharedCtor() {
  header_ = 0;
  clear_has_payload();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestMessage& TestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestMessage.base);
  return *internal_default_instance();
}


void TestMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  switch (payload_case()) {
    case kTestScalar: {
      delete payload_.test_scalar_;
      break;
    }
    case kTestArray: {
      delete payload_.test_array_;
      break;
    }
    case kTestNestedMessage: {
      delete payload_.test_nested_message_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_ = 0;
  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_header();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &header_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_scalar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->header(), output);
  }

  switch (payload_case()) {
    case kTestScalar:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_test_scalar(), output);
      break;
    case kTestArray:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_test_array(), output);
      break;
    case kTestNestedMessage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_test_nested_message(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->header(), target);
  }

  switch (payload_case()) {
    case kTestScalar:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_test_scalar(), deterministic, target);
      break;
    case kTestArray:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_test_array(), deterministic, target);
      break;
    case kTestNestedMessage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_test_nested_message(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required double header = 1;
  if (has_header()) {
    total_size += 1 + 8;
  }
  switch (payload_case()) {
    // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
    case kTestScalar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.test_scalar_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
    case kTestArray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.test_array_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
    case kTestNestedMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.test_nested_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    set_header(from.header());
  }
  switch (from.payload_case()) {
    case kTestScalar: {
      mutable_test_scalar()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from.test_scalar());
      break;
    }
    case kTestArray: {
      mutable_test_array()->::mw::internal::robotics::gazebotransport::TestArrays::MergeFrom(from.test_array());
      break;
    }
    case kTestNestedMessage: {
      mutable_test_nested_message()->::mw::internal::robotics::gazebotransport::TestNestedMessage::MergeFrom(from.test_nested_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (payload_case()) {
    case kTestScalar: {
      if (has_test_scalar()) {
        if (!this->test_scalar().IsInitialized()) return false;
      }
      break;
    }
    case kTestArray: {
      break;
    }
    case kTestNestedMessage: {
      if (has_test_nested_message()) {
        if (!this->test_nested_message().IsInitialized()) return false;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestPose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestPose::kXFieldNumber;
const int TestPose::kYFieldNumber;
const int TestPose::kZFieldNumber;
const int TestPose::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestPose::TestPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestPose)
}
TestPose::TestPose(const TestPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestPose)
}

void TestPose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

TestPose::~TestPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestPose)
  SharedDtor();
}

void TestPose::SharedDtor() {
}

void TestPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestPose::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestPose& TestPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::scc_info_TestPose.base);
  return *internal_default_instance();
}


void TestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestPose)
  return false;
#undef DO_
}

void TestPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestPose)
}

::google::protobuf::uint8* TestPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestPose)
  return target;
}

size_t TestPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestPose)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (has_w()) {
    // required double w = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TestPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double w = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestPose)
    MergeFrom(*source);
  }
}

void TestPose::MergeFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPose::CopyFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TestPose::Swap(TestPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestPose::InternalSwap(TestPose* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestPose::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TestScalars* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestScalars >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TestScalars >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TestArrays* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestArrays >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TestArrays >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TestNestedMessage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestNestedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TestNestedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TestMessage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TestMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TestPose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestPose >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TestPose >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
