// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mw.internal.robotics.gazebotransport.CoSimMsgs.proto

#include "mw.internal.robotics.gazebotransport.CoSimMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomMessageSupport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetGroundTruthWorldPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetJointState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetLinkState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetModelInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetPose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetTopicList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InitCustomPublisher;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InitCustomSubscriber;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaserData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MaxStepSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ModelInfo_JOINTS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ModelInfo_LINKS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestCoSim;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestCustomMessageSupport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestImage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestImu;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestLaser;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResetSimulation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StepSimulation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopCoSim;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopSimulation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeImage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeImu;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeLaser;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopicList_TopicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ApplyJointTorque;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ApplyLinkWrench;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Axis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ModelInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PacketHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SetJointPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SetJointVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TopicList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ImuData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_JointState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LinkState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ModelInfo_Model;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkAngularVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkLinearVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkWorldPose;
}  // namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
class TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Time>
      _instance;
} _Time_default_instance_;
class PacketHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PacketHeader>
      _instance;
} _PacketHeader_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
  int status_;
  const ::mw::internal::robotics::gazebotransport::StepSimulation* step_simulation_;
  const ::mw::internal::robotics::gazebotransport::ResetSimulation* reset_simulation_;
  const ::mw::internal::robotics::gazebotransport::Image* image_;
  const ::mw::internal::robotics::gazebotransport::RequestImage* request_image_;
  const ::mw::internal::robotics::gazebotransport::RequestCoSim* request_cosim_;
  const ::mw::internal::robotics::gazebotransport::StopCoSim* stop_cosim_;
  const ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose* get_ground_truth_world_pose_;
  const ::mw::internal::robotics::gazebotransport::Pose* pose_;
  const ::mw::internal::robotics::gazebotransport::StopSimulation* stop_simulation_;
  const ::mw::internal::robotics::gazebotransport::LaserData* laser_data_;
  const ::mw::internal::robotics::gazebotransport::RequestLaser* request_laser_;
  const ::mw::internal::robotics::gazebotransport::ImuData* imu_data_;
  const ::mw::internal::robotics::gazebotransport::RequestImu* request_imu_;
  const ::mw::internal::robotics::gazebotransport::SubscribeImage* subscribe_image_;
  const ::mw::internal::robotics::gazebotransport::SubscribeLaser* subscribe_laser_;
  const ::mw::internal::robotics::gazebotransport::SubscribeImu* subscribe_imu_;
  const ::mw::internal::robotics::gazebotransport::ApplyJointTorque* apply_joint_torque_;
  const ::mw::internal::robotics::gazebotransport::GetPose* get_pose_;
  const ::mw::internal::robotics::gazebotransport::GetTopicList* get_topic_list_;
  const ::mw::internal::robotics::gazebotransport::TopicList* topic_list_;
  const ::mw::internal::robotics::gazebotransport::GetModelInfo* get_model_info_;
  const ::mw::internal::robotics::gazebotransport::ModelInfo* model_info_;
  const ::mw::internal::robotics::gazebotransport::ApplyLinkWrench* apply_link_wrench_;
  const ::mw::internal::robotics::gazebotransport::MaxStepSize* max_step_size_;
  const ::mw::internal::robotics::gazebotransport::CustomMessageSupport* custom_message_support_;
  const ::mw::internal::robotics::gazebotransport::InitCustomPublisher* init_custom_publisher_;
  const ::mw::internal::robotics::gazebotransport::InitCustomSubscriber* init_custom_subscriber_;
  const ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport* request_custom_message_support_;
  const ::mw::internal::robotics::gazebotransport::SetJointPosition* set_joint_position_;
  const ::mw::internal::robotics::gazebotransport::SetJointVelocity* set_joint_velocity_;
  const ::mw::internal::robotics::gazebotransport::GetJointState* get_joint_state_;
  const ::mw::internal::robotics::gazebotransport::JointState* joint_state_;
  const ::mw::internal::robotics::gazebotransport::SetLinkWorldPose* set_link_world_pose_;
  const ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity* set_link_linear_velocity_;
  const ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity* set_link_angular_velocity_;
  const ::mw::internal::robotics::gazebotransport::GetLinkState* get_link_state_;
  const ::mw::internal::robotics::gazebotransport::LinkState* link_state_;
} _Packet_default_instance_;
class StepSimulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StepSimulation>
      _instance;
} _StepSimulation_default_instance_;
class ResetSimulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetSimulation>
      _instance;
} _ResetSimulation_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Image>
      _instance;
} _Image_default_instance_;
class RequestImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestImage>
      _instance;
} _RequestImage_default_instance_;
class RequestCoSimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCoSim>
      _instance;
} _RequestCoSim_default_instance_;
class StopCoSimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopCoSim>
      _instance;
} _StopCoSim_default_instance_;
class GetGroundTruthWorldPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetGroundTruthWorldPose>
      _instance;
} _GetGroundTruthWorldPose_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion>
      _instance;
} _Quaternion_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class StopSimulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopSimulation>
      _instance;
} _StopSimulation_default_instance_;
class LaserDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaserData>
      _instance;
} _LaserData_default_instance_;
class RequestLaserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestLaser>
      _instance;
} _RequestLaser_default_instance_;
class ImuDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuData>
      _instance;
} _ImuData_default_instance_;
class RequestImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestImu>
      _instance;
} _RequestImu_default_instance_;
class SubscribeImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeImage>
      _instance;
} _SubscribeImage_default_instance_;
class SubscribeLaserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeLaser>
      _instance;
} _SubscribeLaser_default_instance_;
class SubscribeImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeImu>
      _instance;
} _SubscribeImu_default_instance_;
class ApplyLinkWrenchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyLinkWrench>
      _instance;
} _ApplyLinkWrench_default_instance_;
class ApplyJointTorqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyJointTorque>
      _instance;
} _ApplyJointTorque_default_instance_;
class GetPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPose>
      _instance;
} _GetPose_default_instance_;
class GetTopicListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTopicList>
      _instance;
} _GetTopicList_default_instance_;
class TopicList_TopicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicList_TopicInfo>
      _instance;
} _TopicList_TopicInfo_default_instance_;
class TopicListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicList>
      _instance;
} _TopicList_default_instance_;
class GetModelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetModelInfo>
      _instance;
} _GetModelInfo_default_instance_;
class ModelInfo_LINKSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelInfo_LINKS>
      _instance;
} _ModelInfo_LINKS_default_instance_;
class ModelInfo_JOINTSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelInfo_JOINTS>
      _instance;
} _ModelInfo_JOINTS_default_instance_;
class ModelInfo_ModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelInfo_Model>
      _instance;
} _ModelInfo_Model_default_instance_;
class ModelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelInfo>
      _instance;
} _ModelInfo_default_instance_;
class MaxStepSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaxStepSize>
      _instance;
} _MaxStepSize_default_instance_;
class InitCustomPublisherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitCustomPublisher>
      _instance;
} _InitCustomPublisher_default_instance_;
class InitCustomSubscriberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitCustomSubscriber>
      _instance;
} _InitCustomSubscriber_default_instance_;
class CustomMessageSupportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomMessageSupport>
      _instance;
} _CustomMessageSupport_default_instance_;
class RequestCustomMessageSupportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCustomMessageSupport>
      _instance;
} _RequestCustomMessageSupport_default_instance_;
class SetJointPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetJointPosition>
      _instance;
} _SetJointPosition_default_instance_;
class SetJointVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetJointVelocity>
      _instance;
} _SetJointVelocity_default_instance_;
class GetJointStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetJointState>
      _instance;
} _GetJointState_default_instance_;
class AxisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Axis>
      _instance;
} _Axis_default_instance_;
class JointStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointState>
      _instance;
} _JointState_default_instance_;
class SetLinkWorldPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetLinkWorldPose>
      _instance;
} _SetLinkWorldPose_default_instance_;
class SetLinkLinearVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetLinkLinearVelocity>
      _instance;
} _SetLinkLinearVelocity_default_instance_;
class SetLinkAngularVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetLinkAngularVelocity>
      _instance;
} _SetLinkAngularVelocity_default_instance_;
class GetLinkStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLinkState>
      _instance;
} _GetLinkState_default_instance_;
class LinkStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkState>
      _instance;
} _LinkState_default_instance_;
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto {
static void InitDefaultsTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Time_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Time =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTime}, {}};

static void InitDefaultsPacketHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_PacketHeader_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::PacketHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::PacketHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PacketHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPacketHeader}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Packet_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<38> scc_info_Packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 38, InitDefaultsPacket}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_PacketHeader.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StepSimulation.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ResetSimulation.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Image.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImage.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCoSim.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopCoSim.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetGroundTruthWorldPose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopSimulation.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LaserData.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestLaser.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ImuData.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImu.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImage.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeLaser.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImu.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyJointTorque.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetPose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetTopicList.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetModelInfo.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyLinkWrench.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_MaxStepSize.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_CustomMessageSupport.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomPublisher.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomSubscriber.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCustomMessageSupport.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointPosition.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointVelocity.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetJointState.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_JointState.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkWorldPose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkLinearVelocity.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkAngularVelocity.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetLinkState.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LinkState.base,}};

static void InitDefaultsStepSimulation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_StepSimulation_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::StepSimulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::StepSimulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StepSimulation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStepSimulation}, {}};

static void InitDefaultsResetSimulation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ResetSimulation_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ResetSimulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ResetSimulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResetSimulation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResetSimulation}, {}};

static void InitDefaultsImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Image_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Image();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Image::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Image =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImage}, {}};

static void InitDefaultsRequestImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_RequestImage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::RequestImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::RequestImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestImage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestImage}, {}};

static void InitDefaultsRequestCoSim() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_RequestCoSim_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::RequestCoSim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::RequestCoSim::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestCoSim =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestCoSim}, {}};

static void InitDefaultsStopCoSim() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_StopCoSim_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::StopCoSim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::StopCoSim::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopCoSim =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopCoSim}, {}};

static void InitDefaultsGetGroundTruthWorldPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetGroundTruthWorldPose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetGroundTruthWorldPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetGroundTruthWorldPose}, {}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Point_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsQuaternion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Quaternion_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuaternion}, {}};

static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Pose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPose}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Quaternion.base,}};

static void InitDefaultsStopSimulation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_StopSimulation_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::StopSimulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::StopSimulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopSimulation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopSimulation}, {}};

static void InitDefaultsLaserData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_LaserData_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::LaserData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::LaserData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaserData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaserData}, {}};

static void InitDefaultsRequestLaser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_RequestLaser_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::RequestLaser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::RequestLaser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestLaser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestLaser}, {}};

static void InitDefaultsImuData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ImuData_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ImuData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ImuData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ImuData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsImuData}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Quaternion.base,}};

static void InitDefaultsRequestImu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_RequestImu_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::RequestImu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::RequestImu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestImu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestImu}, {}};

static void InitDefaultsSubscribeImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SubscribeImage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SubscribeImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SubscribeImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeImage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeImage}, {}};

static void InitDefaultsSubscribeLaser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SubscribeLaser_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SubscribeLaser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SubscribeLaser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeLaser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeLaser}, {}};

static void InitDefaultsSubscribeImu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SubscribeImu_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SubscribeImu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SubscribeImu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeImu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeImu}, {}};

static void InitDefaultsApplyLinkWrench() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ApplyLinkWrench_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ApplyLinkWrench();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ApplyLinkWrench::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplyLinkWrench =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplyLinkWrench}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsApplyJointTorque() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ApplyJointTorque_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ApplyJointTorque();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ApplyJointTorque::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplyJointTorque =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplyJointTorque}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsGetPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetPose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPose}, {}};

static void InitDefaultsGetTopicList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetTopicList_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetTopicList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetTopicList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTopicList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTopicList}, {}};

static void InitDefaultsTopicList_TopicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TopicList_TopicInfo_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TopicList_TopicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TopicList_TopicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TopicList_TopicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTopicList_TopicInfo}, {}};

static void InitDefaultsTopicList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TopicList_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TopicList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TopicList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TopicList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTopicList}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList_TopicInfo.base,}};

static void InitDefaultsGetModelInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetModelInfo_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetModelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetModelInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetModelInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetModelInfo}, {}};

static void InitDefaultsModelInfo_LINKS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ModelInfo_LINKS_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModelInfo_LINKS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModelInfo_LINKS}, {}};

static void InitDefaultsModelInfo_JOINTS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ModelInfo_JOINTS_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModelInfo_JOINTS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModelInfo_JOINTS}, {}};

static void InitDefaultsModelInfo_Model() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ModelInfo_Model_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ModelInfo_Model();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ModelInfo_Model::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ModelInfo_Model =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsModelInfo_Model}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_LINKS.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_JOINTS.base,}};

static void InitDefaultsModelInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_ModelInfo_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::ModelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::ModelInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModelInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModelInfo}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_Model.base,}};

static void InitDefaultsMaxStepSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_MaxStepSize_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::MaxStepSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::MaxStepSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MaxStepSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaxStepSize}, {}};

static void InitDefaultsInitCustomPublisher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_InitCustomPublisher_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::InitCustomPublisher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::InitCustomPublisher::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitCustomPublisher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitCustomPublisher}, {}};

static void InitDefaultsInitCustomSubscriber() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_InitCustomSubscriber_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::InitCustomSubscriber();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::InitCustomSubscriber::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitCustomSubscriber =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitCustomSubscriber}, {}};

static void InitDefaultsCustomMessageSupport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_CustomMessageSupport_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::CustomMessageSupport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::CustomMessageSupport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomMessageSupport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomMessageSupport}, {}};

static void InitDefaultsRequestCustomMessageSupport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_RequestCustomMessageSupport_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestCustomMessageSupport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestCustomMessageSupport}, {}};

static void InitDefaultsSetJointPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SetJointPosition_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SetJointPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SetJointPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetJointPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetJointPosition}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsSetJointVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SetJointVelocity_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SetJointVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SetJointVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetJointVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetJointVelocity}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsGetJointState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetJointState_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetJointState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetJointState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetJointState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetJointState}, {}};

static void InitDefaultsAxis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_Axis_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::Axis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::Axis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Axis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAxis}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,}};

static void InitDefaultsJointState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_JointState_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::JointState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::JointState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_JointState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJointState}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Axis.base,}};

static void InitDefaultsSetLinkWorldPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SetLinkWorldPose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SetLinkWorldPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SetLinkWorldPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkWorldPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSetLinkWorldPose}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsSetLinkLinearVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SetLinkLinearVelocity_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkLinearVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSetLinkLinearVelocity}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsSetLinkAngularVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_SetLinkAngularVelocity_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SetLinkAngularVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSetLinkAngularVelocity}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base,}};

static void InitDefaultsGetLinkState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_GetLinkState_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::GetLinkState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::GetLinkState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetLinkState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetLinkState}, {}};

static void InitDefaultsLinkState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_LinkState_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::LinkState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::LinkState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinkState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinkState}, {
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base,
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Time.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PacketHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Packet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StepSimulation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResetSimulation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Image.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestImage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestCoSim.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopCoSim.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetGroundTruthWorldPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Quaternion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopSimulation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaserData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestLaser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestImu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeImage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeLaser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeImu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyLinkWrench.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyJointTorque.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTopicList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TopicList_TopicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TopicList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetModelInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelInfo_LINKS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelInfo_JOINTS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelInfo_Model.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaxStepSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitCustomPublisher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitCustomSubscriber.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomMessageSupport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestCustomMessageSupport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetJointPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetJointVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetJointState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Axis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetLinkWorldPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetLinkLinearVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetLinkAngularVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLinkState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkState.base);
}

::google::protobuf::Metadata file_level_metadata[47];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Time, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Time, nano_seconds_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::PacketHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::PacketHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::PacketHeader, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::PacketHeader, time_stamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Packet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Packet, header_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, status_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, step_simulation_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, reset_simulation_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, image_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, request_image_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, request_cosim_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, stop_cosim_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_ground_truth_world_pose_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, pose_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, stop_simulation_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, laser_data_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, request_laser_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, imu_data_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, request_imu_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, subscribe_image_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, subscribe_laser_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, subscribe_imu_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, apply_joint_torque_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_pose_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_topic_list_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, topic_list_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_model_info_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, model_info_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, apply_link_wrench_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, max_step_size_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, custom_message_support_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, init_custom_publisher_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, init_custom_subscriber_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, request_custom_message_support_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, set_joint_position_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, set_joint_velocity_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_joint_state_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, joint_state_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, set_link_world_pose_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, set_link_linear_velocity_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, set_link_angular_velocity_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, get_link_state_),
  offsetof(::mw::internal::robotics::gazebotransport::PacketDefaultTypeInternal, link_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Packet, payload_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StepSimulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StepSimulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StepSimulation, num_steps_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ResetSimulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ResetSimulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ResetSimulation, behavior_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Image, data_type_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImage, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCoSim, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCoSim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCoSim, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCoSim, duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopCoSim, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopCoSim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopCoSim, client_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose, link_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Point, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Quaternion, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Pose, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Pose, orientation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopSimulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopSimulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::StopSimulation, stop_scene_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, angle_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, angle_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, angle_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, range_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, range_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, vertical_angle_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, vertical_angle_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, vertical_angle_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LaserData, intensities_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestLaser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestLaser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestLaser, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ImuData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ImuData, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ImuData, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ImuData, orientation_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestImu, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImage, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeLaser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeLaser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeLaser, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SubscribeImu, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, force_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, fx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, fy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, fz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, torque_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyLinkWrench, duration_),
  0,
  1,
  2,
  5,
  6,
  7,
  3,
  8,
  9,
  10,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, joint_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, effort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ApplyJointTorque, duration_),
  0,
  1,
  4,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetPose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetPose, model_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetTopicList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetTopicList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetTopicList, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList_TopicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList_TopicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList_TopicInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList_TopicInfo, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TopicList, data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetModelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetModelInfo, topic_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_LINKS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_LINKS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_LINKS, link_name_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS, joint_name_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_Model, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_Model, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_Model, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo_Model, joints_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::ModelInfo, model_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::MaxStepSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::MaxStepSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::MaxStepSize, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::MaxStepSize, size_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomPublisher, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomPublisher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomPublisher, topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomPublisher, message_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomSubscriber, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomSubscriber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomSubscriber, topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::InitCustomSubscriber, message_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::CustomMessageSupport, is_new_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport, topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport, message_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, joint_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointPosition, duration_),
  0,
  1,
  4,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, joint_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetJointVelocity, duration_),
  0,
  1,
  4,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetJointState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetJointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetJointState, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetJointState, joint_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, xyz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, limit_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, limit_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, limit_effort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, limit_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::Axis, use_parent_model_frame_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, joint_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, joint_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, joint_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, joint_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, joint_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, parent_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, child_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, child_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, initial_anchor_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, world_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, parent_world_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::JointState, axis_),
  0,
  1,
  7,
  ~0u,
  ~0u,
  10,
  2,
  8,
  3,
  9,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkWorldPose, duration_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity, duration_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity, duration_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetLinkState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetLinkState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetLinkState, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::GetLinkState, link_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, world_linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, world_angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, relative_linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, relative_angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, world_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, relative_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, self_collide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, kinematic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, enable_wind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::LinkState, canonical_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  11,
  12,
  13,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mw::internal::robotics::gazebotransport::Time)},
  { 9, 16, sizeof(::mw::internal::robotics::gazebotransport::PacketHeader)},
  { 18, 63, sizeof(::mw::internal::robotics::gazebotransport::Packet)},
  { 102, 108, sizeof(::mw::internal::robotics::gazebotransport::StepSimulation)},
  { 109, 115, sizeof(::mw::internal::robotics::gazebotransport::ResetSimulation)},
  { 116, 125, sizeof(::mw::internal::robotics::gazebotransport::Image)},
  { 129, 135, sizeof(::mw::internal::robotics::gazebotransport::RequestImage)},
  { 136, 143, sizeof(::mw::internal::robotics::gazebotransport::RequestCoSim)},
  { 145, 151, sizeof(::mw::internal::robotics::gazebotransport::StopCoSim)},
  { 152, 159, sizeof(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose)},
  { 161, 169, sizeof(::mw::internal::robotics::gazebotransport::Point)},
  { 172, 181, sizeof(::mw::internal::robotics::gazebotransport::Quaternion)},
  { 185, 192, sizeof(::mw::internal::robotics::gazebotransport::Pose)},
  { 194, 200, sizeof(::mw::internal::robotics::gazebotransport::StopSimulation)},
  { 201, 217, sizeof(::mw::internal::robotics::gazebotransport::LaserData)},
  { 228, 234, sizeof(::mw::internal::robotics::gazebotransport::RequestLaser)},
  { 235, 243, sizeof(::mw::internal::robotics::gazebotransport::ImuData)},
  { 246, 252, sizeof(::mw::internal::robotics::gazebotransport::RequestImu)},
  { 253, 259, sizeof(::mw::internal::robotics::gazebotransport::SubscribeImage)},
  { 260, 266, sizeof(::mw::internal::robotics::gazebotransport::SubscribeLaser)},
  { 267, 273, sizeof(::mw::internal::robotics::gazebotransport::SubscribeImu)},
  { 274, 290, sizeof(::mw::internal::robotics::gazebotransport::ApplyLinkWrench)},
  { 301, 311, sizeof(::mw::internal::robotics::gazebotransport::ApplyJointTorque)},
  { 316, 322, sizeof(::mw::internal::robotics::gazebotransport::GetPose)},
  { 323, 329, sizeof(::mw::internal::robotics::gazebotransport::GetTopicList)},
  { 330, 337, sizeof(::mw::internal::robotics::gazebotransport::TopicList_TopicInfo)},
  { 339, 345, sizeof(::mw::internal::robotics::gazebotransport::TopicList)},
  { 346, 352, sizeof(::mw::internal::robotics::gazebotransport::GetModelInfo)},
  { 353, 359, sizeof(::mw::internal::robotics::gazebotransport::ModelInfo_LINKS)},
  { 360, 366, sizeof(::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS)},
  { 367, 375, sizeof(::mw::internal::robotics::gazebotransport::ModelInfo_Model)},
  { 378, 384, sizeof(::mw::internal::robotics::gazebotransport::ModelInfo)},
  { 385, 392, sizeof(::mw::internal::robotics::gazebotransport::MaxStepSize)},
  { 394, 401, sizeof(::mw::internal::robotics::gazebotransport::InitCustomPublisher)},
  { 403, 410, sizeof(::mw::internal::robotics::gazebotransport::InitCustomSubscriber)},
  { 412, 421, sizeof(::mw::internal::robotics::gazebotransport::CustomMessageSupport)},
  { 425, 432, sizeof(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport)},
  { 434, 444, sizeof(::mw::internal::robotics::gazebotransport::SetJointPosition)},
  { 449, 459, sizeof(::mw::internal::robotics::gazebotransport::SetJointVelocity)},
  { 464, 471, sizeof(::mw::internal::robotics::gazebotransport::GetJointState)},
  { 473, 486, sizeof(::mw::internal::robotics::gazebotransport::Axis)},
  { 494, 513, sizeof(::mw::internal::robotics::gazebotransport::JointState)},
  { 527, 536, sizeof(::mw::internal::robotics::gazebotransport::SetLinkWorldPose)},
  { 540, 549, sizeof(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity)},
  { 553, 562, sizeof(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity)},
  { 566, 573, sizeof(::mw::internal::robotics::gazebotransport::GetLinkState)},
  { 575, 594, sizeof(::mw::internal::robotics::gazebotransport::LinkState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_PacketHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_StepSimulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ResetSimulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_RequestImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_RequestCoSim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_StopCoSim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetGroundTruthWorldPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_StopSimulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_LaserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_RequestLaser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_RequestImu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SubscribeImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SubscribeLaser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SubscribeImu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ApplyLinkWrench_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ApplyJointTorque_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetTopicList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TopicList_TopicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_TopicList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetModelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ModelInfo_LINKS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ModelInfo_JOINTS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ModelInfo_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_ModelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_MaxStepSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_InitCustomPublisher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_InitCustomSubscriber_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_CustomMessageSupport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_RequestCustomMessageSupport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SetJointPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SetJointVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetJointState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_Axis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_JointState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SetLinkWorldPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SetLinkLinearVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_SetLinkAngularVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_GetLinkState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mw::internal::robotics::gazebotransport::_LinkState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mw.internal.robotics.gazebotransport.CoSimMsgs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 47);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4mw.internal.robotics.gazebotransport.C"
      "oSimMsgs.proto\022$mw.internal.robotics.gaz"
      "ebotransport\"-\n\004Time\022\017\n\007seconds\030\001 \002(\004\022\024\n"
      "\014nano_seconds\030\002 \002(\004\"\301\007\n\014PacketHeader\022D\n\002"
      "id\030\001 \002(\01628.mw.internal.robotics.gazebotr"
      "ansport.PacketHeader.MsgID\022>\n\ntime_stamp"
      "\030\002 \002(\0132*.mw.internal.robotics.gazebotran"
      "sport.Time\"\252\006\n\005MsgID\022\n\n\006STATUS\020\000\022\023\n\017STEP"
      "_SIMULATION\020\001\022\024\n\020RESET_SIMULATION\020\002\022\t\n\005I"
      "MAGE\020\003\022\021\n\rREQUEST_IMAGE\020\004\022\021\n\rREQUEST_COS"
      "IM\020\005\022\016\n\nSTOP_COSIM\020\006\022\037\n\033GET_GROUND_TRUTH"
      "_WORLD_POSE\020\007\022\010\n\004POSE\020\010\022\023\n\017STOP_SIMULATI"
      "ON\020\t\022\016\n\nLASER_DATA\020\n\022\021\n\rREQUEST_LASER\020\013\022"
      "\014\n\010IMU_DATA\020\014\022\017\n\013REQUEST_IMU\020\r\022\023\n\017SUBSCR"
      "IBE_IMAGE\020\016\022\023\n\017SUBSCRIBE_LASER\020\017\022\021\n\rSUBS"
      "CRIBE_IMU\020\020\022\026\n\022APPLY_JOINT_TORQUE\020\021\022\014\n\010G"
      "ET_POSE\020\022\022\022\n\016GET_TOPIC_LIST\020\023\022\016\n\nTOPIC_L"
      "IST\020\024\022\022\n\016GET_MODEL_INFO\020\025\022\016\n\nMODEL_INFO\020"
      "\026\022\025\n\021APPLY_LINK_WRENCH\020\027\022\021\n\rMAX_STEP_SIZ"
      "E\020\030\022\035\n\031CUSTOM_MESSAGE_SUBSCRIBER\020\031\022\034\n\030CU"
      "STOM_MESSAGE_PUBLISHER\020\032\022!\n\035INIT_CUSTOM_"
      "MESSAGE_PUBLISHER\020\033\022\"\n\036INIT_CUSTOM_MESSA"
      "GE_SUBSCRIBER\020\034\022\026\n\022SET_JOINT_POSITION\020\035\022"
      "\026\n\022SET_JOINT_VELOCITY\020\036\022\023\n\017GET_JOINT_STA"
      "TE\020\037\022\017\n\013JOINT_STATE\020 \022\027\n\023SET_LINK_WORLD_"
      "POSE\020!\022\034\n\030SET_LINK_LINEAR_VELOCITY\020\"\022\035\n\031"
      "SET_LINK_ANGULAR_VELOCITY\020#\022\022\n\016GET_LINK_"
      "STATE\020$\022\016\n\nLINK_STATE\020%\"\231\034\n\006Packet\022B\n\006he"
      "ader\030\001 \002(\01322.mw.internal.robotics.gazebo"
      "transport.PacketHeader\022I\n\006status\030\002 \001(\01627"
      ".mw.internal.robotics.gazebotransport.Pa"
      "cket.CoSimErrorH\000\022O\n\017step_simulation\030\003 \001"
      "(\01324.mw.internal.robotics.gazebotranspor"
      "t.StepSimulationH\000\022Q\n\020reset_simulation\030\004"
      " \001(\01325.mw.internal.robotics.gazebotransp"
      "ort.ResetSimulationH\000\022<\n\005image\030\005 \001(\0132+.m"
      "w.internal.robotics.gazebotransport.Imag"
      "eH\000\022K\n\rrequest_image\030\006 \001(\01322.mw.internal"
      ".robotics.gazebotransport.RequestImageH\000"
      "\022K\n\rrequest_cosim\030\007 \001(\01322.mw.internal.ro"
      "botics.gazebotransport.RequestCoSimH\000\022E\n"
      "\nstop_cosim\030\010 \001(\0132/.mw.internal.robotics"
      ".gazebotransport.StopCoSimH\000\022d\n\033get_grou"
      "nd_truth_world_pose\030\t \001(\0132=.mw.internal."
      "robotics.gazebotransport.GetGroundTruthW"
      "orldPoseH\000\022:\n\004pose\030\n \001(\0132*.mw.internal.r"
      "obotics.gazebotransport.PoseH\000\022O\n\017stop_s"
      "imulation\030\013 \001(\01324.mw.internal.robotics.g"
      "azebotransport.StopSimulationH\000\022E\n\nlaser"
      "_data\030\014 \001(\0132/.mw.internal.robotics.gazeb"
      "otransport.LaserDataH\000\022K\n\rrequest_laser\030"
      "\r \001(\01322.mw.internal.robotics.gazebotrans"
      "port.RequestLaserH\000\022A\n\010imu_data\030\016 \001(\0132-."
      "mw.internal.robotics.gazebotransport.Imu"
      "DataH\000\022G\n\013request_imu\030\017 \001(\01320.mw.interna"
      "l.robotics.gazebotransport.RequestImuH\000\022"
      "O\n\017subscribe_image\030\020 \001(\01324.mw.internal.r"
      "obotics.gazebotransport.SubscribeImageH\000"
      "\022O\n\017subscribe_laser\030\021 \001(\01324.mw.internal."
      "robotics.gazebotransport.SubscribeLaserH"
      "\000\022K\n\rsubscribe_imu\030\022 \001(\01322.mw.internal.r"
      "obotics.gazebotransport.SubscribeImuH\000\022T"
      "\n\022apply_joint_torque\030\023 \001(\01326.mw.internal"
      ".robotics.gazebotransport.ApplyJointTorq"
      "ueH\000\022A\n\010get_pose\030\024 \001(\0132-.mw.internal.rob"
      "otics.gazebotransport.GetPoseH\000\022L\n\016get_t"
      "opic_list\030\025 \001(\01322.mw.internal.robotics.g"
      "azebotransport.GetTopicListH\000\022E\n\ntopic_l"
      "ist\030\026 \001(\0132/.mw.internal.robotics.gazebot"
      "ransport.TopicListH\000\022L\n\016get_model_info\030\027"
      " \001(\01322.mw.internal.robotics.gazebotransp"
      "ort.GetModelInfoH\000\022E\n\nmodel_info\030\030 \001(\0132/"
      ".mw.internal.robotics.gazebotransport.Mo"
      "delInfoH\000\022R\n\021apply_link_wrench\030\031 \001(\01325.m"
      "w.internal.robotics.gazebotransport.Appl"
      "yLinkWrenchH\000\022J\n\rmax_step_size\030\032 \001(\01321.m"
      "w.internal.robotics.gazebotransport.MaxS"
      "tepSizeH\000\022\\\n\026custom_message_support\030\033 \001("
      "\0132:.mw.internal.robotics.gazebotransport"
      ".CustomMessageSupportH\000\022Z\n\025init_custom_p"
      "ublisher\030\034 \001(\01329.mw.internal.robotics.ga"
      "zebotransport.InitCustomPublisherH\000\022\\\n\026i"
      "nit_custom_subscriber\030\035 \001(\0132:.mw.interna"
      "l.robotics.gazebotransport.InitCustomSub"
      "scriberH\000\022k\n\036request_custom_message_supp"
      "ort\030\036 \001(\0132A.mw.internal.robotics.gazebot"
      "ransport.RequestCustomMessageSupportH\000\022T"
      "\n\022set_joint_position\030\037 \001(\01326.mw.internal"
      ".robotics.gazebotransport.SetJointPositi"
      "onH\000\022T\n\022set_joint_velocity\030  \001(\01326.mw.in"
      "ternal.robotics.gazebotransport.SetJoint"
      "VelocityH\000\022N\n\017get_joint_state\030! \001(\01323.mw"
      ".internal.robotics.gazebotransport.GetJo"
      "intStateH\000\022G\n\013joint_state\030\" \001(\01320.mw.int"
      "ernal.robotics.gazebotransport.JointStat"
      "eH\000\022U\n\023set_link_world_pose\030# \001(\01326.mw.in"
      "ternal.robotics.gazebotransport.SetLinkW"
      "orldPoseH\000\022_\n\030set_link_linear_velocity\030$"
      " \001(\0132;.mw.internal.robotics.gazebotransp"
      "ort.SetLinkLinearVelocityH\000\022a\n\031set_link_"
      "angular_velocity\030% \001(\0132<.mw.internal.rob"
      "otics.gazebotransport.SetLinkAngularVelo"
      "cityH\000\022L\n\016get_link_state\030& \001(\01322.mw.inte"
      "rnal.robotics.gazebotransport.GetLinkSta"
      "teH\000\022E\n\nlink_state\030\' \001(\0132/.mw.internal.r"
      "obotics.gazebotransport.LinkStateH\000\"\322\003\n\n"
      "CoSimError\022\010\n\004NONE\020\000\022\017\n\013STEP_FAILED\020\001\022\017\n"
      "\013MSG_INVALID\020\002\022\021\n\rSOCKET_FAILED\020\003\022\020\n\014RES"
      "ET_FAILED\020\004\022\020\n\014COSIM_FAILED\020\005\022\025\n\021STOP_CO"
      "SIM_FAILED\020\006\022&\n\"GET_GROUND_TRUTH_WORLD_P"
      "OSE_FAILED\020\007\022\033\n\027RESET_TIME_SCENE_FAILED\020"
      "\010\022\025\n\021RESET_TIME_FAILED\020\t\022\017\n\013STOP_FAILED\020"
      "\n\022\026\n\022FORCE_TYPE_INVALID\020\013\022\026\n\022MODEL_NAME_"
      "INVALID\020\014\022\025\n\021LINK_NAME_INVALID\020\r\022\026\n\022JOIN"
      "T_NAME_INVALID\020\016\022\026\n\022TOPIC_NAME_INVALID\020\017"
      "\022\027\n\023TORQUE_TYPE_INVALID\020\020\022\027\n\023MAX_STEP_SI"
      "ZE_ERROR\020\021\022\032\n\026CUSTOM_MESSAGE_INVALID\020\022\022\030"
      "\n\024MESSAGE_TYPE_INVALID\020\023B\t\n\007payload\"#\n\016S"
      "tepSimulation\022\021\n\tnum_steps\030\001 \002(\r\"\243\001\n\017Res"
      "etSimulation\022U\n\010behavior\030\001 \002(\0162C.mw.inte"
      "rnal.robotics.gazebotransport.ResetSimul"
      "ation.ResetBehavior\"9\n\rResetBehavior\022\016\n\n"
      "RESET_TIME\020\000\022\030\n\024RESET_TIME_AND_SCENE\020\001\"G"
      "\n\005Image\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\022\014"
      "\n\004data\030\003 \002(\014\022\021\n\tdata_type\030\004 \002(\t\"\"\n\014Reque"
      "stImage\022\022\n\ntopic_name\030\001 \002(\t\"3\n\014RequestCo"
      "Sim\022\021\n\tclient_id\030\001 \002(\t\022\020\n\010duration\030\002 \002(\001"
      "\"\036\n\tStopCoSim\022\021\n\tclient_id\030\001 \002(\t\"@\n\027GetG"
      "roundTruthWorldPose\022\022\n\nmodel_name\030\001 \002(\t\022"
      "\021\n\tlink_name\030\002 \002(\t\"(\n\005Point\022\t\n\001x\030\001 \002(\001\022\t"
      "\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"8\n\nQuaternion\022\t\n\001x\030"
      "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\t\n\001w\030\004 \002(\001\"\214"
      "\001\n\004Pose\022=\n\010position\030\001 \002(\0132+.mw.internal."
      "robotics.gazebotransport.Point\022E\n\013orient"
      "ation\030\002 \002(\01320.mw.internal.robotics.gazeb"
      "otransport.Quaternion\"$\n\016StopSimulation\022"
      "\022\n\nstop_scene\030\001 \002(\010\"\363\001\n\tLaserData\022\021\n\tang"
      "le_min\030\001 \002(\001\022\021\n\tangle_max\030\002 \002(\001\022\022\n\nangle"
      "_step\030\003 \002(\001\022\021\n\trange_min\030\004 \002(\001\022\021\n\trange_"
      "max\030\005 \002(\001\022\r\n\005count\030\006 \002(\001\022\032\n\022vertical_ang"
      "le_min\030\007 \002(\001\022\032\n\022vertical_angle_max\030\010 \002(\001"
      "\022\033\n\023vertical_angle_step\030\t \002(\001\022\r\n\005range\030\n"
      " \003(\001\022\023\n\013intensities\030\013 \003(\001\"\"\n\014RequestLase"
      "r\022\022\n\ntopic_name\030\001 \002(\t\"\341\001\n\007ImuData\022H\n\023lin"
      "ear_acceleration\030\001 \002(\0132+.mw.internal.rob"
      "otics.gazebotransport.Point\022E\n\020angular_v"
      "elocity\030\002 \002(\0132+.mw.internal.robotics.gaz"
      "ebotransport.Point\022E\n\013orientation\030\003 \002(\0132"
      "0.mw.internal.robotics.gazebotransport.Q"
      "uaternion\" \n\nRequestImu\022\022\n\ntopic_name\030\001 "
      "\002(\t\"$\n\016SubscribeImage\022\022\n\ntopic_name\030\001 \002("
      "\t\"$\n\016SubscribeLaser\022\022\n\ntopic_name\030\001 \002(\t\""
      "\"\n\014SubscribeImu\022\022\n\ntopic_name\030\001 \002(\t\"\347\001\n\017"
      "ApplyLinkWrench\022\022\n\nmodel_name\030\001 \002(\t\022\021\n\tl"
      "ink_name\030\002 \002(\t\022\022\n\nforce_type\030\003 \002(\t\022\n\n\002fx"
      "\030\004 \002(\001\022\n\n\002fy\030\005 \002(\001\022\n\n\002fz\030\006 \002(\001\022\023\n\013torque"
      "_type\030\007 \002(\t\022\n\n\002tx\030\010 \002(\001\022\n\n\002ty\030\t \002(\001\022\n\n\002t"
      "z\030\n \002(\001\022<\n\010duration\030\013 \002(\0132*.mw.internal."
      "robotics.gazebotransport.Time\"\227\001\n\020ApplyJ"
      "ointTorque\022\022\n\nmodel_name\030\001 \002(\t\022\022\n\njoint_"
      "name\030\002 \002(\t\022\r\n\005index\030\003 \002(\r\022\016\n\006effort\030\004 \002("
      "\001\022<\n\010duration\030\005 \002(\0132*.mw.internal.roboti"
      "cs.gazebotransport.Time\"\035\n\007GetPose\022\022\n\nmo"
      "del_name\030\001 \002(\t\"\"\n\014GetTopicList\022\022\n\ntopic_"
      "name\030\001 \002(\t\"}\n\tTopicList\022G\n\004data\030\001 \003(\01329."
      "mw.internal.robotics.gazebotransport.Top"
      "icList.TopicInfo\032\'\n\tTopicInfo\022\014\n\004name\030\001 "
      "\002(\t\022\014\n\004type\030\002 \002(\t\"\"\n\014GetModelInfo\022\022\n\ntop"
      "ic_name\030\001 \002(\t\"\274\002\n\tModelInfo\022I\n\nmodel_dat"
      "a\030\001 \003(\01325.mw.internal.robotics.gazebotra"
      "nsport.ModelInfo.Model\032\032\n\005LINKS\022\021\n\tlink_"
      "name\030\001 \003(\t\032\034\n\006JOINTS\022\022\n\njoint_name\030\001 \003(\t"
      "\032\251\001\n\005Model\022\022\n\nmodel_name\030\001 \002(\t\022D\n\005links\030"
      "\002 \001(\01325.mw.internal.robotics.gazebotrans"
      "port.ModelInfo.LINKS\022F\n\006joints\030\003 \001(\01326.m"
      "w.internal.robotics.gazebotransport.Mode"
      "lInfo.JOINTS\"\217\001\n\013MaxStepSize\022D\n\004type\030\001 \002"
      "(\01626.mw.internal.robotics.gazebotranspor"
      "t.MaxStepSize.TYPE\022\014\n\004size\030\002 \002(\001\",\n\004TYPE"
      "\022\021\n\rSET_STEP_SIZE\020\000\022\021\n\rGET_STEP_SIZE\020\001\"\?"
      "\n\023InitCustomPublisher\022\022\n\ntopic_name\030\001 \002("
      "\t\022\024\n\014message_type\030\002 \002(\t\"@\n\024InitCustomSub"
      "scriber\022\022\n\ntopic_name\030\001 \002(\t\022\024\n\014message_t"
      "ype\030\002 \002(\t\"^\n\024CustomMessageSupport\022\022\n\ntop"
      "ic_name\030\001 \002(\t\022\024\n\014message_type\030\002 \002(\t\022\014\n\004d"
      "ata\030\003 \002(\014\022\016\n\006is_new\030\004 \001(\010\"G\n\033RequestCust"
      "omMessageSupport\022\022\n\ntopic_name\030\001 \002(\t\022\024\n\014"
      "message_type\030\002 \002(\t\"\231\001\n\020SetJointPosition\022"
      "\022\n\nmodel_name\030\001 \002(\t\022\022\n\njoint_name\030\002 \002(\t\022"
      "\r\n\005index\030\003 \002(\r\022\020\n\010position\030\004 \002(\001\022<\n\010dura"
      "tion\030\005 \002(\0132*.mw.internal.robotics.gazebo"
      "transport.Time\"\231\001\n\020SetJointVelocity\022\022\n\nm"
      "odel_name\030\001 \002(\t\022\022\n\njoint_name\030\002 \002(\t\022\r\n\005i"
      "ndex\030\003 \002(\r\022\020\n\010velocity\030\004 \002(\001\022<\n\010duration"
      "\030\005 \002(\0132*.mw.internal.robotics.gazebotran"
      "sport.Time\"7\n\rGetJointState\022\022\n\nmodel_nam"
      "e\030\001 \002(\t\022\022\n\njoint_name\030\002 \002(\t\"\333\001\n\004Axis\0228\n\003"
      "xyz\030\001 \002(\0132+.mw.internal.robotics.gazebot"
      "ransport.Point\022\023\n\013limit_lower\030\002 \002(\001\022\023\n\013l"
      "imit_upper\030\003 \002(\001\022\024\n\014limit_effort\030\004 \002(\001\022\026"
      "\n\016limit_velocity\030\005 \002(\001\022\017\n\007damping\030\006 \002(\001\022"
      "\020\n\010friction\030\007 \002(\001\022\036\n\026use_parent_model_fr"
      "ame\030\010 \002(\010\"\225\005\n\nJointState\022\022\n\nmodel_name\030\001"
      " \002(\t\022\022\n\njoint_name\030\002 \002(\t\022\020\n\010joint_id\030\003 \002"
      "(\r\022\026\n\016joint_position\030\004 \003(\001\022\026\n\016joint_velo"
      "city\030\005 \003(\001\022O\n\njoint_type\030\006 \001(\0162;.mw.inte"
      "rnal.robotics.gazebotransport.JointState"
      ".Joint_Type\022\023\n\013parent_name\030\007 \001(\t\022\021\n\tpare"
      "nt_id\030\010 \001(\r\022\022\n\nchild_name\030\t \001(\t\022\020\n\010child"
      "_id\030\n \001(\r\022G\n\023initial_anchor_pose\030\013 \001(\0132*"
      ".mw.internal.robotics.gazebotransport.Po"
      "se\022>\n\nworld_pose\030\014 \001(\0132*.mw.internal.rob"
      "otics.gazebotransport.Pose\022E\n\021parent_wor"
      "ld_pose\030\r \001(\0132*.mw.internal.robotics.gaz"
      "ebotransport.Pose\0228\n\004axis\030\016 \003(\0132*.mw.int"
      "ernal.robotics.gazebotransport.Axis\"t\n\nJ"
      "oint_Type\022\014\n\010REVOLUTE\020\001\022\r\n\tREVOLUTE2\020\002\022\r"
      "\n\tPRISMATIC\020\003\022\r\n\tUNIVERSAL\020\004\022\010\n\004BALL\020\005\022\t"
      "\n\005SCREW\020\006\022\013\n\007GEARBOX\020\007\022\t\n\005FIXED\020\010\"\261\001\n\020Se"
      "tLinkWorldPose\022\022\n\nmodel_name\030\001 \002(\t\022\021\n\tli"
      "nk_name\030\002 \002(\t\0228\n\004pose\030\003 \002(\0132*.mw.interna"
      "l.robotics.gazebotransport.Pose\022<\n\010durat"
      "ion\030\004 \002(\0132*.mw.internal.robotics.gazebot"
      "ransport.Time\"\273\001\n\025SetLinkLinearVelocity\022"
      "\022\n\nmodel_name\030\001 \002(\t\022\021\n\tlink_name\030\002 \002(\t\022="
      "\n\010velocity\030\003 \002(\0132+.mw.internal.robotics."
      "gazebotransport.Point\022<\n\010duration\030\004 \002(\0132"
      "*.mw.internal.robotics.gazebotransport.T"
      "ime\"\274\001\n\026SetLinkAngularVelocity\022\022\n\nmodel_"
      "name\030\001 \002(\t\022\021\n\tlink_name\030\002 \002(\t\022=\n\010velocit"
      "y\030\003 \002(\0132+.mw.internal.robotics.gazebotra"
      "nsport.Point\022<\n\010duration\030\004 \002(\0132*.mw.inte"
      "rnal.robotics.gazebotransport.Time\"5\n\014Ge"
      "tLinkState\022\022\n\nmodel_name\030\001 \002(\t\022\021\n\tlink_n"
      "ame\030\002 \002(\t\"\340\004\n\tLinkState\022\022\n\nmodel_name\030\001 "
      "\002(\t\022\021\n\tlink_name\030\002 \002(\t\022\017\n\007link_id\030\003 \002(\r\022"
      "J\n\025world_linear_velocity\030\004 \002(\0132+.mw.inte"
      "rnal.robotics.gazebotransport.Point\022K\n\026w"
      "orld_angular_velocity\030\005 \002(\0132+.mw.interna"
      "l.robotics.gazebotransport.Point\022M\n\030rela"
      "tive_linear_velocity\030\006 \002(\0132+.mw.internal"
      ".robotics.gazebotransport.Point\022N\n\031relat"
      "ive_angular_velocity\030\007 \002(\0132+.mw.internal"
      ".robotics.gazebotransport.Point\022>\n\nworld"
      "_pose\030\010 \001(\0132*.mw.internal.robotics.gazeb"
      "otransport.Pose\022A\n\rrelative_pose\030\t \001(\0132*"
      ".mw.internal.robotics.gazebotransport.Po"
      "se\022\024\n\014self_collide\030\n \001(\010\022\017\n\007gravity\030\013 \001("
      "\010\022\021\n\tkinematic\030\014 \001(\010\022\023\n\013enable_wind\030\r \001("
      "\010\022\021\n\tcanonical\030\016 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9980);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mw.internal.robotics.gazebotransport.CoSimMsgs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
const ::google::protobuf::EnumDescriptor* PacketHeader_MsgID_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_enum_descriptors[0];
}
bool PacketHeader_MsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PacketHeader_MsgID PacketHeader::STATUS;
const PacketHeader_MsgID PacketHeader::STEP_SIMULATION;
const PacketHeader_MsgID PacketHeader::RESET_SIMULATION;
const PacketHeader_MsgID PacketHeader::IMAGE;
const PacketHeader_MsgID PacketHeader::REQUEST_IMAGE;
const PacketHeader_MsgID PacketHeader::REQUEST_COSIM;
const PacketHeader_MsgID PacketHeader::STOP_COSIM;
const PacketHeader_MsgID PacketHeader::GET_GROUND_TRUTH_WORLD_POSE;
const PacketHeader_MsgID PacketHeader::POSE;
const PacketHeader_MsgID PacketHeader::STOP_SIMULATION;
const PacketHeader_MsgID PacketHeader::LASER_DATA;
const PacketHeader_MsgID PacketHeader::REQUEST_LASER;
const PacketHeader_MsgID PacketHeader::IMU_DATA;
const PacketHeader_MsgID PacketHeader::REQUEST_IMU;
const PacketHeader_MsgID PacketHeader::SUBSCRIBE_IMAGE;
const PacketHeader_MsgID PacketHeader::SUBSCRIBE_LASER;
const PacketHeader_MsgID PacketHeader::SUBSCRIBE_IMU;
const PacketHeader_MsgID PacketHeader::APPLY_JOINT_TORQUE;
const PacketHeader_MsgID PacketHeader::GET_POSE;
const PacketHeader_MsgID PacketHeader::GET_TOPIC_LIST;
const PacketHeader_MsgID PacketHeader::TOPIC_LIST;
const PacketHeader_MsgID PacketHeader::GET_MODEL_INFO;
const PacketHeader_MsgID PacketHeader::MODEL_INFO;
const PacketHeader_MsgID PacketHeader::APPLY_LINK_WRENCH;
const PacketHeader_MsgID PacketHeader::MAX_STEP_SIZE;
const PacketHeader_MsgID PacketHeader::CUSTOM_MESSAGE_SUBSCRIBER;
const PacketHeader_MsgID PacketHeader::CUSTOM_MESSAGE_PUBLISHER;
const PacketHeader_MsgID PacketHeader::INIT_CUSTOM_MESSAGE_PUBLISHER;
const PacketHeader_MsgID PacketHeader::INIT_CUSTOM_MESSAGE_SUBSCRIBER;
const PacketHeader_MsgID PacketHeader::SET_JOINT_POSITION;
const PacketHeader_MsgID PacketHeader::SET_JOINT_VELOCITY;
const PacketHeader_MsgID PacketHeader::GET_JOINT_STATE;
const PacketHeader_MsgID PacketHeader::JOINT_STATE;
const PacketHeader_MsgID PacketHeader::SET_LINK_WORLD_POSE;
const PacketHeader_MsgID PacketHeader::SET_LINK_LINEAR_VELOCITY;
const PacketHeader_MsgID PacketHeader::SET_LINK_ANGULAR_VELOCITY;
const PacketHeader_MsgID PacketHeader::GET_LINK_STATE;
const PacketHeader_MsgID PacketHeader::LINK_STATE;
const PacketHeader_MsgID PacketHeader::MsgID_MIN;
const PacketHeader_MsgID PacketHeader::MsgID_MAX;
const int PacketHeader::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Packet_CoSimError_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_enum_descriptors[1];
}
bool Packet_CoSimError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Packet_CoSimError Packet::NONE;
const Packet_CoSimError Packet::STEP_FAILED;
const Packet_CoSimError Packet::MSG_INVALID;
const Packet_CoSimError Packet::SOCKET_FAILED;
const Packet_CoSimError Packet::RESET_FAILED;
const Packet_CoSimError Packet::COSIM_FAILED;
const Packet_CoSimError Packet::STOP_COSIM_FAILED;
const Packet_CoSimError Packet::GET_GROUND_TRUTH_WORLD_POSE_FAILED;
const Packet_CoSimError Packet::RESET_TIME_SCENE_FAILED;
const Packet_CoSimError Packet::RESET_TIME_FAILED;
const Packet_CoSimError Packet::STOP_FAILED;
const Packet_CoSimError Packet::FORCE_TYPE_INVALID;
const Packet_CoSimError Packet::MODEL_NAME_INVALID;
const Packet_CoSimError Packet::LINK_NAME_INVALID;
const Packet_CoSimError Packet::JOINT_NAME_INVALID;
const Packet_CoSimError Packet::TOPIC_NAME_INVALID;
const Packet_CoSimError Packet::TORQUE_TYPE_INVALID;
const Packet_CoSimError Packet::MAX_STEP_SIZE_ERROR;
const Packet_CoSimError Packet::CUSTOM_MESSAGE_INVALID;
const Packet_CoSimError Packet::MESSAGE_TYPE_INVALID;
const Packet_CoSimError Packet::CoSimError_MIN;
const Packet_CoSimError Packet::CoSimError_MAX;
const int Packet::CoSimError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResetSimulation_ResetBehavior_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_enum_descriptors[2];
}
bool ResetSimulation_ResetBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResetSimulation_ResetBehavior ResetSimulation::RESET_TIME;
const ResetSimulation_ResetBehavior ResetSimulation::RESET_TIME_AND_SCENE;
const ResetSimulation_ResetBehavior ResetSimulation::ResetBehavior_MIN;
const ResetSimulation_ResetBehavior ResetSimulation::ResetBehavior_MAX;
const int ResetSimulation::ResetBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MaxStepSize_TYPE_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_enum_descriptors[3];
}
bool MaxStepSize_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MaxStepSize_TYPE MaxStepSize::SET_STEP_SIZE;
const MaxStepSize_TYPE MaxStepSize::GET_STEP_SIZE;
const MaxStepSize_TYPE MaxStepSize::TYPE_MIN;
const MaxStepSize_TYPE MaxStepSize::TYPE_MAX;
const int MaxStepSize::TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JointState_Joint_Type_descriptor() {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_enum_descriptors[4];
}
bool JointState_Joint_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JointState_Joint_Type JointState::REVOLUTE;
const JointState_Joint_Type JointState::REVOLUTE2;
const JointState_Joint_Type JointState::PRISMATIC;
const JointState_Joint_Type JointState::UNIVERSAL;
const JointState_Joint_Type JointState::BALL;
const JointState_Joint_Type JointState::SCREW;
const JointState_Joint_Type JointState::GEARBOX;
const JointState_Joint_Type JointState::FIXED;
const JointState_Joint_Type JointState::Joint_Type_MIN;
const JointState_Joint_Type JointState::Joint_Type_MAX;
const int JointState::Joint_Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Time::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSecondsFieldNumber;
const int Time::kNanoSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nano_seconds_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nano_seconds_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Time)
}

void Time::SharedCtor() {
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nano_seconds_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nano_seconds_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Time& Time::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Time.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nano_seconds_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(nano_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nano_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nano_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nano_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seconds(), output);
  }

  // required uint64 nano_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nano_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seconds(), target);
  }

  // required uint64 nano_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nano_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Time)
  return target;
}

size_t Time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Time)
  size_t total_size = 0;

  if (has_seconds()) {
    // required uint64 seconds = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seconds());
  }

  if (has_nano_seconds()) {
    // required uint64 nano_seconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nano_seconds());
  }

  return total_size;
}
size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 seconds = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seconds());

    // required uint64 nano_seconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nano_seconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_seconds_ = from.nano_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  swap(seconds_, other->seconds_);
  swap(nano_seconds_, other->nano_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PacketHeader::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_PacketHeader_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeader::kIdFieldNumber;
const int PacketHeader::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeader::PacketHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_PacketHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.PacketHeader)
}
PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_stamp()) {
    time_stamp_ = new ::mw::internal::robotics::gazebotransport::Time(*from.time_stamp_);
  } else {
    time_stamp_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.PacketHeader)
}

void PacketHeader::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(id_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  if (this != internal_default_instance()) delete time_stamp_;
}

void PacketHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketHeader& PacketHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_PacketHeader.base);
  return *internal_default_instance();
}


void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.PacketHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_stamp_ != NULL);
    time_stamp_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.PacketHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.PacketHeader.MsgID id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::PacketHeader_MsgID_IsValid(value)) {
            set_id(static_cast< ::mw::internal::robotics::gazebotransport::PacketHeader_MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time time_stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.PacketHeader)
  return false;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.PacketHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.PacketHeader.MsgID id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time time_stamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_time_stamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.PacketHeader)
}

::google::protobuf::uint8* PacketHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.PacketHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.PacketHeader.MsgID id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Time time_stamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_time_stamp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.PacketHeader)
  return target;
}

size_t PacketHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.PacketHeader)
  size_t total_size = 0;

  if (has_time_stamp()) {
    // required .mw.internal.robotics.gazebotransport.Time time_stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  if (has_id()) {
    // required .mw.internal.robotics.gazebotransport.PacketHeader.MsgID id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  return total_size;
}
size_t PacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.PacketHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mw.internal.robotics.gazebotransport.Time time_stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_stamp_);

    // required .mw.internal.robotics.gazebotransport.PacketHeader.MsgID id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.PacketHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.PacketHeader)
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time_stamp()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.time_stamp());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_time_stamp()) {
    if (!this->time_stamp_->IsInitialized()) return false;
  }
  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeader::InternalSwap(PacketHeader* other) {
  using std::swap;
  swap(time_stamp_, other->time_stamp_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_._instance.get_mutable()->header_ = const_cast< ::mw::internal::robotics::gazebotransport::PacketHeader*>(
      ::mw::internal::robotics::gazebotransport::PacketHeader::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.status_ = 0;
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.step_simulation_ = const_cast< ::mw::internal::robotics::gazebotransport::StepSimulation*>(
      ::mw::internal::robotics::gazebotransport::StepSimulation::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.reset_simulation_ = const_cast< ::mw::internal::robotics::gazebotransport::ResetSimulation*>(
      ::mw::internal::robotics::gazebotransport::ResetSimulation::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.image_ = const_cast< ::mw::internal::robotics::gazebotransport::Image*>(
      ::mw::internal::robotics::gazebotransport::Image::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.request_image_ = const_cast< ::mw::internal::robotics::gazebotransport::RequestImage*>(
      ::mw::internal::robotics::gazebotransport::RequestImage::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.request_cosim_ = const_cast< ::mw::internal::robotics::gazebotransport::RequestCoSim*>(
      ::mw::internal::robotics::gazebotransport::RequestCoSim::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.stop_cosim_ = const_cast< ::mw::internal::robotics::gazebotransport::StopCoSim*>(
      ::mw::internal::robotics::gazebotransport::StopCoSim::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_ground_truth_world_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose*>(
      ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.stop_simulation_ = const_cast< ::mw::internal::robotics::gazebotransport::StopSimulation*>(
      ::mw::internal::robotics::gazebotransport::StopSimulation::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.laser_data_ = const_cast< ::mw::internal::robotics::gazebotransport::LaserData*>(
      ::mw::internal::robotics::gazebotransport::LaserData::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.request_laser_ = const_cast< ::mw::internal::robotics::gazebotransport::RequestLaser*>(
      ::mw::internal::robotics::gazebotransport::RequestLaser::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.imu_data_ = const_cast< ::mw::internal::robotics::gazebotransport::ImuData*>(
      ::mw::internal::robotics::gazebotransport::ImuData::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.request_imu_ = const_cast< ::mw::internal::robotics::gazebotransport::RequestImu*>(
      ::mw::internal::robotics::gazebotransport::RequestImu::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.subscribe_image_ = const_cast< ::mw::internal::robotics::gazebotransport::SubscribeImage*>(
      ::mw::internal::robotics::gazebotransport::SubscribeImage::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.subscribe_laser_ = const_cast< ::mw::internal::robotics::gazebotransport::SubscribeLaser*>(
      ::mw::internal::robotics::gazebotransport::SubscribeLaser::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.subscribe_imu_ = const_cast< ::mw::internal::robotics::gazebotransport::SubscribeImu*>(
      ::mw::internal::robotics::gazebotransport::SubscribeImu::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.apply_joint_torque_ = const_cast< ::mw::internal::robotics::gazebotransport::ApplyJointTorque*>(
      ::mw::internal::robotics::gazebotransport::ApplyJointTorque::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::GetPose*>(
      ::mw::internal::robotics::gazebotransport::GetPose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_topic_list_ = const_cast< ::mw::internal::robotics::gazebotransport::GetTopicList*>(
      ::mw::internal::robotics::gazebotransport::GetTopicList::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.topic_list_ = const_cast< ::mw::internal::robotics::gazebotransport::TopicList*>(
      ::mw::internal::robotics::gazebotransport::TopicList::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_model_info_ = const_cast< ::mw::internal::robotics::gazebotransport::GetModelInfo*>(
      ::mw::internal::robotics::gazebotransport::GetModelInfo::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.model_info_ = const_cast< ::mw::internal::robotics::gazebotransport::ModelInfo*>(
      ::mw::internal::robotics::gazebotransport::ModelInfo::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.apply_link_wrench_ = const_cast< ::mw::internal::robotics::gazebotransport::ApplyLinkWrench*>(
      ::mw::internal::robotics::gazebotransport::ApplyLinkWrench::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.max_step_size_ = const_cast< ::mw::internal::robotics::gazebotransport::MaxStepSize*>(
      ::mw::internal::robotics::gazebotransport::MaxStepSize::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.custom_message_support_ = const_cast< ::mw::internal::robotics::gazebotransport::CustomMessageSupport*>(
      ::mw::internal::robotics::gazebotransport::CustomMessageSupport::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.init_custom_publisher_ = const_cast< ::mw::internal::robotics::gazebotransport::InitCustomPublisher*>(
      ::mw::internal::robotics::gazebotransport::InitCustomPublisher::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.init_custom_subscriber_ = const_cast< ::mw::internal::robotics::gazebotransport::InitCustomSubscriber*>(
      ::mw::internal::robotics::gazebotransport::InitCustomSubscriber::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.request_custom_message_support_ = const_cast< ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport*>(
      ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.set_joint_position_ = const_cast< ::mw::internal::robotics::gazebotransport::SetJointPosition*>(
      ::mw::internal::robotics::gazebotransport::SetJointPosition::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.set_joint_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::SetJointVelocity*>(
      ::mw::internal::robotics::gazebotransport::SetJointVelocity::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_joint_state_ = const_cast< ::mw::internal::robotics::gazebotransport::GetJointState*>(
      ::mw::internal::robotics::gazebotransport::GetJointState::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.joint_state_ = const_cast< ::mw::internal::robotics::gazebotransport::JointState*>(
      ::mw::internal::robotics::gazebotransport::JointState::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.set_link_world_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::SetLinkWorldPose*>(
      ::mw::internal::robotics::gazebotransport::SetLinkWorldPose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.set_link_linear_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity*>(
      ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.set_link_angular_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity*>(
      ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.get_link_state_ = const_cast< ::mw::internal::robotics::gazebotransport::GetLinkState*>(
      ::mw::internal::robotics::gazebotransport::GetLinkState::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Packet_default_instance_.link_state_ = const_cast< ::mw::internal::robotics::gazebotransport::LinkState*>(
      ::mw::internal::robotics::gazebotransport::LinkState::internal_default_instance());
}
void Packet::set_allocated_step_simulation(::mw::internal::robotics::gazebotransport::StepSimulation* step_simulation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (step_simulation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      step_simulation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, step_simulation, submessage_arena);
    }
    set_has_step_simulation();
    payload_.step_simulation_ = step_simulation;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.step_simulation)
}
void Packet::set_allocated_reset_simulation(::mw::internal::robotics::gazebotransport::ResetSimulation* reset_simulation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (reset_simulation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reset_simulation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reset_simulation, submessage_arena);
    }
    set_has_reset_simulation();
    payload_.reset_simulation_ = reset_simulation;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.reset_simulation)
}
void Packet::set_allocated_image(::mw::internal::robotics::gazebotransport::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    payload_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.image)
}
void Packet::set_allocated_request_image(::mw::internal::robotics::gazebotransport::RequestImage* request_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_image, submessage_arena);
    }
    set_has_request_image();
    payload_.request_image_ = request_image;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.request_image)
}
void Packet::set_allocated_request_cosim(::mw::internal::robotics::gazebotransport::RequestCoSim* request_cosim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request_cosim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_cosim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_cosim, submessage_arena);
    }
    set_has_request_cosim();
    payload_.request_cosim_ = request_cosim;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.request_cosim)
}
void Packet::set_allocated_stop_cosim(::mw::internal::robotics::gazebotransport::StopCoSim* stop_cosim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (stop_cosim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_cosim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_cosim, submessage_arena);
    }
    set_has_stop_cosim();
    payload_.stop_cosim_ = stop_cosim;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.stop_cosim)
}
void Packet::set_allocated_get_ground_truth_world_pose(::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose* get_ground_truth_world_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_ground_truth_world_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_ground_truth_world_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_ground_truth_world_pose, submessage_arena);
    }
    set_has_get_ground_truth_world_pose();
    payload_.get_ground_truth_world_pose_ = get_ground_truth_world_pose;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_ground_truth_world_pose)
}
void Packet::set_allocated_pose(::mw::internal::robotics::gazebotransport::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
    payload_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.pose)
}
void Packet::set_allocated_stop_simulation(::mw::internal::robotics::gazebotransport::StopSimulation* stop_simulation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (stop_simulation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_simulation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_simulation, submessage_arena);
    }
    set_has_stop_simulation();
    payload_.stop_simulation_ = stop_simulation;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.stop_simulation)
}
void Packet::set_allocated_laser_data(::mw::internal::robotics::gazebotransport::LaserData* laser_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (laser_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      laser_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, laser_data, submessage_arena);
    }
    set_has_laser_data();
    payload_.laser_data_ = laser_data;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.laser_data)
}
void Packet::set_allocated_request_laser(::mw::internal::robotics::gazebotransport::RequestLaser* request_laser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request_laser) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_laser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_laser, submessage_arena);
    }
    set_has_request_laser();
    payload_.request_laser_ = request_laser;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.request_laser)
}
void Packet::set_allocated_imu_data(::mw::internal::robotics::gazebotransport::ImuData* imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    set_has_imu_data();
    payload_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.imu_data)
}
void Packet::set_allocated_request_imu(::mw::internal::robotics::gazebotransport::RequestImu* request_imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request_imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_imu, submessage_arena);
    }
    set_has_request_imu();
    payload_.request_imu_ = request_imu;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.request_imu)
}
void Packet::set_allocated_subscribe_image(::mw::internal::robotics::gazebotransport::SubscribeImage* subscribe_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (subscribe_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribe_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribe_image, submessage_arena);
    }
    set_has_subscribe_image();
    payload_.subscribe_image_ = subscribe_image;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.subscribe_image)
}
void Packet::set_allocated_subscribe_laser(::mw::internal::robotics::gazebotransport::SubscribeLaser* subscribe_laser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (subscribe_laser) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribe_laser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribe_laser, submessage_arena);
    }
    set_has_subscribe_laser();
    payload_.subscribe_laser_ = subscribe_laser;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.subscribe_laser)
}
void Packet::set_allocated_subscribe_imu(::mw::internal::robotics::gazebotransport::SubscribeImu* subscribe_imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (subscribe_imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribe_imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribe_imu, submessage_arena);
    }
    set_has_subscribe_imu();
    payload_.subscribe_imu_ = subscribe_imu;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.subscribe_imu)
}
void Packet::set_allocated_apply_joint_torque(::mw::internal::robotics::gazebotransport::ApplyJointTorque* apply_joint_torque) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (apply_joint_torque) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_joint_torque = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_joint_torque, submessage_arena);
    }
    set_has_apply_joint_torque();
    payload_.apply_joint_torque_ = apply_joint_torque;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.apply_joint_torque)
}
void Packet::set_allocated_get_pose(::mw::internal::robotics::gazebotransport::GetPose* get_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_pose, submessage_arena);
    }
    set_has_get_pose();
    payload_.get_pose_ = get_pose;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_pose)
}
void Packet::set_allocated_get_topic_list(::mw::internal::robotics::gazebotransport::GetTopicList* get_topic_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_topic_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_topic_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_topic_list, submessage_arena);
    }
    set_has_get_topic_list();
    payload_.get_topic_list_ = get_topic_list;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_topic_list)
}
void Packet::set_allocated_topic_list(::mw::internal::robotics::gazebotransport::TopicList* topic_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (topic_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_list, submessage_arena);
    }
    set_has_topic_list();
    payload_.topic_list_ = topic_list;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.topic_list)
}
void Packet::set_allocated_get_model_info(::mw::internal::robotics::gazebotransport::GetModelInfo* get_model_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_model_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_model_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_model_info, submessage_arena);
    }
    set_has_get_model_info();
    payload_.get_model_info_ = get_model_info;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_model_info)
}
void Packet::set_allocated_model_info(::mw::internal::robotics::gazebotransport::ModelInfo* model_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (model_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model_info, submessage_arena);
    }
    set_has_model_info();
    payload_.model_info_ = model_info;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.model_info)
}
void Packet::set_allocated_apply_link_wrench(::mw::internal::robotics::gazebotransport::ApplyLinkWrench* apply_link_wrench) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (apply_link_wrench) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_link_wrench = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_link_wrench, submessage_arena);
    }
    set_has_apply_link_wrench();
    payload_.apply_link_wrench_ = apply_link_wrench;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.apply_link_wrench)
}
void Packet::set_allocated_max_step_size(::mw::internal::robotics::gazebotransport::MaxStepSize* max_step_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (max_step_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_step_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_step_size, submessage_arena);
    }
    set_has_max_step_size();
    payload_.max_step_size_ = max_step_size;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.max_step_size)
}
void Packet::set_allocated_custom_message_support(::mw::internal::robotics::gazebotransport::CustomMessageSupport* custom_message_support) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (custom_message_support) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_message_support = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_message_support, submessage_arena);
    }
    set_has_custom_message_support();
    payload_.custom_message_support_ = custom_message_support;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.custom_message_support)
}
void Packet::set_allocated_init_custom_publisher(::mw::internal::robotics::gazebotransport::InitCustomPublisher* init_custom_publisher) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (init_custom_publisher) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_custom_publisher = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_custom_publisher, submessage_arena);
    }
    set_has_init_custom_publisher();
    payload_.init_custom_publisher_ = init_custom_publisher;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.init_custom_publisher)
}
void Packet::set_allocated_init_custom_subscriber(::mw::internal::robotics::gazebotransport::InitCustomSubscriber* init_custom_subscriber) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (init_custom_subscriber) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_custom_subscriber = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_custom_subscriber, submessage_arena);
    }
    set_has_init_custom_subscriber();
    payload_.init_custom_subscriber_ = init_custom_subscriber;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.init_custom_subscriber)
}
void Packet::set_allocated_request_custom_message_support(::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport* request_custom_message_support) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request_custom_message_support) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_custom_message_support = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_custom_message_support, submessage_arena);
    }
    set_has_request_custom_message_support();
    payload_.request_custom_message_support_ = request_custom_message_support;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.request_custom_message_support)
}
void Packet::set_allocated_set_joint_position(::mw::internal::robotics::gazebotransport::SetJointPosition* set_joint_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_joint_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_joint_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_joint_position, submessage_arena);
    }
    set_has_set_joint_position();
    payload_.set_joint_position_ = set_joint_position;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.set_joint_position)
}
void Packet::set_allocated_set_joint_velocity(::mw::internal::robotics::gazebotransport::SetJointVelocity* set_joint_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_joint_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_joint_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_joint_velocity, submessage_arena);
    }
    set_has_set_joint_velocity();
    payload_.set_joint_velocity_ = set_joint_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.set_joint_velocity)
}
void Packet::set_allocated_get_joint_state(::mw::internal::robotics::gazebotransport::GetJointState* get_joint_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_joint_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_joint_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_joint_state, submessage_arena);
    }
    set_has_get_joint_state();
    payload_.get_joint_state_ = get_joint_state;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_joint_state)
}
void Packet::set_allocated_joint_state(::mw::internal::robotics::gazebotransport::JointState* joint_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (joint_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joint_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joint_state, submessage_arena);
    }
    set_has_joint_state();
    payload_.joint_state_ = joint_state;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.joint_state)
}
void Packet::set_allocated_set_link_world_pose(::mw::internal::robotics::gazebotransport::SetLinkWorldPose* set_link_world_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_link_world_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_link_world_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_link_world_pose, submessage_arena);
    }
    set_has_set_link_world_pose();
    payload_.set_link_world_pose_ = set_link_world_pose;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.set_link_world_pose)
}
void Packet::set_allocated_set_link_linear_velocity(::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity* set_link_linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_link_linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_link_linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_link_linear_velocity, submessage_arena);
    }
    set_has_set_link_linear_velocity();
    payload_.set_link_linear_velocity_ = set_link_linear_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.set_link_linear_velocity)
}
void Packet::set_allocated_set_link_angular_velocity(::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity* set_link_angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_link_angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_link_angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_link_angular_velocity, submessage_arena);
    }
    set_has_set_link_angular_velocity();
    payload_.set_link_angular_velocity_ = set_link_angular_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.set_link_angular_velocity)
}
void Packet::set_allocated_get_link_state(::mw::internal::robotics::gazebotransport::GetLinkState* get_link_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_link_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_link_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_link_state, submessage_arena);
    }
    set_has_get_link_state();
    payload_.get_link_state_ = get_link_state;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.get_link_state)
}
void Packet::set_allocated_link_state(::mw::internal::robotics::gazebotransport::LinkState* link_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (link_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      link_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_state, submessage_arena);
    }
    set_has_link_state();
    payload_.link_state_ = link_state;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.Packet.link_state)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kHeaderFieldNumber;
const int Packet::kStatusFieldNumber;
const int Packet::kStepSimulationFieldNumber;
const int Packet::kResetSimulationFieldNumber;
const int Packet::kImageFieldNumber;
const int Packet::kRequestImageFieldNumber;
const int Packet::kRequestCosimFieldNumber;
const int Packet::kStopCosimFieldNumber;
const int Packet::kGetGroundTruthWorldPoseFieldNumber;
const int Packet::kPoseFieldNumber;
const int Packet::kStopSimulationFieldNumber;
const int Packet::kLaserDataFieldNumber;
const int Packet::kRequestLaserFieldNumber;
const int Packet::kImuDataFieldNumber;
const int Packet::kRequestImuFieldNumber;
const int Packet::kSubscribeImageFieldNumber;
const int Packet::kSubscribeLaserFieldNumber;
const int Packet::kSubscribeImuFieldNumber;
const int Packet::kApplyJointTorqueFieldNumber;
const int Packet::kGetPoseFieldNumber;
const int Packet::kGetTopicListFieldNumber;
const int Packet::kTopicListFieldNumber;
const int Packet::kGetModelInfoFieldNumber;
const int Packet::kModelInfoFieldNumber;
const int Packet::kApplyLinkWrenchFieldNumber;
const int Packet::kMaxStepSizeFieldNumber;
const int Packet::kCustomMessageSupportFieldNumber;
const int Packet::kInitCustomPublisherFieldNumber;
const int Packet::kInitCustomSubscriberFieldNumber;
const int Packet::kRequestCustomMessageSupportFieldNumber;
const int Packet::kSetJointPositionFieldNumber;
const int Packet::kSetJointVelocityFieldNumber;
const int Packet::kGetJointStateFieldNumber;
const int Packet::kJointStateFieldNumber;
const int Packet::kSetLinkWorldPoseFieldNumber;
const int Packet::kSetLinkLinearVelocityFieldNumber;
const int Packet::kSetLinkAngularVelocityFieldNumber;
const int Packet::kGetLinkStateFieldNumber;
const int Packet::kLinkStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mw::internal::robotics::gazebotransport::PacketHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kStatus: {
      set_status(from.status());
      break;
    }
    case kStepSimulation: {
      mutable_step_simulation()->::mw::internal::robotics::gazebotransport::StepSimulation::MergeFrom(from.step_simulation());
      break;
    }
    case kResetSimulation: {
      mutable_reset_simulation()->::mw::internal::robotics::gazebotransport::ResetSimulation::MergeFrom(from.reset_simulation());
      break;
    }
    case kImage: {
      mutable_image()->::mw::internal::robotics::gazebotransport::Image::MergeFrom(from.image());
      break;
    }
    case kRequestImage: {
      mutable_request_image()->::mw::internal::robotics::gazebotransport::RequestImage::MergeFrom(from.request_image());
      break;
    }
    case kRequestCosim: {
      mutable_request_cosim()->::mw::internal::robotics::gazebotransport::RequestCoSim::MergeFrom(from.request_cosim());
      break;
    }
    case kStopCosim: {
      mutable_stop_cosim()->::mw::internal::robotics::gazebotransport::StopCoSim::MergeFrom(from.stop_cosim());
      break;
    }
    case kGetGroundTruthWorldPose: {
      mutable_get_ground_truth_world_pose()->::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose::MergeFrom(from.get_ground_truth_world_pose());
      break;
    }
    case kPose: {
      mutable_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.pose());
      break;
    }
    case kStopSimulation: {
      mutable_stop_simulation()->::mw::internal::robotics::gazebotransport::StopSimulation::MergeFrom(from.stop_simulation());
      break;
    }
    case kLaserData: {
      mutable_laser_data()->::mw::internal::robotics::gazebotransport::LaserData::MergeFrom(from.laser_data());
      break;
    }
    case kRequestLaser: {
      mutable_request_laser()->::mw::internal::robotics::gazebotransport::RequestLaser::MergeFrom(from.request_laser());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::mw::internal::robotics::gazebotransport::ImuData::MergeFrom(from.imu_data());
      break;
    }
    case kRequestImu: {
      mutable_request_imu()->::mw::internal::robotics::gazebotransport::RequestImu::MergeFrom(from.request_imu());
      break;
    }
    case kSubscribeImage: {
      mutable_subscribe_image()->::mw::internal::robotics::gazebotransport::SubscribeImage::MergeFrom(from.subscribe_image());
      break;
    }
    case kSubscribeLaser: {
      mutable_subscribe_laser()->::mw::internal::robotics::gazebotransport::SubscribeLaser::MergeFrom(from.subscribe_laser());
      break;
    }
    case kSubscribeImu: {
      mutable_subscribe_imu()->::mw::internal::robotics::gazebotransport::SubscribeImu::MergeFrom(from.subscribe_imu());
      break;
    }
    case kApplyJointTorque: {
      mutable_apply_joint_torque()->::mw::internal::robotics::gazebotransport::ApplyJointTorque::MergeFrom(from.apply_joint_torque());
      break;
    }
    case kGetPose: {
      mutable_get_pose()->::mw::internal::robotics::gazebotransport::GetPose::MergeFrom(from.get_pose());
      break;
    }
    case kGetTopicList: {
      mutable_get_topic_list()->::mw::internal::robotics::gazebotransport::GetTopicList::MergeFrom(from.get_topic_list());
      break;
    }
    case kTopicList: {
      mutable_topic_list()->::mw::internal::robotics::gazebotransport::TopicList::MergeFrom(from.topic_list());
      break;
    }
    case kGetModelInfo: {
      mutable_get_model_info()->::mw::internal::robotics::gazebotransport::GetModelInfo::MergeFrom(from.get_model_info());
      break;
    }
    case kModelInfo: {
      mutable_model_info()->::mw::internal::robotics::gazebotransport::ModelInfo::MergeFrom(from.model_info());
      break;
    }
    case kApplyLinkWrench: {
      mutable_apply_link_wrench()->::mw::internal::robotics::gazebotransport::ApplyLinkWrench::MergeFrom(from.apply_link_wrench());
      break;
    }
    case kMaxStepSize: {
      mutable_max_step_size()->::mw::internal::robotics::gazebotransport::MaxStepSize::MergeFrom(from.max_step_size());
      break;
    }
    case kCustomMessageSupport: {
      mutable_custom_message_support()->::mw::internal::robotics::gazebotransport::CustomMessageSupport::MergeFrom(from.custom_message_support());
      break;
    }
    case kInitCustomPublisher: {
      mutable_init_custom_publisher()->::mw::internal::robotics::gazebotransport::InitCustomPublisher::MergeFrom(from.init_custom_publisher());
      break;
    }
    case kInitCustomSubscriber: {
      mutable_init_custom_subscriber()->::mw::internal::robotics::gazebotransport::InitCustomSubscriber::MergeFrom(from.init_custom_subscriber());
      break;
    }
    case kRequestCustomMessageSupport: {
      mutable_request_custom_message_support()->::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport::MergeFrom(from.request_custom_message_support());
      break;
    }
    case kSetJointPosition: {
      mutable_set_joint_position()->::mw::internal::robotics::gazebotransport::SetJointPosition::MergeFrom(from.set_joint_position());
      break;
    }
    case kSetJointVelocity: {
      mutable_set_joint_velocity()->::mw::internal::robotics::gazebotransport::SetJointVelocity::MergeFrom(from.set_joint_velocity());
      break;
    }
    case kGetJointState: {
      mutable_get_joint_state()->::mw::internal::robotics::gazebotransport::GetJointState::MergeFrom(from.get_joint_state());
      break;
    }
    case kJointState: {
      mutable_joint_state()->::mw::internal::robotics::gazebotransport::JointState::MergeFrom(from.joint_state());
      break;
    }
    case kSetLinkWorldPose: {
      mutable_set_link_world_pose()->::mw::internal::robotics::gazebotransport::SetLinkWorldPose::MergeFrom(from.set_link_world_pose());
      break;
    }
    case kSetLinkLinearVelocity: {
      mutable_set_link_linear_velocity()->::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity::MergeFrom(from.set_link_linear_velocity());
      break;
    }
    case kSetLinkAngularVelocity: {
      mutable_set_link_angular_velocity()->::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity::MergeFrom(from.set_link_angular_velocity());
      break;
    }
    case kGetLinkState: {
      mutable_get_link_state()->::mw::internal::robotics::gazebotransport::GetLinkState::MergeFrom(from.get_link_state());
      break;
    }
    case kLinkState: {
      mutable_link_state()->::mw::internal::robotics::gazebotransport::LinkState::MergeFrom(from.link_state());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Packet)
}

void Packet::SharedCtor() {
  header_ = NULL;
  clear_has_payload();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Packet.base);
  return *internal_default_instance();
}


void Packet::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mw.internal.robotics.gazebotransport.Packet)
  switch (payload_case()) {
    case kStatus: {
      // No need to clear
      break;
    }
    case kStepSimulation: {
      delete payload_.step_simulation_;
      break;
    }
    case kResetSimulation: {
      delete payload_.reset_simulation_;
      break;
    }
    case kImage: {
      delete payload_.image_;
      break;
    }
    case kRequestImage: {
      delete payload_.request_image_;
      break;
    }
    case kRequestCosim: {
      delete payload_.request_cosim_;
      break;
    }
    case kStopCosim: {
      delete payload_.stop_cosim_;
      break;
    }
    case kGetGroundTruthWorldPose: {
      delete payload_.get_ground_truth_world_pose_;
      break;
    }
    case kPose: {
      delete payload_.pose_;
      break;
    }
    case kStopSimulation: {
      delete payload_.stop_simulation_;
      break;
    }
    case kLaserData: {
      delete payload_.laser_data_;
      break;
    }
    case kRequestLaser: {
      delete payload_.request_laser_;
      break;
    }
    case kImuData: {
      delete payload_.imu_data_;
      break;
    }
    case kRequestImu: {
      delete payload_.request_imu_;
      break;
    }
    case kSubscribeImage: {
      delete payload_.subscribe_image_;
      break;
    }
    case kSubscribeLaser: {
      delete payload_.subscribe_laser_;
      break;
    }
    case kSubscribeImu: {
      delete payload_.subscribe_imu_;
      break;
    }
    case kApplyJointTorque: {
      delete payload_.apply_joint_torque_;
      break;
    }
    case kGetPose: {
      delete payload_.get_pose_;
      break;
    }
    case kGetTopicList: {
      delete payload_.get_topic_list_;
      break;
    }
    case kTopicList: {
      delete payload_.topic_list_;
      break;
    }
    case kGetModelInfo: {
      delete payload_.get_model_info_;
      break;
    }
    case kModelInfo: {
      delete payload_.model_info_;
      break;
    }
    case kApplyLinkWrench: {
      delete payload_.apply_link_wrench_;
      break;
    }
    case kMaxStepSize: {
      delete payload_.max_step_size_;
      break;
    }
    case kCustomMessageSupport: {
      delete payload_.custom_message_support_;
      break;
    }
    case kInitCustomPublisher: {
      delete payload_.init_custom_publisher_;
      break;
    }
    case kInitCustomSubscriber: {
      delete payload_.init_custom_subscriber_;
      break;
    }
    case kRequestCustomMessageSupport: {
      delete payload_.request_custom_message_support_;
      break;
    }
    case kSetJointPosition: {
      delete payload_.set_joint_position_;
      break;
    }
    case kSetJointVelocity: {
      delete payload_.set_joint_velocity_;
      break;
    }
    case kGetJointState: {
      delete payload_.get_joint_state_;
      break;
    }
    case kJointState: {
      delete payload_.joint_state_;
      break;
    }
    case kSetLinkWorldPose: {
      delete payload_.set_link_world_pose_;
      break;
    }
    case kSetLinkLinearVelocity: {
      delete payload_.set_link_linear_velocity_;
      break;
    }
    case kSetLinkAngularVelocity: {
      delete payload_.set_link_angular_velocity_;
      break;
    }
    case kGetLinkState: {
      delete payload_.get_link_state_;
      break;
    }
    case kLinkState: {
      delete payload_.link_state_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.PacketHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Packet.CoSimError status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::Packet_CoSimError_IsValid(value)) {
            set_status(static_cast< ::mw::internal::robotics::gazebotransport::Packet_CoSimError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.StepSimulation step_simulation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_step_simulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ResetSimulation reset_simulation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reset_simulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Image image = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.RequestImage request_image = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.RequestCoSim request_cosim = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_cosim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.StopCoSim stop_cosim = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_cosim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose get_ground_truth_world_pose = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_ground_truth_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose pose = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.StopSimulation stop_simulation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_simulation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.LaserData laser_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_laser_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.RequestLaser request_laser = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_laser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ImuData imu_data = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.RequestImu request_imu = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SubscribeImage subscribe_image = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribe_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SubscribeLaser subscribe_laser = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribe_laser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SubscribeImu subscribe_imu = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscribe_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ApplyJointTorque apply_joint_torque = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_joint_torque()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetPose get_pose = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetTopicList get_topic_list = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_topic_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TopicList topic_list = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetModelInfo get_model_info = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_model_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ModelInfo model_info = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_model_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ApplyLinkWrench apply_link_wrench = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_link_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.MaxStepSize max_step_size = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_step_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.CustomMessageSupport custom_message_support = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_message_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.InitCustomPublisher init_custom_publisher = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_custom_publisher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.InitCustomSubscriber init_custom_subscriber = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_custom_subscriber()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.RequestCustomMessageSupport request_custom_message_support = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_custom_message_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SetJointPosition set_joint_position = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_joint_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SetJointVelocity set_joint_velocity = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_joint_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetJointState get_joint_state = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_joint_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.JointState joint_state = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joint_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SetLinkWorldPose set_link_world_pose = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_link_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SetLinkLinearVelocity set_link_linear_velocity = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_link_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.SetLinkAngularVelocity set_link_angular_velocity = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_link_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.GetLinkState get_link_state = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_link_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.LinkState link_state = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.PacketHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  switch (payload_case()) {
    case kStatus:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->status(), output);
      break;
    case kStepSimulation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_step_simulation(), output);
      break;
    case kResetSimulation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_reset_simulation(), output);
      break;
    case kImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_image(), output);
      break;
    case kRequestImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_request_image(), output);
      break;
    case kRequestCosim:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_request_cosim(), output);
      break;
    case kStopCosim:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_stop_cosim(), output);
      break;
    case kGetGroundTruthWorldPose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_get_ground_truth_world_pose(), output);
      break;
    case kPose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_pose(), output);
      break;
    case kStopSimulation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_stop_simulation(), output);
      break;
    case kLaserData:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_laser_data(), output);
      break;
    case kRequestLaser:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_request_laser(), output);
      break;
    case kImuData:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_imu_data(), output);
      break;
    case kRequestImu:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_request_imu(), output);
      break;
    case kSubscribeImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, this->_internal_subscribe_image(), output);
      break;
    case kSubscribeLaser:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_subscribe_laser(), output);
      break;
    case kSubscribeImu:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_subscribe_imu(), output);
      break;
    case kApplyJointTorque:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_apply_joint_torque(), output);
      break;
    case kGetPose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_get_pose(), output);
      break;
    case kGetTopicList:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, this->_internal_get_topic_list(), output);
      break;
    case kTopicList:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, this->_internal_topic_list(), output);
      break;
    case kGetModelInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, this->_internal_get_model_info(), output);
      break;
    case kModelInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, this->_internal_model_info(), output);
      break;
    case kApplyLinkWrench:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, this->_internal_apply_link_wrench(), output);
      break;
    case kMaxStepSize:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, this->_internal_max_step_size(), output);
      break;
    case kCustomMessageSupport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, this->_internal_custom_message_support(), output);
      break;
    case kInitCustomPublisher:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, this->_internal_init_custom_publisher(), output);
      break;
    case kInitCustomSubscriber:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, this->_internal_init_custom_subscriber(), output);
      break;
    case kRequestCustomMessageSupport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, this->_internal_request_custom_message_support(), output);
      break;
    case kSetJointPosition:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, this->_internal_set_joint_position(), output);
      break;
    case kSetJointVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, this->_internal_set_joint_velocity(), output);
      break;
    case kGetJointState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, this->_internal_get_joint_state(), output);
      break;
    case kJointState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, this->_internal_joint_state(), output);
      break;
    case kSetLinkWorldPose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, this->_internal_set_link_world_pose(), output);
      break;
    case kSetLinkLinearVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        36, this->_internal_set_link_linear_velocity(), output);
      break;
    case kSetLinkAngularVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        37, this->_internal_set_link_angular_velocity(), output);
      break;
    case kGetLinkState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        38, this->_internal_get_link_state(), output);
      break;
    case kLinkState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        39, this->_internal_link_state(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.PacketHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  switch (payload_case()) {
    case kStatus:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->status(), target);
      break;
    case kStepSimulation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_step_simulation(), deterministic, target);
      break;
    case kResetSimulation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_reset_simulation(), deterministic, target);
      break;
    case kImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_image(), deterministic, target);
      break;
    case kRequestImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_request_image(), deterministic, target);
      break;
    case kRequestCosim:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_request_cosim(), deterministic, target);
      break;
    case kStopCosim:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_stop_cosim(), deterministic, target);
      break;
    case kGetGroundTruthWorldPose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_get_ground_truth_world_pose(), deterministic, target);
      break;
    case kPose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_pose(), deterministic, target);
      break;
    case kStopSimulation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_stop_simulation(), deterministic, target);
      break;
    case kLaserData:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_laser_data(), deterministic, target);
      break;
    case kRequestLaser:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_request_laser(), deterministic, target);
      break;
    case kImuData:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_imu_data(), deterministic, target);
      break;
    case kRequestImu:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_request_imu(), deterministic, target);
      break;
    case kSubscribeImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, this->_internal_subscribe_image(), deterministic, target);
      break;
    case kSubscribeLaser:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_subscribe_laser(), deterministic, target);
      break;
    case kSubscribeImu:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_subscribe_imu(), deterministic, target);
      break;
    case kApplyJointTorque:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_apply_joint_torque(), deterministic, target);
      break;
    case kGetPose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_get_pose(), deterministic, target);
      break;
    case kGetTopicList:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, this->_internal_get_topic_list(), deterministic, target);
      break;
    case kTopicList:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          22, this->_internal_topic_list(), deterministic, target);
      break;
    case kGetModelInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          23, this->_internal_get_model_info(), deterministic, target);
      break;
    case kModelInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          24, this->_internal_model_info(), deterministic, target);
      break;
    case kApplyLinkWrench:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          25, this->_internal_apply_link_wrench(), deterministic, target);
      break;
    case kMaxStepSize:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          26, this->_internal_max_step_size(), deterministic, target);
      break;
    case kCustomMessageSupport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          27, this->_internal_custom_message_support(), deterministic, target);
      break;
    case kInitCustomPublisher:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          28, this->_internal_init_custom_publisher(), deterministic, target);
      break;
    case kInitCustomSubscriber:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          29, this->_internal_init_custom_subscriber(), deterministic, target);
      break;
    case kRequestCustomMessageSupport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          30, this->_internal_request_custom_message_support(), deterministic, target);
      break;
    case kSetJointPosition:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          31, this->_internal_set_joint_position(), deterministic, target);
      break;
    case kSetJointVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          32, this->_internal_set_joint_velocity(), deterministic, target);
      break;
    case kGetJointState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          33, this->_internal_get_joint_state(), deterministic, target);
      break;
    case kJointState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          34, this->_internal_joint_state(), deterministic, target);
      break;
    case kSetLinkWorldPose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          35, this->_internal_set_link_world_pose(), deterministic, target);
      break;
    case kSetLinkLinearVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          36, this->_internal_set_link_linear_velocity(), deterministic, target);
      break;
    case kSetLinkAngularVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          37, this->_internal_set_link_angular_velocity(), deterministic, target);
      break;
    case kGetLinkState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          38, this->_internal_get_link_state(), deterministic, target);
      break;
    case kLinkState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          39, this->_internal_link_state(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mw.internal.robotics.gazebotransport.PacketHeader header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }
  switch (payload_case()) {
    // optional .mw.internal.robotics.gazebotransport.Packet.CoSimError status = 2;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.StepSimulation step_simulation = 3;
    case kStepSimulation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.step_simulation_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.ResetSimulation reset_simulation = 4;
    case kResetSimulation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.reset_simulation_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.Image image = 5;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.image_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.RequestImage request_image = 6;
    case kRequestImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_image_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.RequestCoSim request_cosim = 7;
    case kRequestCosim: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_cosim_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.StopCoSim stop_cosim = 8;
    case kStopCosim: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.stop_cosim_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose get_ground_truth_world_pose = 9;
    case kGetGroundTruthWorldPose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_ground_truth_world_pose_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.Pose pose = 10;
    case kPose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pose_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.StopSimulation stop_simulation = 11;
    case kStopSimulation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.stop_simulation_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.LaserData laser_data = 12;
    case kLaserData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.laser_data_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.RequestLaser request_laser = 13;
    case kRequestLaser: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_laser_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.ImuData imu_data = 14;
    case kImuData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.imu_data_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.RequestImu request_imu = 15;
    case kRequestImu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_imu_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SubscribeImage subscribe_image = 16;
    case kSubscribeImage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.subscribe_image_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SubscribeLaser subscribe_laser = 17;
    case kSubscribeLaser: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.subscribe_laser_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SubscribeImu subscribe_imu = 18;
    case kSubscribeImu: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.subscribe_imu_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.ApplyJointTorque apply_joint_torque = 19;
    case kApplyJointTorque: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.apply_joint_torque_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetPose get_pose = 20;
    case kGetPose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_pose_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetTopicList get_topic_list = 21;
    case kGetTopicList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_topic_list_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.TopicList topic_list = 22;
    case kTopicList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.topic_list_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetModelInfo get_model_info = 23;
    case kGetModelInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_model_info_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.ModelInfo model_info = 24;
    case kModelInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.model_info_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.ApplyLinkWrench apply_link_wrench = 25;
    case kApplyLinkWrench: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.apply_link_wrench_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.MaxStepSize max_step_size = 26;
    case kMaxStepSize: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.max_step_size_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.CustomMessageSupport custom_message_support = 27;
    case kCustomMessageSupport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.custom_message_support_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.InitCustomPublisher init_custom_publisher = 28;
    case kInitCustomPublisher: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.init_custom_publisher_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.InitCustomSubscriber init_custom_subscriber = 29;
    case kInitCustomSubscriber: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.init_custom_subscriber_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.RequestCustomMessageSupport request_custom_message_support = 30;
    case kRequestCustomMessageSupport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_custom_message_support_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SetJointPosition set_joint_position = 31;
    case kSetJointPosition: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_joint_position_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SetJointVelocity set_joint_velocity = 32;
    case kSetJointVelocity: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_joint_velocity_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetJointState get_joint_state = 33;
    case kGetJointState: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_joint_state_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.JointState joint_state = 34;
    case kJointState: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.joint_state_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SetLinkWorldPose set_link_world_pose = 35;
    case kSetLinkWorldPose: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_link_world_pose_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SetLinkLinearVelocity set_link_linear_velocity = 36;
    case kSetLinkLinearVelocity: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_link_linear_velocity_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.SetLinkAngularVelocity set_link_angular_velocity = 37;
    case kSetLinkAngularVelocity: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_link_angular_velocity_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.GetLinkState get_link_state = 38;
    case kGetLinkState: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_link_state_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.LinkState link_state = 39;
    case kLinkState: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.link_state_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mw::internal::robotics::gazebotransport::PacketHeader::MergeFrom(from.header());
  }
  switch (from.payload_case()) {
    case kStatus: {
      set_status(from.status());
      break;
    }
    case kStepSimulation: {
      mutable_step_simulation()->::mw::internal::robotics::gazebotransport::StepSimulation::MergeFrom(from.step_simulation());
      break;
    }
    case kResetSimulation: {
      mutable_reset_simulation()->::mw::internal::robotics::gazebotransport::ResetSimulation::MergeFrom(from.reset_simulation());
      break;
    }
    case kImage: {
      mutable_image()->::mw::internal::robotics::gazebotransport::Image::MergeFrom(from.image());
      break;
    }
    case kRequestImage: {
      mutable_request_image()->::mw::internal::robotics::gazebotransport::RequestImage::MergeFrom(from.request_image());
      break;
    }
    case kRequestCosim: {
      mutable_request_cosim()->::mw::internal::robotics::gazebotransport::RequestCoSim::MergeFrom(from.request_cosim());
      break;
    }
    case kStopCosim: {
      mutable_stop_cosim()->::mw::internal::robotics::gazebotransport::StopCoSim::MergeFrom(from.stop_cosim());
      break;
    }
    case kGetGroundTruthWorldPose: {
      mutable_get_ground_truth_world_pose()->::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose::MergeFrom(from.get_ground_truth_world_pose());
      break;
    }
    case kPose: {
      mutable_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.pose());
      break;
    }
    case kStopSimulation: {
      mutable_stop_simulation()->::mw::internal::robotics::gazebotransport::StopSimulation::MergeFrom(from.stop_simulation());
      break;
    }
    case kLaserData: {
      mutable_laser_data()->::mw::internal::robotics::gazebotransport::LaserData::MergeFrom(from.laser_data());
      break;
    }
    case kRequestLaser: {
      mutable_request_laser()->::mw::internal::robotics::gazebotransport::RequestLaser::MergeFrom(from.request_laser());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::mw::internal::robotics::gazebotransport::ImuData::MergeFrom(from.imu_data());
      break;
    }
    case kRequestImu: {
      mutable_request_imu()->::mw::internal::robotics::gazebotransport::RequestImu::MergeFrom(from.request_imu());
      break;
    }
    case kSubscribeImage: {
      mutable_subscribe_image()->::mw::internal::robotics::gazebotransport::SubscribeImage::MergeFrom(from.subscribe_image());
      break;
    }
    case kSubscribeLaser: {
      mutable_subscribe_laser()->::mw::internal::robotics::gazebotransport::SubscribeLaser::MergeFrom(from.subscribe_laser());
      break;
    }
    case kSubscribeImu: {
      mutable_subscribe_imu()->::mw::internal::robotics::gazebotransport::SubscribeImu::MergeFrom(from.subscribe_imu());
      break;
    }
    case kApplyJointTorque: {
      mutable_apply_joint_torque()->::mw::internal::robotics::gazebotransport::ApplyJointTorque::MergeFrom(from.apply_joint_torque());
      break;
    }
    case kGetPose: {
      mutable_get_pose()->::mw::internal::robotics::gazebotransport::GetPose::MergeFrom(from.get_pose());
      break;
    }
    case kGetTopicList: {
      mutable_get_topic_list()->::mw::internal::robotics::gazebotransport::GetTopicList::MergeFrom(from.get_topic_list());
      break;
    }
    case kTopicList: {
      mutable_topic_list()->::mw::internal::robotics::gazebotransport::TopicList::MergeFrom(from.topic_list());
      break;
    }
    case kGetModelInfo: {
      mutable_get_model_info()->::mw::internal::robotics::gazebotransport::GetModelInfo::MergeFrom(from.get_model_info());
      break;
    }
    case kModelInfo: {
      mutable_model_info()->::mw::internal::robotics::gazebotransport::ModelInfo::MergeFrom(from.model_info());
      break;
    }
    case kApplyLinkWrench: {
      mutable_apply_link_wrench()->::mw::internal::robotics::gazebotransport::ApplyLinkWrench::MergeFrom(from.apply_link_wrench());
      break;
    }
    case kMaxStepSize: {
      mutable_max_step_size()->::mw::internal::robotics::gazebotransport::MaxStepSize::MergeFrom(from.max_step_size());
      break;
    }
    case kCustomMessageSupport: {
      mutable_custom_message_support()->::mw::internal::robotics::gazebotransport::CustomMessageSupport::MergeFrom(from.custom_message_support());
      break;
    }
    case kInitCustomPublisher: {
      mutable_init_custom_publisher()->::mw::internal::robotics::gazebotransport::InitCustomPublisher::MergeFrom(from.init_custom_publisher());
      break;
    }
    case kInitCustomSubscriber: {
      mutable_init_custom_subscriber()->::mw::internal::robotics::gazebotransport::InitCustomSubscriber::MergeFrom(from.init_custom_subscriber());
      break;
    }
    case kRequestCustomMessageSupport: {
      mutable_request_custom_message_support()->::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport::MergeFrom(from.request_custom_message_support());
      break;
    }
    case kSetJointPosition: {
      mutable_set_joint_position()->::mw::internal::robotics::gazebotransport::SetJointPosition::MergeFrom(from.set_joint_position());
      break;
    }
    case kSetJointVelocity: {
      mutable_set_joint_velocity()->::mw::internal::robotics::gazebotransport::SetJointVelocity::MergeFrom(from.set_joint_velocity());
      break;
    }
    case kGetJointState: {
      mutable_get_joint_state()->::mw::internal::robotics::gazebotransport::GetJointState::MergeFrom(from.get_joint_state());
      break;
    }
    case kJointState: {
      mutable_joint_state()->::mw::internal::robotics::gazebotransport::JointState::MergeFrom(from.joint_state());
      break;
    }
    case kSetLinkWorldPose: {
      mutable_set_link_world_pose()->::mw::internal::robotics::gazebotransport::SetLinkWorldPose::MergeFrom(from.set_link_world_pose());
      break;
    }
    case kSetLinkLinearVelocity: {
      mutable_set_link_linear_velocity()->::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity::MergeFrom(from.set_link_linear_velocity());
      break;
    }
    case kSetLinkAngularVelocity: {
      mutable_set_link_angular_velocity()->::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity::MergeFrom(from.set_link_angular_velocity());
      break;
    }
    case kGetLinkState: {
      mutable_get_link_state()->::mw::internal::robotics::gazebotransport::GetLinkState::MergeFrom(from.get_link_state());
      break;
    }
    case kLinkState: {
      mutable_link_state()->::mw::internal::robotics::gazebotransport::LinkState::MergeFrom(from.link_state());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  switch (payload_case()) {
    case kStatus: {
      break;
    }
    case kStepSimulation: {
      if (has_step_simulation()) {
        if (!this->step_simulation().IsInitialized()) return false;
      }
      break;
    }
    case kResetSimulation: {
      if (has_reset_simulation()) {
        if (!this->reset_simulation().IsInitialized()) return false;
      }
      break;
    }
    case kImage: {
      if (has_image()) {
        if (!this->image().IsInitialized()) return false;
      }
      break;
    }
    case kRequestImage: {
      if (has_request_image()) {
        if (!this->request_image().IsInitialized()) return false;
      }
      break;
    }
    case kRequestCosim: {
      if (has_request_cosim()) {
        if (!this->request_cosim().IsInitialized()) return false;
      }
      break;
    }
    case kStopCosim: {
      if (has_stop_cosim()) {
        if (!this->stop_cosim().IsInitialized()) return false;
      }
      break;
    }
    case kGetGroundTruthWorldPose: {
      if (has_get_ground_truth_world_pose()) {
        if (!this->get_ground_truth_world_pose().IsInitialized()) return false;
      }
      break;
    }
    case kPose: {
      if (has_pose()) {
        if (!this->pose().IsInitialized()) return false;
      }
      break;
    }
    case kStopSimulation: {
      if (has_stop_simulation()) {
        if (!this->stop_simulation().IsInitialized()) return false;
      }
      break;
    }
    case kLaserData: {
      if (has_laser_data()) {
        if (!this->laser_data().IsInitialized()) return false;
      }
      break;
    }
    case kRequestLaser: {
      if (has_request_laser()) {
        if (!this->request_laser().IsInitialized()) return false;
      }
      break;
    }
    case kImuData: {
      if (has_imu_data()) {
        if (!this->imu_data().IsInitialized()) return false;
      }
      break;
    }
    case kRequestImu: {
      if (has_request_imu()) {
        if (!this->request_imu().IsInitialized()) return false;
      }
      break;
    }
    case kSubscribeImage: {
      if (has_subscribe_image()) {
        if (!this->subscribe_image().IsInitialized()) return false;
      }
      break;
    }
    case kSubscribeLaser: {
      if (has_subscribe_laser()) {
        if (!this->subscribe_laser().IsInitialized()) return false;
      }
      break;
    }
    case kSubscribeImu: {
      if (has_subscribe_imu()) {
        if (!this->subscribe_imu().IsInitialized()) return false;
      }
      break;
    }
    case kApplyJointTorque: {
      if (has_apply_joint_torque()) {
        if (!this->apply_joint_torque().IsInitialized()) return false;
      }
      break;
    }
    case kGetPose: {
      if (has_get_pose()) {
        if (!this->get_pose().IsInitialized()) return false;
      }
      break;
    }
    case kGetTopicList: {
      if (has_get_topic_list()) {
        if (!this->get_topic_list().IsInitialized()) return false;
      }
      break;
    }
    case kTopicList: {
      if (has_topic_list()) {
        if (!this->topic_list().IsInitialized()) return false;
      }
      break;
    }
    case kGetModelInfo: {
      if (has_get_model_info()) {
        if (!this->get_model_info().IsInitialized()) return false;
      }
      break;
    }
    case kModelInfo: {
      if (has_model_info()) {
        if (!this->model_info().IsInitialized()) return false;
      }
      break;
    }
    case kApplyLinkWrench: {
      if (has_apply_link_wrench()) {
        if (!this->apply_link_wrench().IsInitialized()) return false;
      }
      break;
    }
    case kMaxStepSize: {
      if (has_max_step_size()) {
        if (!this->max_step_size().IsInitialized()) return false;
      }
      break;
    }
    case kCustomMessageSupport: {
      if (has_custom_message_support()) {
        if (!this->custom_message_support().IsInitialized()) return false;
      }
      break;
    }
    case kInitCustomPublisher: {
      if (has_init_custom_publisher()) {
        if (!this->init_custom_publisher().IsInitialized()) return false;
      }
      break;
    }
    case kInitCustomSubscriber: {
      if (has_init_custom_subscriber()) {
        if (!this->init_custom_subscriber().IsInitialized()) return false;
      }
      break;
    }
    case kRequestCustomMessageSupport: {
      if (has_request_custom_message_support()) {
        if (!this->request_custom_message_support().IsInitialized()) return false;
      }
      break;
    }
    case kSetJointPosition: {
      if (has_set_joint_position()) {
        if (!this->set_joint_position().IsInitialized()) return false;
      }
      break;
    }
    case kSetJointVelocity: {
      if (has_set_joint_velocity()) {
        if (!this->set_joint_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kGetJointState: {
      if (has_get_joint_state()) {
        if (!this->get_joint_state().IsInitialized()) return false;
      }
      break;
    }
    case kJointState: {
      if (has_joint_state()) {
        if (!this->joint_state().IsInitialized()) return false;
      }
      break;
    }
    case kSetLinkWorldPose: {
      if (has_set_link_world_pose()) {
        if (!this->set_link_world_pose().IsInitialized()) return false;
      }
      break;
    }
    case kSetLinkLinearVelocity: {
      if (has_set_link_linear_velocity()) {
        if (!this->set_link_linear_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kSetLinkAngularVelocity: {
      if (has_set_link_angular_velocity()) {
        if (!this->set_link_angular_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kGetLinkState: {
      if (has_get_link_state()) {
        if (!this->get_link_state().IsInitialized()) return false;
      }
      break;
    }
    case kLinkState: {
      if (has_link_state()) {
        if (!this->link_state().IsInitialized()) return false;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StepSimulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepSimulation::kNumStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepSimulation::StepSimulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StepSimulation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.StepSimulation)
}
StepSimulation::StepSimulation(const StepSimulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_steps_ = from.num_steps_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.StepSimulation)
}

void StepSimulation::SharedCtor() {
  num_steps_ = 0u;
}

StepSimulation::~StepSimulation() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.StepSimulation)
  SharedDtor();
}

void StepSimulation::SharedDtor() {
}

void StepSimulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StepSimulation::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepSimulation& StepSimulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StepSimulation.base);
  return *internal_default_instance();
}


void StepSimulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.StepSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_steps_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepSimulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.StepSimulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_steps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.StepSimulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.StepSimulation)
  return false;
#undef DO_
}

void StepSimulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.StepSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num_steps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_steps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.StepSimulation)
}

::google::protobuf::uint8* StepSimulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.StepSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num_steps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_steps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.StepSimulation)
  return target;
}

size_t StepSimulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.StepSimulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 num_steps = 1;
  if (has_num_steps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_steps());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepSimulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.StepSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  const StepSimulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepSimulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.StepSimulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.StepSimulation)
    MergeFrom(*source);
  }
}

void StepSimulation::MergeFrom(const StepSimulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.StepSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_steps()) {
    set_num_steps(from.num_steps());
  }
}

void StepSimulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.StepSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSimulation::CopyFrom(const StepSimulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.StepSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSimulation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StepSimulation::Swap(StepSimulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepSimulation::InternalSwap(StepSimulation* other) {
  using std::swap;
  swap(num_steps_, other->num_steps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StepSimulation::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetSimulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetSimulation::kBehaviorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetSimulation::ResetSimulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ResetSimulation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ResetSimulation)
}
ResetSimulation::ResetSimulation(const ResetSimulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  behavior_ = from.behavior_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ResetSimulation)
}

void ResetSimulation::SharedCtor() {
  behavior_ = 0;
}

ResetSimulation::~ResetSimulation() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ResetSimulation)
  SharedDtor();
}

void ResetSimulation::SharedDtor() {
}

void ResetSimulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResetSimulation::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetSimulation& ResetSimulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ResetSimulation.base);
  return *internal_default_instance();
}


void ResetSimulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behavior_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetSimulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.ResetSimulation.ResetBehavior behavior = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::ResetSimulation_ResetBehavior_IsValid(value)) {
            set_behavior(static_cast< ::mw::internal::robotics::gazebotransport::ResetSimulation_ResetBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ResetSimulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ResetSimulation)
  return false;
#undef DO_
}

void ResetSimulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.ResetSimulation.ResetBehavior behavior = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->behavior(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ResetSimulation)
}

::google::protobuf::uint8* ResetSimulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.ResetSimulation.ResetBehavior behavior = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->behavior(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ResetSimulation)
  return target;
}

size_t ResetSimulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mw.internal.robotics.gazebotransport.ResetSimulation.ResetBehavior behavior = 1;
  if (has_behavior()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetSimulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetSimulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetSimulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ResetSimulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ResetSimulation)
    MergeFrom(*source);
  }
}

void ResetSimulation::MergeFrom(const ResetSimulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_behavior()) {
    set_behavior(from.behavior());
  }
}

void ResetSimulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetSimulation::CopyFrom(const ResetSimulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ResetSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetSimulation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResetSimulation::Swap(ResetSimulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetSimulation::InternalSwap(ResetSimulation* other) {
  using std::swap;
  swap(behavior_, other->behavior_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResetSimulation::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Image::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kDataFieldNumber;
const int Image::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Image.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_type()) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Image)
}

void Image::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Image.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Image)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.Image.data_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required string data_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.Image.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required string data_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.Image.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Image)
  return target;
}

size_t Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Image)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_data_type()) {
    // required string data_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required string data_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());

    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_type();
      data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_type_.Swap(&other->data_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestImage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestImage::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestImage::RequestImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.RequestImage)
}
RequestImage::RequestImage(const RequestImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.RequestImage)
}

void RequestImage::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestImage::~RequestImage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.RequestImage)
  SharedDtor();
}

void RequestImage::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestImage::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestImage& RequestImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImage.base);
  return *internal_default_instance();
}


void RequestImage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.RequestImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.RequestImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestImage.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.RequestImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.RequestImage)
  return false;
#undef DO_
}

void RequestImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.RequestImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestImage.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.RequestImage)
}

::google::protobuf::uint8* RequestImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.RequestImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestImage.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.RequestImage)
  return target;
}

size_t RequestImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.RequestImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.RequestImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.RequestImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.RequestImage)
    MergeFrom(*source);
  }
}

void RequestImage::MergeFrom(const RequestImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.RequestImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void RequestImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.RequestImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestImage::CopyFrom(const RequestImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.RequestImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RequestImage::Swap(RequestImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestImage::InternalSwap(RequestImage* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestImage::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestCoSim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCoSim::kClientIdFieldNumber;
const int RequestCoSim::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCoSim::RequestCoSim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCoSim.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.RequestCoSim)
}
RequestCoSim::RequestCoSim(const RequestCoSim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.RequestCoSim)
}

void RequestCoSim::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
}

RequestCoSim::~RequestCoSim() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.RequestCoSim)
  SharedDtor();
}

void RequestCoSim::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestCoSim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestCoSim::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestCoSim& RequestCoSim::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCoSim.base);
  return *internal_default_instance();
}


void RequestCoSim::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_id_.ClearNonDefaultToEmptyNoArena();
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestCoSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestCoSim.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.RequestCoSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.RequestCoSim)
  return false;
#undef DO_
}

void RequestCoSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCoSim.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // required double duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.RequestCoSim)
}

::google::protobuf::uint8* RequestCoSim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCoSim.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // required double duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.RequestCoSim)
  return target;
}

size_t RequestCoSim::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  size_t total_size = 0;

  if (has_client_id()) {
    // required string client_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_duration()) {
    // required double duration = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t RequestCoSim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string client_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required double duration = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCoSim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCoSim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCoSim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.RequestCoSim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.RequestCoSim)
    MergeFrom(*source);
  }
}

void RequestCoSim::MergeFrom(const RequestCoSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestCoSim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCoSim::CopyFrom(const RequestCoSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.RequestCoSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCoSim::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RequestCoSim::Swap(RequestCoSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCoSim::InternalSwap(RequestCoSim* other) {
  using std::swap;
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestCoSim::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopCoSim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopCoSim::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopCoSim::StopCoSim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopCoSim.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.StopCoSim)
}
StopCoSim::StopCoSim(const StopCoSim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.StopCoSim)
}

void StopCoSim::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopCoSim::~StopCoSim() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.StopCoSim)
  SharedDtor();
}

void StopCoSim::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopCoSim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopCoSim::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopCoSim& StopCoSim::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopCoSim.base);
  return *internal_default_instance();
}


void StopCoSim::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.StopCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopCoSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.StopCoSim)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.StopCoSim.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.StopCoSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.StopCoSim)
  return false;
#undef DO_
}

void StopCoSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.StopCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.StopCoSim.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.StopCoSim)
}

::google::protobuf::uint8* StopCoSim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.StopCoSim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.StopCoSim.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.StopCoSim)
  return target;
}

size_t StopCoSim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.StopCoSim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string client_id = 1;
  if (has_client_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopCoSim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.StopCoSim)
  GOOGLE_DCHECK_NE(&from, this);
  const StopCoSim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopCoSim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.StopCoSim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.StopCoSim)
    MergeFrom(*source);
  }
}

void StopCoSim::MergeFrom(const StopCoSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.StopCoSim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_id()) {
    set_has_client_id();
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
}

void StopCoSim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.StopCoSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopCoSim::CopyFrom(const StopCoSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.StopCoSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopCoSim::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StopCoSim::Swap(StopCoSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopCoSim::InternalSwap(StopCoSim* other) {
  using std::swap;
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopCoSim::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetGroundTruthWorldPose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGroundTruthWorldPose::kModelNameFieldNumber;
const int GetGroundTruthWorldPose::kLinkNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGroundTruthWorldPose::GetGroundTruthWorldPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetGroundTruthWorldPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
}
GetGroundTruthWorldPose::GetGroundTruthWorldPose(const GetGroundTruthWorldPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
}

void GetGroundTruthWorldPose::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetGroundTruthWorldPose::~GetGroundTruthWorldPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  SharedDtor();
}

void GetGroundTruthWorldPose::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetGroundTruthWorldPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetGroundTruthWorldPose::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetGroundTruthWorldPose& GetGroundTruthWorldPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetGroundTruthWorldPose.base);
  return *internal_default_instance();
}


void GetGroundTruthWorldPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetGroundTruthWorldPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  return false;
#undef DO_
}

void GetGroundTruthWorldPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
}

::google::protobuf::uint8* GetGroundTruthWorldPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  return target;
}

size_t GetGroundTruthWorldPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  return total_size;
}
size_t GetGroundTruthWorldPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGroundTruthWorldPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGroundTruthWorldPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGroundTruthWorldPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
    MergeFrom(*source);
  }
}

void GetGroundTruthWorldPose::MergeFrom(const GetGroundTruthWorldPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
  }
}

void GetGroundTruthWorldPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroundTruthWorldPose::CopyFrom(const GetGroundTruthWorldPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetGroundTruthWorldPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroundTruthWorldPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetGroundTruthWorldPose::Swap(GetGroundTruthWorldPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGroundTruthWorldPose::InternalSwap(GetGroundTruthWorldPose* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetGroundTruthWorldPose::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Quaternion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternion& Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Quaternion.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Quaternion)
  return target;
}

size_t Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Quaternion)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (has_w()) {
    // required double w = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double w = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_Pose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::mw::internal::robotics::gazebotransport::Quaternion*>(
      ::mw::internal::robotics::gazebotransport::Quaternion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::mw::internal::robotics::gazebotransport::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::mw::internal::robotics::gazebotransport::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Pose)
}

void Pose::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.Point position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Pose)
  return target;
}

size_t Pose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Pose)
  size_t total_size = 0;

  if (has_position()) {
    // required .mw.internal.robotics.gazebotransport.Point position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (has_orientation()) {
    // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  return total_size;
}
size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mw.internal.robotics.gazebotransport.Point position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);

    // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::mw::internal::robotics::gazebotransport::Quaternion::MergeFrom(from.orientation());
    }
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopSimulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSimulation::kStopSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSimulation::StopSimulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopSimulation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.StopSimulation)
}
StopSimulation::StopSimulation(const StopSimulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_scene_ = from.stop_scene_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.StopSimulation)
}

void StopSimulation::SharedCtor() {
  stop_scene_ = false;
}

StopSimulation::~StopSimulation() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.StopSimulation)
  SharedDtor();
}

void StopSimulation::SharedDtor() {
}

void StopSimulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopSimulation::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSimulation& StopSimulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_StopSimulation.base);
  return *internal_default_instance();
}


void StopSimulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.StopSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_scene_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSimulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.StopSimulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop_scene = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stop_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.StopSimulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.StopSimulation)
  return false;
#undef DO_
}

void StopSimulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.StopSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop_scene = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop_scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.StopSimulation)
}

::google::protobuf::uint8* StopSimulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.StopSimulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop_scene = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop_scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.StopSimulation)
  return target;
}

size_t StopSimulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.StopSimulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool stop_scene = 1;
  if (has_stop_scene()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSimulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.StopSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSimulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSimulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.StopSimulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.StopSimulation)
    MergeFrom(*source);
  }
}

void StopSimulation::MergeFrom(const StopSimulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.StopSimulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stop_scene()) {
    set_stop_scene(from.stop_scene());
  }
}

void StopSimulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.StopSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSimulation::CopyFrom(const StopSimulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.StopSimulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSimulation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StopSimulation::Swap(StopSimulation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSimulation::InternalSwap(StopSimulation* other) {
  using std::swap;
  swap(stop_scene_, other->stop_scene_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopSimulation::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaserData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserData::kAngleMinFieldNumber;
const int LaserData::kAngleMaxFieldNumber;
const int LaserData::kAngleStepFieldNumber;
const int LaserData::kRangeMinFieldNumber;
const int LaserData::kRangeMaxFieldNumber;
const int LaserData::kCountFieldNumber;
const int LaserData::kVerticalAngleMinFieldNumber;
const int LaserData::kVerticalAngleMaxFieldNumber;
const int LaserData::kVerticalAngleStepFieldNumber;
const int LaserData::kRangeFieldNumber;
const int LaserData::kIntensitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserData::LaserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LaserData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.LaserData)
}
LaserData::LaserData(const LaserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      range_(from.range_),
      intensities_(from.intensities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_min_, &from.angle_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_angle_step_) -
    reinterpret_cast<char*>(&angle_min_)) + sizeof(vertical_angle_step_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.LaserData)
}

void LaserData::SharedCtor() {
  ::memset(&angle_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_angle_step_) -
      reinterpret_cast<char*>(&angle_min_)) + sizeof(vertical_angle_step_));
}

LaserData::~LaserData() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.LaserData)
  SharedDtor();
}

void LaserData::SharedDtor() {
}

void LaserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaserData::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaserData& LaserData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LaserData.base);
  return *internal_default_instance();
}


void LaserData::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.LaserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  intensities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&angle_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_angle_max_) -
        reinterpret_cast<char*>(&angle_min_)) + sizeof(vertical_angle_max_));
  }
  vertical_angle_step_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.LaserData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double angle_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_angle_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double angle_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_angle_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double angle_step = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_angle_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double range_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_range_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double range_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_range_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double vertical_angle_min = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_vertical_angle_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double vertical_angle_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_vertical_angle_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double vertical_angle_step = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_vertical_angle_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double range = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_range())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double intensities = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_intensities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_intensities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.LaserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.LaserData)
  return false;
#undef DO_
}

void LaserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.LaserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double angle_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle_min(), output);
  }

  // required double angle_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angle_max(), output);
  }

  // required double angle_step = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle_step(), output);
  }

  // required double range_min = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->range_min(), output);
  }

  // required double range_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->range_max(), output);
  }

  // required double count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->count(), output);
  }

  // required double vertical_angle_min = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vertical_angle_min(), output);
  }

  // required double vertical_angle_max = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->vertical_angle_max(), output);
  }

  // required double vertical_angle_step = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vertical_angle_step(), output);
  }

  // repeated double range = 10;
  for (int i = 0, n = this->range_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->range(i), output);
  }

  // repeated double intensities = 11;
  for (int i = 0, n = this->intensities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->intensities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.LaserData)
}

::google::protobuf::uint8* LaserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.LaserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double angle_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle_min(), target);
  }

  // required double angle_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angle_max(), target);
  }

  // required double angle_step = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle_step(), target);
  }

  // required double range_min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->range_min(), target);
  }

  // required double range_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->range_max(), target);
  }

  // required double count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->count(), target);
  }

  // required double vertical_angle_min = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vertical_angle_min(), target);
  }

  // required double vertical_angle_max = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->vertical_angle_max(), target);
  }

  // required double vertical_angle_step = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vertical_angle_step(), target);
  }

  // repeated double range = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->range_, target);

  // repeated double intensities = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->intensities_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.LaserData)
  return target;
}

size_t LaserData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.LaserData)
  size_t total_size = 0;

  if (has_angle_min()) {
    // required double angle_min = 1;
    total_size += 1 + 8;
  }

  if (has_angle_max()) {
    // required double angle_max = 2;
    total_size += 1 + 8;
  }

  if (has_angle_step()) {
    // required double angle_step = 3;
    total_size += 1 + 8;
  }

  if (has_range_min()) {
    // required double range_min = 4;
    total_size += 1 + 8;
  }

  if (has_range_max()) {
    // required double range_max = 5;
    total_size += 1 + 8;
  }

  if (has_count()) {
    // required double count = 6;
    total_size += 1 + 8;
  }

  if (has_vertical_angle_min()) {
    // required double vertical_angle_min = 7;
    total_size += 1 + 8;
  }

  if (has_vertical_angle_max()) {
    // required double vertical_angle_max = 8;
    total_size += 1 + 8;
  }

  if (has_vertical_angle_step()) {
    // required double vertical_angle_step = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LaserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.LaserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required double angle_min = 1;
    total_size += 1 + 8;

    // required double angle_max = 2;
    total_size += 1 + 8;

    // required double angle_step = 3;
    total_size += 1 + 8;

    // required double range_min = 4;
    total_size += 1 + 8;

    // required double range_max = 5;
    total_size += 1 + 8;

    // required double count = 6;
    total_size += 1 + 8;

    // required double vertical_angle_min = 7;
    total_size += 1 + 8;

    // required double vertical_angle_max = 8;
    total_size += 1 + 8;

    // required double vertical_angle_step = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double range = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->range_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->range_size());
    total_size += data_size;
  }

  // repeated double intensities = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->intensities_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->intensities_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.LaserData)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.LaserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.LaserData)
    MergeFrom(*source);
  }
}

void LaserData::MergeFrom(const LaserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.LaserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
  intensities_.MergeFrom(from.intensities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      angle_min_ = from.angle_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      angle_max_ = from.angle_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_step_ = from.angle_step_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_min_ = from.range_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      range_max_ = from.range_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000040u) {
      vertical_angle_min_ = from.vertical_angle_min_;
    }
    if (cached_has_bits & 0x00000080u) {
      vertical_angle_max_ = from.vertical_angle_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_vertical_angle_step(from.vertical_angle_step());
  }
}

void LaserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.LaserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserData::CopyFrom(const LaserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.LaserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void LaserData::Swap(LaserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserData::InternalSwap(LaserData* other) {
  using std::swap;
  range_.InternalSwap(&other->range_);
  intensities_.InternalSwap(&other->intensities_);
  swap(angle_min_, other->angle_min_);
  swap(angle_max_, other->angle_max_);
  swap(angle_step_, other->angle_step_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
  swap(count_, other->count_);
  swap(vertical_angle_min_, other->vertical_angle_min_);
  swap(vertical_angle_max_, other->vertical_angle_max_);
  swap(vertical_angle_step_, other->vertical_angle_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaserData::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestLaser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestLaser::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLaser::RequestLaser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestLaser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.RequestLaser)
}
RequestLaser::RequestLaser(const RequestLaser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.RequestLaser)
}

void RequestLaser::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestLaser::~RequestLaser() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.RequestLaser)
  SharedDtor();
}

void RequestLaser::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestLaser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestLaser::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestLaser& RequestLaser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestLaser.base);
  return *internal_default_instance();
}


void RequestLaser::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.RequestLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestLaser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.RequestLaser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestLaser.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.RequestLaser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.RequestLaser)
  return false;
#undef DO_
}

void RequestLaser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.RequestLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestLaser.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.RequestLaser)
}

::google::protobuf::uint8* RequestLaser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.RequestLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestLaser.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.RequestLaser)
  return target;
}

size_t RequestLaser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.RequestLaser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestLaser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.RequestLaser)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestLaser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestLaser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.RequestLaser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.RequestLaser)
    MergeFrom(*source);
  }
}

void RequestLaser::MergeFrom(const RequestLaser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.RequestLaser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void RequestLaser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.RequestLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLaser::CopyFrom(const RequestLaser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.RequestLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLaser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RequestLaser::Swap(RequestLaser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLaser::InternalSwap(RequestLaser* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestLaser::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuData::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_ImuData_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::mw::internal::robotics::gazebotransport::Quaternion*>(
      ::mw::internal::robotics::gazebotransport::Quaternion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
const int ImuData::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ImuData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::mw::internal::robotics::gazebotransport::Point(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::mw::internal::robotics::gazebotransport::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ImuData)
}

void ImuData::SharedCtor() {
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(orientation_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete orientation_;
}

void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuData& ImuData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ImuData.base);
  return *internal_default_instance();
}


void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ImuData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.Point linear_acceleration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point angular_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point linear_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_linear_acceleration(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point angular_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_angular_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point linear_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_linear_acceleration(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Point angular_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_angular_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_orientation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ImuData)
  return target;
}

size_t ImuData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.ImuData)
  size_t total_size = 0;

  if (has_linear_acceleration()) {
    // required .mw.internal.robotics.gazebotransport.Point linear_acceleration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  if (has_angular_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point angular_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  if (has_orientation()) {
    // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  return total_size;
}
size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ImuData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .mw.internal.robotics.gazebotransport.Point linear_acceleration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);

    // required .mw.internal.robotics.gazebotransport.Point angular_velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);

    // required .mw.internal.robotics.gazebotransport.Quaternion orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_linear_acceleration()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angular_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_orientation()->::mw::internal::robotics::gazebotransport::Quaternion::MergeFrom(from.orientation());
    }
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_linear_acceleration()) {
    if (!this->linear_acceleration_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(orientation_, other->orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestImu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestImu::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestImu::RequestImu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.RequestImu)
}
RequestImu::RequestImu(const RequestImu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.RequestImu)
}

void RequestImu::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestImu::~RequestImu() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.RequestImu)
  SharedDtor();
}

void RequestImu::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestImu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestImu::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestImu& RequestImu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestImu.base);
  return *internal_default_instance();
}


void RequestImu::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.RequestImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestImu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.RequestImu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestImu.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.RequestImu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.RequestImu)
  return false;
#undef DO_
}

void RequestImu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.RequestImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestImu.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.RequestImu)
}

::google::protobuf::uint8* RequestImu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.RequestImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestImu.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.RequestImu)
  return target;
}

size_t RequestImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.RequestImu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestImu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.RequestImu)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestImu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestImu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.RequestImu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.RequestImu)
    MergeFrom(*source);
  }
}

void RequestImu::MergeFrom(const RequestImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.RequestImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void RequestImu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.RequestImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestImu::CopyFrom(const RequestImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.RequestImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestImu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RequestImu::Swap(RequestImu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestImu::InternalSwap(RequestImu* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestImu::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribeImage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeImage::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeImage::SubscribeImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SubscribeImage)
}
SubscribeImage::SubscribeImage(const SubscribeImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SubscribeImage)
}

void SubscribeImage::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubscribeImage::~SubscribeImage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SubscribeImage)
  SharedDtor();
}

void SubscribeImage::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubscribeImage::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeImage& SubscribeImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImage.base);
  return *internal_default_instance();
}


void SubscribeImage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscribeImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SubscribeImage.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SubscribeImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SubscribeImage)
  return false;
#undef DO_
}

void SubscribeImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeImage.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SubscribeImage)
}

::google::protobuf::uint8* SubscribeImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeImage.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SubscribeImage)
  return target;
}

size_t SubscribeImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SubscribeImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SubscribeImage)
    MergeFrom(*source);
  }
}

void SubscribeImage::MergeFrom(const SubscribeImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void SubscribeImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImage::CopyFrom(const SubscribeImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscribeImage::Swap(SubscribeImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeImage::InternalSwap(SubscribeImage* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeImage::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribeLaser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeLaser::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeLaser::SubscribeLaser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeLaser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SubscribeLaser)
}
SubscribeLaser::SubscribeLaser(const SubscribeLaser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SubscribeLaser)
}

void SubscribeLaser::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubscribeLaser::~SubscribeLaser() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SubscribeLaser)
  SharedDtor();
}

void SubscribeLaser::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeLaser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubscribeLaser::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeLaser& SubscribeLaser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeLaser.base);
  return *internal_default_instance();
}


void SubscribeLaser::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscribeLaser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SubscribeLaser.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SubscribeLaser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SubscribeLaser)
  return false;
#undef DO_
}

void SubscribeLaser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeLaser.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SubscribeLaser)
}

::google::protobuf::uint8* SubscribeLaser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeLaser.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SubscribeLaser)
  return target;
}

size_t SubscribeLaser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeLaser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeLaser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeLaser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SubscribeLaser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SubscribeLaser)
    MergeFrom(*source);
  }
}

void SubscribeLaser::MergeFrom(const SubscribeLaser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void SubscribeLaser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLaser::CopyFrom(const SubscribeLaser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLaser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscribeLaser::Swap(SubscribeLaser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeLaser::InternalSwap(SubscribeLaser* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeLaser::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribeImu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeImu::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeImu::SubscribeImu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SubscribeImu)
}
SubscribeImu::SubscribeImu(const SubscribeImu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SubscribeImu)
}

void SubscribeImu::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubscribeImu::~SubscribeImu() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SubscribeImu)
  SharedDtor();
}

void SubscribeImu::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeImu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubscribeImu::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeImu& SubscribeImu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SubscribeImu.base);
  return *internal_default_instance();
}


void SubscribeImu::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscribeImu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SubscribeImu.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SubscribeImu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SubscribeImu)
  return false;
#undef DO_
}

void SubscribeImu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeImu.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SubscribeImu)
}

::google::protobuf::uint8* SubscribeImu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SubscribeImu.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SubscribeImu)
  return target;
}

size_t SubscribeImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeImu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeImu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeImu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SubscribeImu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SubscribeImu)
    MergeFrom(*source);
  }
}

void SubscribeImu::MergeFrom(const SubscribeImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void SubscribeImu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImu::CopyFrom(const SubscribeImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SubscribeImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscribeImu::Swap(SubscribeImu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeImu::InternalSwap(SubscribeImu* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeImu::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ApplyLinkWrench::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_ApplyLinkWrench_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyLinkWrench::kModelNameFieldNumber;
const int ApplyLinkWrench::kLinkNameFieldNumber;
const int ApplyLinkWrench::kForceTypeFieldNumber;
const int ApplyLinkWrench::kFxFieldNumber;
const int ApplyLinkWrench::kFyFieldNumber;
const int ApplyLinkWrench::kFzFieldNumber;
const int ApplyLinkWrench::kTorqueTypeFieldNumber;
const int ApplyLinkWrench::kTxFieldNumber;
const int ApplyLinkWrench::kTyFieldNumber;
const int ApplyLinkWrench::kTzFieldNumber;
const int ApplyLinkWrench::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyLinkWrench::ApplyLinkWrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyLinkWrench.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
}
ApplyLinkWrench::ApplyLinkWrench(const ApplyLinkWrench& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  force_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_force_type()) {
    force_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.force_type_);
  }
  torque_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_torque_type()) {
    torque_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.torque_type_);
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&tz_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
}

void ApplyLinkWrench::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  torque_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tz_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(tz_));
}

ApplyLinkWrench::~ApplyLinkWrench() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  SharedDtor();
}

void ApplyLinkWrench::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  torque_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void ApplyLinkWrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ApplyLinkWrench::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyLinkWrench& ApplyLinkWrench::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyLinkWrench.base);
  return *internal_default_instance();
}


void ApplyLinkWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      force_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      torque_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&fx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fz_) -
        reinterpret_cast<char*>(&fx_)) + sizeof(fz_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tz_) -
        reinterpret_cast<char*>(&tx_)) + sizeof(tz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyLinkWrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyLinkWrench.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyLinkWrench.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string force_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_force_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->force_type().data(), static_cast<int>(this->force_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyLinkWrench.force_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_fx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_fy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_fz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string torque_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torque_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->torque_type().data(), static_cast<int>(this->torque_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyLinkWrench.torque_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double tx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double tz = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  return false;
#undef DO_
}

void ApplyLinkWrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // required string force_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->force_type().data(), static_cast<int>(this->force_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.force_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->force_type(), output);
  }

  // required double fx = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fx(), output);
  }

  // required double fy = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fy(), output);
  }

  // required double fz = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fz(), output);
  }

  // required string torque_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->torque_type().data(), static_cast<int>(this->torque_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.torque_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->torque_type(), output);
  }

  // required double tx = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tx(), output);
  }

  // required double ty = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ty(), output);
  }

  // required double tz = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->tz(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
}

::google::protobuf::uint8* ApplyLinkWrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // required string force_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->force_type().data(), static_cast<int>(this->force_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.force_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->force_type(), target);
  }

  // required double fx = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fx(), target);
  }

  // required double fy = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fy(), target);
  }

  // required double fz = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fz(), target);
  }

  // required string torque_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->torque_type().data(), static_cast<int>(this->torque_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyLinkWrench.torque_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->torque_type(), target);
  }

  // required double tx = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tx(), target);
  }

  // required double ty = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ty(), target);
  }

  // required double tz = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->tz(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  return target;
}

size_t ApplyLinkWrench::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  if (has_force_type()) {
    // required string force_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->force_type());
  }

  if (has_torque_type()) {
    // required string torque_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->torque_type());
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (has_fx()) {
    // required double fx = 4;
    total_size += 1 + 8;
  }

  if (has_fy()) {
    // required double fy = 5;
    total_size += 1 + 8;
  }

  if (has_fz()) {
    // required double fz = 6;
    total_size += 1 + 8;
  }

  if (has_tx()) {
    // required double tx = 8;
    total_size += 1 + 8;
  }

  if (has_ty()) {
    // required double ty = 9;
    total_size += 1 + 8;
  }

  if (has_tz()) {
    // required double tz = 10;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ApplyLinkWrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

    // required string force_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->force_type());

    // required string torque_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->torque_type());

    // required .mw.internal.robotics.gazebotransport.Time duration = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

    // required double fx = 4;
    total_size += 1 + 8;

    // required double fy = 5;
    total_size += 1 + 8;

    // required double fz = 6;
    total_size += 1 + 8;

    // required double tx = 8;
    total_size += 1 + 8;

    // required double ty = 9;
    total_size += 1 + 8;

    // required double tz = 10;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyLinkWrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyLinkWrench* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyLinkWrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
    MergeFrom(*source);
  }
}

void ApplyLinkWrench::MergeFrom(const ApplyLinkWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_force_type();
      force_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.force_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_torque_type();
      torque_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.torque_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000020u) {
      fx_ = from.fx_;
    }
    if (cached_has_bits & 0x00000040u) {
      fy_ = from.fy_;
    }
    if (cached_has_bits & 0x00000080u) {
      fz_ = from.fz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000200u) {
      ty_ = from.ty_;
    }
    if (cached_has_bits & 0x00000400u) {
      tz_ = from.tz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyLinkWrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyLinkWrench::CopyFrom(const ApplyLinkWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ApplyLinkWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyLinkWrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void ApplyLinkWrench::Swap(ApplyLinkWrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyLinkWrench::InternalSwap(ApplyLinkWrench* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  force_type_.Swap(&other->force_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  torque_type_.Swap(&other->torque_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(fz_, other->fz_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(tz_, other->tz_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ApplyLinkWrench::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ApplyJointTorque::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_ApplyJointTorque_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyJointTorque::kModelNameFieldNumber;
const int ApplyJointTorque::kJointNameFieldNumber;
const int ApplyJointTorque::kIndexFieldNumber;
const int ApplyJointTorque::kEffortFieldNumber;
const int ApplyJointTorque::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyJointTorque::ApplyJointTorque()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyJointTorque.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ApplyJointTorque)
}
ApplyJointTorque::ApplyJointTorque(const ApplyJointTorque& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_joint_name()) {
    joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  ::memcpy(&effort_, &from.effort_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&effort_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ApplyJointTorque)
}

void ApplyJointTorque::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(index_));
}

ApplyJointTorque::~ApplyJointTorque() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  SharedDtor();
}

void ApplyJointTorque::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void ApplyJointTorque::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ApplyJointTorque::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyJointTorque& ApplyJointTorque::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ApplyJointTorque.base);
  return *internal_default_instance();
}


void ApplyJointTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      joint_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&effort_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&effort_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyJointTorque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyJointTorque.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string joint_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name().data(), static_cast<int>(this->joint_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ApplyJointTorque.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double effort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_effort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &effort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  return false;
#undef DO_
}

void ApplyJointTorque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyJointTorque.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyJointTorque.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->joint_name(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required double effort = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->effort(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ApplyJointTorque)
}

::google::protobuf::uint8* ApplyJointTorque::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyJointTorque.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ApplyJointTorque.joint_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->joint_name(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required double effort = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->effort(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  return target;
}

size_t ApplyJointTorque::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_joint_name()) {
    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (has_effort()) {
    // required double effort = 4;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t ApplyJointTorque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());

    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

    // required double effort = 4;
    total_size += 1 + 8;

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyJointTorque::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyJointTorque* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyJointTorque>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ApplyJointTorque)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ApplyJointTorque)
    MergeFrom(*source);
  }
}

void ApplyJointTorque::MergeFrom(const ApplyJointTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_joint_name();
      joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000008u) {
      effort_ = from.effort_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyJointTorque::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJointTorque::CopyFrom(const ApplyJointTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ApplyJointTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJointTorque::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void ApplyJointTorque::Swap(ApplyJointTorque* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyJointTorque::InternalSwap(ApplyJointTorque* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  joint_name_.Swap(&other->joint_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(effort_, other->effort_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ApplyJointTorque::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPose::kModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPose::GetPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetPose)
}
GetPose::GetPose(const GetPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetPose)
}

void GetPose::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetPose::~GetPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetPose)
  SharedDtor();
}

void GetPose::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPose::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPose& GetPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetPose.base);
  return *internal_default_instance();
}


void GetPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetPose.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetPose)
  return false;
#undef DO_
}

void GetPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetPose.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetPose)
}

::google::protobuf::uint8* GetPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetPose.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetPose)
  return target;
}

size_t GetPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string model_name = 1;
  if (has_model_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetPose)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetPose)
    MergeFrom(*source);
  }
}

void GetPose::MergeFrom(const GetPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model_name()) {
    set_has_model_name();
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
}

void GetPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPose::CopyFrom(const GetPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetPose::Swap(GetPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPose::InternalSwap(GetPose* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPose::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTopicList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopicList::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopicList::GetTopicList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetTopicList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetTopicList)
}
GetTopicList::GetTopicList(const GetTopicList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetTopicList)
}

void GetTopicList::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTopicList::~GetTopicList() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetTopicList)
  SharedDtor();
}

void GetTopicList::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTopicList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTopicList::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTopicList& GetTopicList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetTopicList.base);
  return *internal_default_instance();
}


void GetTopicList::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetTopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTopicList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetTopicList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetTopicList.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetTopicList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetTopicList)
  return false;
#undef DO_
}

void GetTopicList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetTopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetTopicList.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetTopicList)
}

::google::protobuf::uint8* GetTopicList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetTopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetTopicList.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetTopicList)
  return target;
}

size_t GetTopicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetTopicList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTopicList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetTopicList)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopicList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopicList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetTopicList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetTopicList)
    MergeFrom(*source);
  }
}

void GetTopicList::MergeFrom(const GetTopicList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetTopicList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void GetTopicList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetTopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicList::CopyFrom(const GetTopicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetTopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetTopicList::Swap(GetTopicList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTopicList::InternalSwap(GetTopicList* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTopicList::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopicList_TopicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicList_TopicInfo::kNameFieldNumber;
const int TopicList_TopicInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicList_TopicInfo::TopicList_TopicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList_TopicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
}
TopicList_TopicInfo::TopicList_TopicInfo(const TopicList_TopicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
}

void TopicList_TopicInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicList_TopicInfo::~TopicList_TopicInfo() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  SharedDtor();
}

void TopicList_TopicInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopicList_TopicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TopicList_TopicInfo::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicList_TopicInfo& TopicList_TopicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList_TopicInfo.base);
  return *internal_default_instance();
}


void TopicList_TopicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopicList_TopicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  return false;
#undef DO_
}

void TopicList_TopicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
}

::google::protobuf::uint8* TopicList_TopicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TopicList.TopicInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  return target;
}

size_t TopicList_TopicInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t TopicList_TopicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicList_TopicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicList_TopicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicList_TopicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
    MergeFrom(*source);
  }
}

void TopicList_TopicInfo::MergeFrom(const TopicList_TopicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void TopicList_TopicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicList_TopicInfo::CopyFrom(const TopicList_TopicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TopicList.TopicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicList_TopicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TopicList_TopicInfo::Swap(TopicList_TopicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicList_TopicInfo::InternalSwap(TopicList_TopicInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TopicList_TopicInfo::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopicList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicList::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicList::TopicList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TopicList)
}
TopicList::TopicList(const TopicList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TopicList)
}

void TopicList::SharedCtor() {
}

TopicList::~TopicList() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TopicList)
  SharedDtor();
}

void TopicList::SharedDtor() {
}

void TopicList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TopicList::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicList& TopicList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_TopicList.base);
  return *internal_default_instance();
}


void TopicList::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopicList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TopicList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mw.internal.robotics.gazebotransport.TopicList.TopicInfo data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TopicList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TopicList)
  return false;
#undef DO_
}

void TopicList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mw.internal.robotics.gazebotransport.TopicList.TopicInfo data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TopicList)
}

::google::protobuf::uint8* TopicList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TopicList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mw.internal.robotics.gazebotransport.TopicList.TopicInfo data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TopicList)
  return target;
}

size_t TopicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TopicList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mw.internal.robotics.gazebotransport.TopicList.TopicInfo data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TopicList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TopicList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TopicList)
    MergeFrom(*source);
  }
}

void TopicList::MergeFrom(const TopicList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TopicList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TopicList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicList::CopyFrom(const TopicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void TopicList::Swap(TopicList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicList::InternalSwap(TopicList* other) {
  using std::swap;
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TopicList::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetModelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetModelInfo::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetModelInfo::GetModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetModelInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetModelInfo)
}
GetModelInfo::GetModelInfo(const GetModelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetModelInfo)
}

void GetModelInfo::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetModelInfo::~GetModelInfo() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetModelInfo)
  SharedDtor();
}

void GetModelInfo::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetModelInfo::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetModelInfo& GetModelInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetModelInfo.base);
  return *internal_default_instance();
}


void GetModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetModelInfo.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetModelInfo)
  return false;
#undef DO_
}

void GetModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetModelInfo.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetModelInfo)
}

::google::protobuf::uint8* GetModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetModelInfo.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetModelInfo)
  return target;
}

size_t GetModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string topic_name = 1;
  if (has_topic_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetModelInfo)
    MergeFrom(*source);
  }
}

void GetModelInfo::MergeFrom(const GetModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic_name()) {
    set_has_topic_name();
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
}

void GetModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelInfo::CopyFrom(const GetModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetModelInfo::Swap(GetModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetModelInfo::InternalSwap(GetModelInfo* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetModelInfo::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelInfo_LINKS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo_LINKS::kLinkNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo_LINKS::ModelInfo_LINKS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_LINKS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
}
ModelInfo_LINKS::ModelInfo_LINKS(const ModelInfo_LINKS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      link_name_(from.link_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
}

void ModelInfo_LINKS::SharedCtor() {
}

ModelInfo_LINKS::~ModelInfo_LINKS() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  SharedDtor();
}

void ModelInfo_LINKS::SharedDtor() {
}

void ModelInfo_LINKS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelInfo_LINKS::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelInfo_LINKS& ModelInfo_LINKS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_LINKS.base);
  return *internal_default_instance();
}


void ModelInfo_LINKS::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelInfo_LINKS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string link_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name(this->link_name_size() - 1).data(),
            static_cast<int>(this->link_name(this->link_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ModelInfo.LINKS.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  return false;
#undef DO_
}

void ModelInfo_LINKS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string link_name = 1;
  for (int i = 0, n = this->link_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name(i).data(), static_cast<int>(this->link_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.LINKS.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->link_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
}

::google::protobuf::uint8* ModelInfo_LINKS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string link_name = 1;
  for (int i = 0, n = this->link_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name(i).data(), static_cast<int>(this->link_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.LINKS.link_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->link_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  return target;
}

size_t ModelInfo_LINKS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string link_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->link_name_size());
  for (int i = 0, n = this->link_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->link_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo_LINKS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo_LINKS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo_LINKS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
    MergeFrom(*source);
  }
}

void ModelInfo_LINKS::MergeFrom(const ModelInfo_LINKS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_name_.MergeFrom(from.link_name_);
}

void ModelInfo_LINKS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo_LINKS::CopyFrom(const ModelInfo_LINKS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.LINKS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo_LINKS::IsInitialized() const {
  return true;
}

void ModelInfo_LINKS::Swap(ModelInfo_LINKS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo_LINKS::InternalSwap(ModelInfo_LINKS* other) {
  using std::swap;
  link_name_.InternalSwap(CastToBase(&other->link_name_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelInfo_LINKS::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelInfo_JOINTS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo_JOINTS::kJointNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo_JOINTS::ModelInfo_JOINTS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_JOINTS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
}
ModelInfo_JOINTS::ModelInfo_JOINTS(const ModelInfo_JOINTS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      joint_name_(from.joint_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
}

void ModelInfo_JOINTS::SharedCtor() {
}

ModelInfo_JOINTS::~ModelInfo_JOINTS() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  SharedDtor();
}

void ModelInfo_JOINTS::SharedDtor() {
}

void ModelInfo_JOINTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelInfo_JOINTS::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelInfo_JOINTS& ModelInfo_JOINTS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_JOINTS.base);
  return *internal_default_instance();
}


void ModelInfo_JOINTS::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelInfo_JOINTS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string joint_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name(this->joint_name_size() - 1).data(),
            static_cast<int>(this->joint_name(this->joint_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ModelInfo.JOINTS.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  return false;
#undef DO_
}

void ModelInfo_JOINTS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string joint_name = 1;
  for (int i = 0, n = this->joint_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name(i).data(), static_cast<int>(this->joint_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.JOINTS.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->joint_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
}

::google::protobuf::uint8* ModelInfo_JOINTS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string joint_name = 1;
  for (int i = 0, n = this->joint_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name(i).data(), static_cast<int>(this->joint_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.JOINTS.joint_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->joint_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  return target;
}

size_t ModelInfo_JOINTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string joint_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->joint_name_size());
  for (int i = 0, n = this->joint_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->joint_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo_JOINTS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo_JOINTS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo_JOINTS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
    MergeFrom(*source);
  }
}

void ModelInfo_JOINTS::MergeFrom(const ModelInfo_JOINTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_name_.MergeFrom(from.joint_name_);
}

void ModelInfo_JOINTS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo_JOINTS::CopyFrom(const ModelInfo_JOINTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.JOINTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo_JOINTS::IsInitialized() const {
  return true;
}

void ModelInfo_JOINTS::Swap(ModelInfo_JOINTS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo_JOINTS::InternalSwap(ModelInfo_JOINTS* other) {
  using std::swap;
  joint_name_.InternalSwap(CastToBase(&other->joint_name_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelInfo_JOINTS::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelInfo_Model::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_ModelInfo_Model_default_instance_._instance.get_mutable()->links_ = const_cast< ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS*>(
      ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_ModelInfo_Model_default_instance_._instance.get_mutable()->joints_ = const_cast< ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS*>(
      ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo_Model::kModelNameFieldNumber;
const int ModelInfo_Model::kLinksFieldNumber;
const int ModelInfo_Model::kJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo_Model::ModelInfo_Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_Model.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ModelInfo.Model)
}
ModelInfo_Model::ModelInfo_Model(const ModelInfo_Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.has_links()) {
    links_ = new ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS(*from.links_);
  } else {
    links_ = NULL;
  }
  if (from.has_joints()) {
    joints_ = new ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS(*from.joints_);
  } else {
    joints_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ModelInfo.Model)
}

void ModelInfo_Model::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&links_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&joints_) -
      reinterpret_cast<char*>(&links_)) + sizeof(joints_));
}

ModelInfo_Model::~ModelInfo_Model() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  SharedDtor();
}

void ModelInfo_Model::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete joints_;
}

void ModelInfo_Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelInfo_Model::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelInfo_Model& ModelInfo_Model::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo_Model.base);
  return *internal_default_instance();
}


void ModelInfo_Model::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(links_ != NULL);
      links_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(joints_ != NULL);
      joints_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelInfo_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.ModelInfo.Model.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ModelInfo.LINKS links = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.ModelInfo.JOINTS joints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  return false;
#undef DO_
}

void ModelInfo_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.Model.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.ModelInfo.LINKS links = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_links(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.ModelInfo.JOINTS joints = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_joints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ModelInfo.Model)
}

::google::protobuf::uint8* ModelInfo_Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.ModelInfo.Model.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional .mw.internal.robotics.gazebotransport.ModelInfo.LINKS links = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_links(), deterministic, target);
  }

  // optional .mw.internal.robotics.gazebotransport.ModelInfo.JOINTS joints = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_joints(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  return target;
}

size_t ModelInfo_Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string model_name = 1;
  if (has_model_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .mw.internal.robotics.gazebotransport.ModelInfo.LINKS links = 2;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *links_);
    }

    // optional .mw.internal.robotics.gazebotransport.ModelInfo.JOINTS joints = 3;
    if (has_joints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joints_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo_Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo_Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo_Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ModelInfo.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ModelInfo.Model)
    MergeFrom(*source);
  }
}

void ModelInfo_Model::MergeFrom(const ModelInfo_Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_links()->::mw::internal::robotics::gazebotransport::ModelInfo_LINKS::MergeFrom(from.links());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_joints()->::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS::MergeFrom(from.joints());
    }
  }
}

void ModelInfo_Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo_Model::CopyFrom(const ModelInfo_Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo_Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ModelInfo_Model::Swap(ModelInfo_Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo_Model::InternalSwap(ModelInfo_Model* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(links_, other->links_);
  swap(joints_, other->joints_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelInfo_Model::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo::kModelDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo::ModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.ModelInfo)
}
ModelInfo::ModelInfo(const ModelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      model_data_(from.model_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.ModelInfo)
}

void ModelInfo::SharedCtor() {
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.ModelInfo)
  SharedDtor();
}

void ModelInfo::SharedDtor() {
}

void ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelInfo::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelInfo& ModelInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_ModelInfo.base);
  return *internal_default_instance();
}


void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.ModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.ModelInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mw.internal.robotics.gazebotransport.ModelInfo.Model model_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_model_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.ModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.ModelInfo)
  return false;
#undef DO_
}

void ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.ModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mw.internal.robotics.gazebotransport.ModelInfo.Model model_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->model_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.ModelInfo)
}

::google::protobuf::uint8* ModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.ModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mw.internal.robotics.gazebotransport.ModelInfo.Model model_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->model_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.ModelInfo)
  return target;
}

size_t ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.ModelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mw.internal.robotics.gazebotransport.ModelInfo.Model model_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->model_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->model_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.ModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.ModelInfo)
    MergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_data_.MergeFrom(from.model_data_);
}

void ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->model_data())) return false;
  return true;
}

void ModelInfo::Swap(ModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo::InternalSwap(ModelInfo* other) {
  using std::swap;
  CastToBase(&model_data_)->InternalSwap(CastToBase(&other->model_data_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelInfo::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaxStepSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaxStepSize::kTypeFieldNumber;
const int MaxStepSize::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaxStepSize::MaxStepSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_MaxStepSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.MaxStepSize)
}
MaxStepSize::MaxStepSize(const MaxStepSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.MaxStepSize)
}

void MaxStepSize::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
}

MaxStepSize::~MaxStepSize() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.MaxStepSize)
  SharedDtor();
}

void MaxStepSize::SharedDtor() {
}

void MaxStepSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaxStepSize::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaxStepSize& MaxStepSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_MaxStepSize.base);
  return *internal_default_instance();
}


void MaxStepSize::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&size_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaxStepSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.MaxStepSize.TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::MaxStepSize_TYPE_IsValid(value)) {
            set_type(static_cast< ::mw::internal::robotics::gazebotransport::MaxStepSize_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.MaxStepSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.MaxStepSize)
  return false;
#undef DO_
}

void MaxStepSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.MaxStepSize.TYPE type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required double size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.MaxStepSize)
}

::google::protobuf::uint8* MaxStepSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.MaxStepSize.TYPE type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required double size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.MaxStepSize)
  return target;
}

size_t MaxStepSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  size_t total_size = 0;

  if (has_size()) {
    // required double size = 2;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required .mw.internal.robotics.gazebotransport.MaxStepSize.TYPE type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t MaxStepSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double size = 2;
    total_size += 1 + 8;

    // required .mw.internal.robotics.gazebotransport.MaxStepSize.TYPE type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxStepSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxStepSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaxStepSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.MaxStepSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.MaxStepSize)
    MergeFrom(*source);
  }
}

void MaxStepSize::MergeFrom(const MaxStepSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaxStepSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxStepSize::CopyFrom(const MaxStepSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.MaxStepSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxStepSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MaxStepSize::Swap(MaxStepSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaxStepSize::InternalSwap(MaxStepSize* other) {
  using std::swap;
  swap(size_, other->size_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaxStepSize::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitCustomPublisher::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitCustomPublisher::kTopicNameFieldNumber;
const int InitCustomPublisher::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitCustomPublisher::InitCustomPublisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomPublisher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.InitCustomPublisher)
}
InitCustomPublisher::InitCustomPublisher(const InitCustomPublisher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.InitCustomPublisher)
}

void InitCustomPublisher::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitCustomPublisher::~InitCustomPublisher() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  SharedDtor();
}

void InitCustomPublisher::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitCustomPublisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitCustomPublisher::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitCustomPublisher& InitCustomPublisher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomPublisher.base);
  return *internal_default_instance();
}


void InitCustomPublisher::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitCustomPublisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.InitCustomPublisher.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.InitCustomPublisher.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  return false;
#undef DO_
}

void InitCustomPublisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomPublisher.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomPublisher.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.InitCustomPublisher)
}

::google::protobuf::uint8* InitCustomPublisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomPublisher.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomPublisher.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  return target;
}

size_t InitCustomPublisher::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  size_t total_size = 0;

  if (has_topic_name()) {
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }

  if (has_message_type()) {
    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  return total_size;
}
size_t InitCustomPublisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());

    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitCustomPublisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  GOOGLE_DCHECK_NE(&from, this);
  const InitCustomPublisher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitCustomPublisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.InitCustomPublisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.InitCustomPublisher)
    MergeFrom(*source);
  }
}

void InitCustomPublisher::MergeFrom(const InitCustomPublisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic_name();
      topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
  }
}

void InitCustomPublisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCustomPublisher::CopyFrom(const InitCustomPublisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.InitCustomPublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCustomPublisher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitCustomPublisher::Swap(InitCustomPublisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitCustomPublisher::InternalSwap(InitCustomPublisher* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitCustomPublisher::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitCustomSubscriber::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitCustomSubscriber::kTopicNameFieldNumber;
const int InitCustomSubscriber::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitCustomSubscriber::InitCustomSubscriber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomSubscriber.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
}
InitCustomSubscriber::InitCustomSubscriber(const InitCustomSubscriber& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
}

void InitCustomSubscriber::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitCustomSubscriber::~InitCustomSubscriber() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  SharedDtor();
}

void InitCustomSubscriber::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitCustomSubscriber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitCustomSubscriber::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitCustomSubscriber& InitCustomSubscriber::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_InitCustomSubscriber.base);
  return *internal_default_instance();
}


void InitCustomSubscriber::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitCustomSubscriber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.InitCustomSubscriber.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.InitCustomSubscriber.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  return false;
#undef DO_
}

void InitCustomSubscriber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomSubscriber.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomSubscriber.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
}

::google::protobuf::uint8* InitCustomSubscriber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomSubscriber.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.InitCustomSubscriber.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  return target;
}

size_t InitCustomSubscriber::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  size_t total_size = 0;

  if (has_topic_name()) {
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }

  if (has_message_type()) {
    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  return total_size;
}
size_t InitCustomSubscriber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());

    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitCustomSubscriber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  GOOGLE_DCHECK_NE(&from, this);
  const InitCustomSubscriber* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitCustomSubscriber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
    MergeFrom(*source);
  }
}

void InitCustomSubscriber::MergeFrom(const InitCustomSubscriber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic_name();
      topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
  }
}

void InitCustomSubscriber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCustomSubscriber::CopyFrom(const InitCustomSubscriber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.InitCustomSubscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCustomSubscriber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitCustomSubscriber::Swap(InitCustomSubscriber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitCustomSubscriber::InternalSwap(InitCustomSubscriber* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitCustomSubscriber::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomMessageSupport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomMessageSupport::kTopicNameFieldNumber;
const int CustomMessageSupport::kMessageTypeFieldNumber;
const int CustomMessageSupport::kDataFieldNumber;
const int CustomMessageSupport::kIsNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomMessageSupport::CustomMessageSupport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_CustomMessageSupport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.CustomMessageSupport)
}
CustomMessageSupport::CustomMessageSupport(const CustomMessageSupport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  is_new_ = from.is_new_;
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.CustomMessageSupport)
}

void CustomMessageSupport::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_new_ = false;
}

CustomMessageSupport::~CustomMessageSupport() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  SharedDtor();
}

void CustomMessageSupport::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomMessageSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomMessageSupport::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomMessageSupport& CustomMessageSupport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_CustomMessageSupport.base);
  return *internal_default_instance();
}


void CustomMessageSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  is_new_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomMessageSupport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.CustomMessageSupport.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.CustomMessageSupport.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_new = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  return false;
#undef DO_
}

void CustomMessageSupport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.CustomMessageSupport.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.CustomMessageSupport.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional bool is_new = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.CustomMessageSupport)
}

::google::protobuf::uint8* CustomMessageSupport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.CustomMessageSupport.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.CustomMessageSupport.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional bool is_new = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  return target;
}

size_t CustomMessageSupport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  size_t total_size = 0;

  if (has_topic_name()) {
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }

  if (has_message_type()) {
    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
size_t CustomMessageSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());

    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());

    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool is_new = 4;
  if (has_is_new()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomMessageSupport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomMessageSupport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomMessageSupport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.CustomMessageSupport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.CustomMessageSupport)
    MergeFrom(*source);
  }
}

void CustomMessageSupport::MergeFrom(const CustomMessageSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic_name();
      topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      is_new_ = from.is_new_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomMessageSupport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomMessageSupport::CopyFrom(const CustomMessageSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.CustomMessageSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMessageSupport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CustomMessageSupport::Swap(CustomMessageSupport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomMessageSupport::InternalSwap(CustomMessageSupport* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_new_, other->is_new_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomMessageSupport::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestCustomMessageSupport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCustomMessageSupport::kTopicNameFieldNumber;
const int RequestCustomMessageSupport::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCustomMessageSupport::RequestCustomMessageSupport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCustomMessageSupport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
}
RequestCustomMessageSupport::RequestCustomMessageSupport(const RequestCustomMessageSupport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_name()) {
    topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
}

void RequestCustomMessageSupport::SharedCtor() {
  topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestCustomMessageSupport::~RequestCustomMessageSupport() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  SharedDtor();
}

void RequestCustomMessageSupport::SharedDtor() {
  topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestCustomMessageSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestCustomMessageSupport::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestCustomMessageSupport& RequestCustomMessageSupport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_RequestCustomMessageSupport.base);
  return *internal_default_instance();
}


void RequestCustomMessageSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestCustomMessageSupport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name().data(), static_cast<int>(this->topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  return false;
#undef DO_
}

void RequestCustomMessageSupport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic_name(), output);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
}

::google::protobuf::uint8* RequestCustomMessageSupport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name().data(), static_cast<int>(this->topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic_name(), target);
  }

  // required string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.RequestCustomMessageSupport.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  return target;
}

size_t RequestCustomMessageSupport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  size_t total_size = 0;

  if (has_topic_name()) {
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());
  }

  if (has_message_type()) {
    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  return total_size;
}
size_t RequestCustomMessageSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string topic_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_name());

    // required string message_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCustomMessageSupport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCustomMessageSupport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCustomMessageSupport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
    MergeFrom(*source);
  }
}

void RequestCustomMessageSupport::MergeFrom(const RequestCustomMessageSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic_name();
      topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
  }
}

void RequestCustomMessageSupport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCustomMessageSupport::CopyFrom(const RequestCustomMessageSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.RequestCustomMessageSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCustomMessageSupport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RequestCustomMessageSupport::Swap(RequestCustomMessageSupport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCustomMessageSupport::InternalSwap(RequestCustomMessageSupport* other) {
  using std::swap;
  topic_name_.Swap(&other->topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_type_.Swap(&other->message_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestCustomMessageSupport::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetJointPosition::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_SetJointPosition_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetJointPosition::kModelNameFieldNumber;
const int SetJointPosition::kJointNameFieldNumber;
const int SetJointPosition::kIndexFieldNumber;
const int SetJointPosition::kPositionFieldNumber;
const int SetJointPosition::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetJointPosition::SetJointPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SetJointPosition)
}
SetJointPosition::SetJointPosition(const SetJointPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_joint_name()) {
    joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SetJointPosition)
}

void SetJointPosition::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(index_));
}

SetJointPosition::~SetJointPosition() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SetJointPosition)
  SharedDtor();
}

void SetJointPosition::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void SetJointPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetJointPosition::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetJointPosition& SetJointPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointPosition.base);
  return *internal_default_instance();
}


void SetJointPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      joint_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&position_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetJointPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetJointPosition.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string joint_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name().data(), static_cast<int>(this->joint_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetJointPosition.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SetJointPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SetJointPosition)
  return false;
#undef DO_
}

void SetJointPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointPosition.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointPosition.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->joint_name(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required double position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->position(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SetJointPosition)
}

::google::protobuf::uint8* SetJointPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointPosition.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointPosition.joint_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->joint_name(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required double position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->position(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SetJointPosition)
  return target;
}

size_t SetJointPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_joint_name()) {
    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (has_position()) {
    // required double position = 4;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t SetJointPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());

    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

    // required double position = 4;
    total_size += 1 + 8;

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetJointPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SetJointPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetJointPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SetJointPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SetJointPosition)
    MergeFrom(*source);
  }
}

void SetJointPosition::MergeFrom(const SetJointPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_joint_name();
      joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000008u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetJointPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetJointPosition::CopyFrom(const SetJointPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SetJointPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetJointPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void SetJointPosition::Swap(SetJointPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetJointPosition::InternalSwap(SetJointPosition* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  joint_name_.Swap(&other->joint_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(position_, other->position_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetJointPosition::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetJointVelocity::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_SetJointVelocity_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetJointVelocity::kModelNameFieldNumber;
const int SetJointVelocity::kJointNameFieldNumber;
const int SetJointVelocity::kIndexFieldNumber;
const int SetJointVelocity::kVelocityFieldNumber;
const int SetJointVelocity::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetJointVelocity::SetJointVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SetJointVelocity)
}
SetJointVelocity::SetJointVelocity(const SetJointVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_joint_name()) {
    joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SetJointVelocity)
}

void SetJointVelocity::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(index_));
}

SetJointVelocity::~SetJointVelocity() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SetJointVelocity)
  SharedDtor();
}

void SetJointVelocity::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void SetJointVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetJointVelocity::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetJointVelocity& SetJointVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetJointVelocity.base);
  return *internal_default_instance();
}


void SetJointVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      joint_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&velocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&velocity_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetJointVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetJointVelocity.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string joint_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name().data(), static_cast<int>(this->joint_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetJointVelocity.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SetJointVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SetJointVelocity)
  return false;
#undef DO_
}

void SetJointVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointVelocity.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointVelocity.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->joint_name(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required double velocity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SetJointVelocity)
}

::google::protobuf::uint8* SetJointVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointVelocity.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetJointVelocity.joint_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->joint_name(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required double velocity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->velocity(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SetJointVelocity)
  return target;
}

size_t SetJointVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_joint_name()) {
    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (has_velocity()) {
    // required double velocity = 4;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t SetJointVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());

    // required .mw.internal.robotics.gazebotransport.Time duration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

    // required double velocity = 4;
    total_size += 1 + 8;

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetJointVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SetJointVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetJointVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SetJointVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SetJointVelocity)
    MergeFrom(*source);
  }
}

void SetJointVelocity::MergeFrom(const SetJointVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_joint_name();
      joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000008u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetJointVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetJointVelocity::CopyFrom(const SetJointVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SetJointVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetJointVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void SetJointVelocity::Swap(SetJointVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetJointVelocity::InternalSwap(SetJointVelocity* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  joint_name_.Swap(&other->joint_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(velocity_, other->velocity_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetJointVelocity::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetJointState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJointState::kModelNameFieldNumber;
const int GetJointState::kJointNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJointState::GetJointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetJointState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetJointState)
}
GetJointState::GetJointState(const GetJointState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_joint_name()) {
    joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetJointState)
}

void GetJointState::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetJointState::~GetJointState() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetJointState)
  SharedDtor();
}

void GetJointState::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetJointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetJointState::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetJointState& GetJointState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetJointState.base);
  return *internal_default_instance();
}


void GetJointState::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetJointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      joint_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetJointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetJointState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetJointState.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string joint_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name().data(), static_cast<int>(this->joint_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetJointState.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetJointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetJointState)
  return false;
#undef DO_
}

void GetJointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetJointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetJointState.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetJointState.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->joint_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetJointState)
}

::google::protobuf::uint8* GetJointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetJointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetJointState.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetJointState.joint_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->joint_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetJointState)
  return target;
}

size_t GetJointState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.GetJointState)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_joint_name()) {
    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());
  }

  return total_size;
}
size_t GetJointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetJointState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetJointState)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJointState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetJointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetJointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetJointState)
    MergeFrom(*source);
  }
}

void GetJointState::MergeFrom(const GetJointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetJointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_joint_name();
      joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
    }
  }
}

void GetJointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetJointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJointState::CopyFrom(const GetJointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetJointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJointState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetJointState::Swap(GetJointState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJointState::InternalSwap(GetJointState* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  joint_name_.Swap(&other->joint_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetJointState::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Axis::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_Axis_default_instance_._instance.get_mutable()->xyz_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Axis::kXyzFieldNumber;
const int Axis::kLimitLowerFieldNumber;
const int Axis::kLimitUpperFieldNumber;
const int Axis::kLimitEffortFieldNumber;
const int Axis::kLimitVelocityFieldNumber;
const int Axis::kDampingFieldNumber;
const int Axis::kFrictionFieldNumber;
const int Axis::kUseParentModelFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Axis::Axis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Axis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.Axis)
}
Axis::Axis(const Axis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_xyz()) {
    xyz_ = new ::mw::internal::robotics::gazebotransport::Point(*from.xyz_);
  } else {
    xyz_ = NULL;
  }
  ::memcpy(&limit_lower_, &from.limit_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_parent_model_frame_) -
    reinterpret_cast<char*>(&limit_lower_)) + sizeof(use_parent_model_frame_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.Axis)
}

void Axis::SharedCtor() {
  ::memset(&xyz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_parent_model_frame_) -
      reinterpret_cast<char*>(&xyz_)) + sizeof(use_parent_model_frame_));
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.Axis)
  SharedDtor();
}

void Axis::SharedDtor() {
  if (this != internal_default_instance()) delete xyz_;
}

void Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Axis::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Axis& Axis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_Axis.base);
  return *internal_default_instance();
}


void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(xyz_ != NULL);
    xyz_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&limit_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_parent_model_frame_) -
        reinterpret_cast<char*>(&limit_lower_)) + sizeof(use_parent_model_frame_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.Axis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.Point xyz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xyz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double limit_lower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_limit_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double limit_upper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_limit_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double limit_effort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_limit_effort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_effort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double limit_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_limit_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double damping = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_damping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double friction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_friction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &friction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool use_parent_model_frame = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_use_parent_model_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_parent_model_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.Axis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.Axis)
  return false;
#undef DO_
}

void Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point xyz = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_xyz(), output);
  }

  // required double limit_lower = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->limit_lower(), output);
  }

  // required double limit_upper = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->limit_upper(), output);
  }

  // required double limit_effort = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->limit_effort(), output);
  }

  // required double limit_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->limit_velocity(), output);
  }

  // required double damping = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->damping(), output);
  }

  // required double friction = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->friction(), output);
  }

  // required bool use_parent_model_frame = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_parent_model_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.Axis)
}

::google::protobuf::uint8* Axis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.Point xyz = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_xyz(), deterministic, target);
  }

  // required double limit_lower = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->limit_lower(), target);
  }

  // required double limit_upper = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->limit_upper(), target);
  }

  // required double limit_effort = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->limit_effort(), target);
  }

  // required double limit_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->limit_velocity(), target);
  }

  // required double damping = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->damping(), target);
  }

  // required double friction = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->friction(), target);
  }

  // required bool use_parent_model_frame = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_parent_model_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.Axis)
  return target;
}

size_t Axis::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.Axis)
  size_t total_size = 0;

  if (has_xyz()) {
    // required .mw.internal.robotics.gazebotransport.Point xyz = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xyz_);
  }

  if (has_limit_lower()) {
    // required double limit_lower = 2;
    total_size += 1 + 8;
  }

  if (has_limit_upper()) {
    // required double limit_upper = 3;
    total_size += 1 + 8;
  }

  if (has_limit_effort()) {
    // required double limit_effort = 4;
    total_size += 1 + 8;
  }

  if (has_limit_velocity()) {
    // required double limit_velocity = 5;
    total_size += 1 + 8;
  }

  if (has_damping()) {
    // required double damping = 6;
    total_size += 1 + 8;
  }

  if (has_friction()) {
    // required double friction = 7;
    total_size += 1 + 8;
  }

  if (has_use_parent_model_frame()) {
    // required bool use_parent_model_frame = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.Axis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .mw.internal.robotics.gazebotransport.Point xyz = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xyz_);

    // required double limit_lower = 2;
    total_size += 1 + 8;

    // required double limit_upper = 3;
    total_size += 1 + 8;

    // required double limit_effort = 4;
    total_size += 1 + 8;

    // required double limit_velocity = 5;
    total_size += 1 + 8;

    // required double damping = 6;
    total_size += 1 + 8;

    // required double friction = 7;
    total_size += 1 + 8;

    // required bool use_parent_model_frame = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Axis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Axis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.Axis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.Axis)
    MergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_xyz()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.xyz());
    }
    if (cached_has_bits & 0x00000002u) {
      limit_lower_ = from.limit_lower_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_upper_ = from.limit_upper_;
    }
    if (cached_has_bits & 0x00000008u) {
      limit_effort_ = from.limit_effort_;
    }
    if (cached_has_bits & 0x00000010u) {
      limit_velocity_ = from.limit_velocity_;
    }
    if (cached_has_bits & 0x00000020u) {
      damping_ = from.damping_;
    }
    if (cached_has_bits & 0x00000040u) {
      friction_ = from.friction_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_parent_model_frame_ = from.use_parent_model_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Axis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (has_xyz()) {
    if (!this->xyz_->IsInitialized()) return false;
  }
  return true;
}

void Axis::Swap(Axis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Axis::InternalSwap(Axis* other) {
  using std::swap;
  swap(xyz_, other->xyz_);
  swap(limit_lower_, other->limit_lower_);
  swap(limit_upper_, other->limit_upper_);
  swap(limit_effort_, other->limit_effort_);
  swap(limit_velocity_, other->limit_velocity_);
  swap(damping_, other->damping_);
  swap(friction_, other->friction_);
  swap(use_parent_model_frame_, other->use_parent_model_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Axis::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JointState::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_JointState_default_instance_._instance.get_mutable()->initial_anchor_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_JointState_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_JointState_default_instance_._instance.get_mutable()->parent_world_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointState::kModelNameFieldNumber;
const int JointState::kJointNameFieldNumber;
const int JointState::kJointIdFieldNumber;
const int JointState::kJointPositionFieldNumber;
const int JointState::kJointVelocityFieldNumber;
const int JointState::kJointTypeFieldNumber;
const int JointState::kParentNameFieldNumber;
const int JointState::kParentIdFieldNumber;
const int JointState::kChildNameFieldNumber;
const int JointState::kChildIdFieldNumber;
const int JointState::kInitialAnchorPoseFieldNumber;
const int JointState::kWorldPoseFieldNumber;
const int JointState::kParentWorldPoseFieldNumber;
const int JointState::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointState::JointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_JointState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.JointState)
}
JointState::JointState(const JointState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      joint_position_(from.joint_position_),
      joint_velocity_(from.joint_velocity_),
      axis_(from.axis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_joint_name()) {
    joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
  }
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_name()) {
    parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  child_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_child_name()) {
    child_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_name_);
  }
  if (from.has_initial_anchor_pose()) {
    initial_anchor_pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.initial_anchor_pose_);
  } else {
    initial_anchor_pose_ = NULL;
  }
  if (from.has_world_pose()) {
    world_pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.world_pose_);
  } else {
    world_pose_ = NULL;
  }
  if (from.has_parent_world_pose()) {
    parent_world_pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.parent_world_pose_);
  } else {
    parent_world_pose_ = NULL;
  }
  ::memcpy(&joint_id_, &from.joint_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&joint_type_) -
    reinterpret_cast<char*>(&joint_id_)) + sizeof(joint_type_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.JointState)
}

void JointState::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&initial_anchor_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_id_) -
      reinterpret_cast<char*>(&initial_anchor_pose_)) + sizeof(child_id_));
  joint_type_ = 1;
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.JointState)
  SharedDtor();
}

void JointState::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joint_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete initial_anchor_pose_;
  if (this != internal_default_instance()) delete world_pose_;
  if (this != internal_default_instance()) delete parent_world_pose_;
}

void JointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointState::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointState& JointState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_JointState.base);
  return *internal_default_instance();
}


void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.JointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_position_.Clear();
  joint_velocity_.Clear();
  axis_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      joint_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      parent_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      child_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(initial_anchor_pose_ != NULL);
      initial_anchor_pose_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(world_pose_ != NULL);
      world_pose_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(parent_world_pose_ != NULL);
      parent_world_pose_->Clear();
    }
  }
  joint_id_ = 0u;
  if (cached_has_bits & 1792u) {
    ::memset(&parent_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_id_) -
        reinterpret_cast<char*>(&parent_id_)) + sizeof(child_id_));
    joint_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.JointState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.JointState.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string joint_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joint_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->joint_name().data(), static_cast<int>(this->joint_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.JointState.joint_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 joint_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_joint_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double joint_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_joint_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_joint_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double joint_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_joint_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_joint_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.JointState.Joint_Type joint_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::JointState_Joint_Type_IsValid(value)) {
            set_joint_type(static_cast< ::mw::internal::robotics::gazebotransport::JointState_Joint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_name().data(), static_cast<int>(this->parent_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.JointState.parent_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_parent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string child_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_name().data(), static_cast<int>(this->child_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.JointState.child_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 child_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_child_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose initial_anchor_pose = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_anchor_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose parent_world_pose = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mw.internal.robotics.gazebotransport.Axis axis = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_axis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.JointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.JointState)
  return false;
#undef DO_
}

void JointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.JointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.joint_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->joint_name(), output);
  }

  // required uint32 joint_id = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->joint_id(), output);
  }

  // repeated double joint_position = 4;
  for (int i = 0, n = this->joint_position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->joint_position(i), output);
  }

  // repeated double joint_velocity = 5;
  for (int i = 0, n = this->joint_velocity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->joint_velocity(i), output);
  }

  // optional .mw.internal.robotics.gazebotransport.JointState.Joint_Type joint_type = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->joint_type(), output);
  }

  // optional string parent_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->parent_name(), output);
  }

  // optional uint32 parent_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->parent_id(), output);
  }

  // optional string child_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_name().data(), static_cast<int>(this->child_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.child_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->child_name(), output);
  }

  // optional uint32 child_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->child_id(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose initial_anchor_pose = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_initial_anchor_pose(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_world_pose(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose parent_world_pose = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_parent_world_pose(), output);
  }

  // repeated .mw.internal.robotics.gazebotransport.Axis axis = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->axis_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->axis(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.JointState)
}

::google::protobuf::uint8* JointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.JointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string joint_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->joint_name().data(), static_cast<int>(this->joint_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.joint_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->joint_name(), target);
  }

  // required uint32 joint_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->joint_id(), target);
  }

  // repeated double joint_position = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->joint_position_, target);

  // repeated double joint_velocity = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->joint_velocity_, target);

  // optional .mw.internal.robotics.gazebotransport.JointState.Joint_Type joint_type = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->joint_type(), target);
  }

  // optional string parent_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->parent_name(), target);
  }

  // optional uint32 parent_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->parent_id(), target);
  }

  // optional string child_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_name().data(), static_cast<int>(this->child_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.JointState.child_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->child_name(), target);
  }

  // optional uint32 child_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->child_id(), target);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose initial_anchor_pose = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_initial_anchor_pose(), deterministic, target);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_world_pose(), deterministic, target);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose parent_world_pose = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_parent_world_pose(), deterministic, target);
  }

  // repeated .mw.internal.robotics.gazebotransport.Axis axis = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->axis_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->axis(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.JointState)
  return target;
}

size_t JointState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.JointState)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_joint_name()) {
    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());
  }

  if (has_joint_id()) {
    // required uint32 joint_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_id());
  }

  return total_size;
}
size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.JointState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000083) ^ 0x00000083) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string joint_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->joint_name());

    // required uint32 joint_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->joint_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double joint_position = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_position_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->joint_position_size());
    total_size += data_size;
  }

  // repeated double joint_velocity = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_velocity_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->joint_velocity_size());
    total_size += data_size;
  }

  // repeated .mw.internal.robotics.gazebotransport.Axis axis = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->axis_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->axis(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional string parent_name = 7;
    if (has_parent_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_name());
    }

    // optional string child_name = 9;
    if (has_child_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_name());
    }

    // optional .mw.internal.robotics.gazebotransport.Pose initial_anchor_pose = 11;
    if (has_initial_anchor_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initial_anchor_pose_);
    }

    // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 12;
    if (has_world_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *world_pose_);
    }

    // optional .mw.internal.robotics.gazebotransport.Pose parent_world_pose = 13;
    if (has_parent_world_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parent_world_pose_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 parent_id = 8;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional uint32 child_id = 10;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_id());
    }

    // optional .mw.internal.robotics.gazebotransport.JointState.Joint_Type joint_type = 6;
    if (has_joint_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->joint_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  const JointState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.JointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.JointState)
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_position_.MergeFrom(from.joint_position_);
  joint_velocity_.MergeFrom(from.joint_velocity_);
  axis_.MergeFrom(from.axis_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_joint_name();
      joint_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.joint_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_parent_name();
      parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_child_name();
      child_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_initial_anchor_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.initial_anchor_pose());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_world_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.world_pose());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_parent_world_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.parent_world_pose());
    }
    if (cached_has_bits & 0x00000080u) {
      joint_id_ = from.joint_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      child_id_ = from.child_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      joint_type_ = from.joint_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000083) != 0x00000083) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->axis())) return false;
  if (has_initial_anchor_pose()) {
    if (!this->initial_anchor_pose_->IsInitialized()) return false;
  }
  if (has_world_pose()) {
    if (!this->world_pose_->IsInitialized()) return false;
  }
  if (has_parent_world_pose()) {
    if (!this->parent_world_pose_->IsInitialized()) return false;
  }
  return true;
}

void JointState::Swap(JointState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointState::InternalSwap(JointState* other) {
  using std::swap;
  joint_position_.InternalSwap(&other->joint_position_);
  joint_velocity_.InternalSwap(&other->joint_velocity_);
  CastToBase(&axis_)->InternalSwap(CastToBase(&other->axis_));
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  joint_name_.Swap(&other->joint_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_name_.Swap(&other->parent_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  child_name_.Swap(&other->child_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initial_anchor_pose_, other->initial_anchor_pose_);
  swap(world_pose_, other->world_pose_);
  swap(parent_world_pose_, other->parent_world_pose_);
  swap(joint_id_, other->joint_id_);
  swap(parent_id_, other->parent_id_);
  swap(child_id_, other->child_id_);
  swap(joint_type_, other->joint_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointState::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetLinkWorldPose::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_SetLinkWorldPose_default_instance_._instance.get_mutable()->pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_SetLinkWorldPose_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLinkWorldPose::kModelNameFieldNumber;
const int SetLinkWorldPose::kLinkNameFieldNumber;
const int SetLinkWorldPose::kPoseFieldNumber;
const int SetLinkWorldPose::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLinkWorldPose::SetLinkWorldPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkWorldPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
}
SetLinkWorldPose::SetLinkWorldPose(const SetLinkWorldPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_pose()) {
    pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
}

void SetLinkWorldPose::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(duration_));
}

SetLinkWorldPose::~SetLinkWorldPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  SharedDtor();
}

void SetLinkWorldPose::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete duration_;
}

void SetLinkWorldPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetLinkWorldPose::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLinkWorldPose& SetLinkWorldPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkWorldPose.base);
  return *internal_default_instance();
}


void SetLinkWorldPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetLinkWorldPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkWorldPose.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkWorldPose.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  return false;
#undef DO_
}

void SetLinkWorldPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkWorldPose.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkWorldPose.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
}

::google::protobuf::uint8* SetLinkWorldPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkWorldPose.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkWorldPose.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  return target;
}

size_t SetLinkWorldPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  if (has_pose()) {
    // required .mw.internal.robotics.gazebotransport.Pose pose = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  return total_size;
}
size_t SetLinkWorldPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

    // required .mw.internal.robotics.gazebotransport.Pose pose = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);

    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLinkWorldPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLinkWorldPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLinkWorldPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
    MergeFrom(*source);
  }
}

void SetLinkWorldPose::MergeFrom(const SetLinkWorldPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
  }
}

void SetLinkWorldPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLinkWorldPose::CopyFrom(const SetLinkWorldPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkWorldPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLinkWorldPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void SetLinkWorldPose::Swap(SetLinkWorldPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLinkWorldPose::InternalSwap(SetLinkWorldPose* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetLinkWorldPose::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetLinkLinearVelocity::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_SetLinkLinearVelocity_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_SetLinkLinearVelocity_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLinkLinearVelocity::kModelNameFieldNumber;
const int SetLinkLinearVelocity::kLinkNameFieldNumber;
const int SetLinkLinearVelocity::kVelocityFieldNumber;
const int SetLinkLinearVelocity::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLinkLinearVelocity::SetLinkLinearVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkLinearVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
}
SetLinkLinearVelocity::SetLinkLinearVelocity(const SetLinkLinearVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_velocity()) {
    velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
}

void SetLinkLinearVelocity::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(duration_));
}

SetLinkLinearVelocity::~SetLinkLinearVelocity() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  SharedDtor();
}

void SetLinkLinearVelocity::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete duration_;
}

void SetLinkLinearVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetLinkLinearVelocity::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLinkLinearVelocity& SetLinkLinearVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkLinearVelocity.base);
  return *internal_default_instance();
}


void SetLinkLinearVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetLinkLinearVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  return false;
#undef DO_
}

void SetLinkLinearVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
}

::google::protobuf::uint8* SetLinkLinearVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkLinearVelocity.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  return target;
}

size_t SetLinkLinearVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  if (has_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  return total_size;
}
size_t SetLinkLinearVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

    // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);

    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLinkLinearVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLinkLinearVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLinkLinearVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
    MergeFrom(*source);
  }
}

void SetLinkLinearVelocity::MergeFrom(const SetLinkLinearVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
  }
}

void SetLinkLinearVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLinkLinearVelocity::CopyFrom(const SetLinkLinearVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkLinearVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLinkLinearVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void SetLinkLinearVelocity::Swap(SetLinkLinearVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLinkLinearVelocity::InternalSwap(SetLinkLinearVelocity* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(velocity_, other->velocity_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetLinkLinearVelocity::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetLinkAngularVelocity::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_SetLinkAngularVelocity_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_SetLinkAngularVelocity_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mw::internal::robotics::gazebotransport::Time*>(
      ::mw::internal::robotics::gazebotransport::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLinkAngularVelocity::kModelNameFieldNumber;
const int SetLinkAngularVelocity::kLinkNameFieldNumber;
const int SetLinkAngularVelocity::kVelocityFieldNumber;
const int SetLinkAngularVelocity::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLinkAngularVelocity::SetLinkAngularVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkAngularVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
}
SetLinkAngularVelocity::SetLinkAngularVelocity(const SetLinkAngularVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_velocity()) {
    velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::mw::internal::robotics::gazebotransport::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
}

void SetLinkAngularVelocity::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(duration_));
}

SetLinkAngularVelocity::~SetLinkAngularVelocity() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  SharedDtor();
}

void SetLinkAngularVelocity::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete duration_;
}

void SetLinkAngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetLinkAngularVelocity::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLinkAngularVelocity& SetLinkAngularVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_SetLinkAngularVelocity.base);
  return *internal_default_instance();
}


void SetLinkAngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(duration_ != NULL);
      duration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetLinkAngularVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Time duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  return false;
#undef DO_
}

void SetLinkAngularVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
}

::google::protobuf::uint8* SetLinkAngularVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.SetLinkAngularVelocity.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Time duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_duration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  return target;
}

size_t SetLinkAngularVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  if (has_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (has_duration()) {
    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  return total_size;
}
size_t SetLinkAngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

    // required .mw.internal.robotics.gazebotransport.Point velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);

    // required .mw.internal.robotics.gazebotransport.Time duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLinkAngularVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLinkAngularVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLinkAngularVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
    MergeFrom(*source);
  }
}

void SetLinkAngularVelocity::MergeFrom(const SetLinkAngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_duration()->::mw::internal::robotics::gazebotransport::Time::MergeFrom(from.duration());
    }
  }
}

void SetLinkAngularVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLinkAngularVelocity::CopyFrom(const SetLinkAngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.SetLinkAngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLinkAngularVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  if (has_duration()) {
    if (!this->duration_->IsInitialized()) return false;
  }
  return true;
}

void SetLinkAngularVelocity::Swap(SetLinkAngularVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLinkAngularVelocity::InternalSwap(SetLinkAngularVelocity* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(velocity_, other->velocity_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetLinkAngularVelocity::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLinkState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLinkState::kModelNameFieldNumber;
const int GetLinkState::kLinkNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLinkState::GetLinkState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetLinkState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.GetLinkState)
}
GetLinkState::GetLinkState(const GetLinkState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.GetLinkState)
}

void GetLinkState::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetLinkState::~GetLinkState() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.GetLinkState)
  SharedDtor();
}

void GetLinkState::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLinkState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLinkState::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLinkState& GetLinkState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_GetLinkState.base);
  return *internal_default_instance();
}


void GetLinkState::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.GetLinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLinkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.GetLinkState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetLinkState.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.GetLinkState.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.GetLinkState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.GetLinkState)
  return false;
#undef DO_
}

void GetLinkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.GetLinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetLinkState.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetLinkState.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.GetLinkState)
}

::google::protobuf::uint8* GetLinkState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.GetLinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetLinkState.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.GetLinkState.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.GetLinkState)
  return target;
}

size_t GetLinkState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.GetLinkState)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  return total_size;
}
size_t GetLinkState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.GetLinkState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLinkState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.GetLinkState)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLinkState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLinkState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.GetLinkState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.GetLinkState)
    MergeFrom(*source);
  }
}

void GetLinkState::MergeFrom(const GetLinkState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.GetLinkState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
  }
}

void GetLinkState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.GetLinkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkState::CopyFrom(const GetLinkState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.GetLinkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GetLinkState::Swap(GetLinkState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLinkState::InternalSwap(GetLinkState* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLinkState::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinkState::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->world_linear_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->world_angular_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->relative_linear_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->relative_angular_velocity_ = const_cast< ::mw::internal::robotics::gazebotransport::Point*>(
      ::mw::internal::robotics::gazebotransport::Point::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_LinkState_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::mw::internal::robotics::gazebotransport::Pose*>(
      ::mw::internal::robotics::gazebotransport::Pose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkState::kModelNameFieldNumber;
const int LinkState::kLinkNameFieldNumber;
const int LinkState::kLinkIdFieldNumber;
const int LinkState::kWorldLinearVelocityFieldNumber;
const int LinkState::kWorldAngularVelocityFieldNumber;
const int LinkState::kRelativeLinearVelocityFieldNumber;
const int LinkState::kRelativeAngularVelocityFieldNumber;
const int LinkState::kWorldPoseFieldNumber;
const int LinkState::kRelativePoseFieldNumber;
const int LinkState::kSelfCollideFieldNumber;
const int LinkState::kGravityFieldNumber;
const int LinkState::kKinematicFieldNumber;
const int LinkState::kEnableWindFieldNumber;
const int LinkState::kCanonicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkState::LinkState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LinkState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.LinkState)
}
LinkState::LinkState(const LinkState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_world_linear_velocity()) {
    world_linear_velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.world_linear_velocity_);
  } else {
    world_linear_velocity_ = NULL;
  }
  if (from.has_world_angular_velocity()) {
    world_angular_velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.world_angular_velocity_);
  } else {
    world_angular_velocity_ = NULL;
  }
  if (from.has_relative_linear_velocity()) {
    relative_linear_velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.relative_linear_velocity_);
  } else {
    relative_linear_velocity_ = NULL;
  }
  if (from.has_relative_angular_velocity()) {
    relative_angular_velocity_ = new ::mw::internal::robotics::gazebotransport::Point(*from.relative_angular_velocity_);
  } else {
    relative_angular_velocity_ = NULL;
  }
  if (from.has_world_pose()) {
    world_pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.world_pose_);
  } else {
    world_pose_ = NULL;
  }
  if (from.has_relative_pose()) {
    relative_pose_ = new ::mw::internal::robotics::gazebotransport::Pose(*from.relative_pose_);
  } else {
    relative_pose_ = NULL;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&canonical_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(canonical_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.LinkState)
}

void LinkState::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&world_linear_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&canonical_) -
      reinterpret_cast<char*>(&world_linear_velocity_)) + sizeof(canonical_));
}

LinkState::~LinkState() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.LinkState)
  SharedDtor();
}

void LinkState::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete world_linear_velocity_;
  if (this != internal_default_instance()) delete world_angular_velocity_;
  if (this != internal_default_instance()) delete relative_linear_velocity_;
  if (this != internal_default_instance()) delete relative_angular_velocity_;
  if (this != internal_default_instance()) delete world_pose_;
  if (this != internal_default_instance()) delete relative_pose_;
}

void LinkState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinkState::descriptor() {
  ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkState& LinkState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::scc_info_LinkState.base);
  return *internal_default_instance();
}


void LinkState::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.LinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(world_linear_velocity_ != NULL);
      world_linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(world_angular_velocity_ != NULL);
      world_angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(relative_linear_velocity_ != NULL);
      relative_linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(relative_angular_velocity_ != NULL);
      relative_angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(world_pose_ != NULL);
      world_pose_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(relative_pose_ != NULL);
      relative_pose_->Clear();
    }
  }
  if (cached_has_bits & 16128u) {
    ::memset(&link_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&canonical_) -
        reinterpret_cast<char*>(&link_id_)) + sizeof(canonical_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.LinkState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.LinkState.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.LinkState.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 link_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point world_linear_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point world_angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point relative_linear_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mw.internal.robotics.gazebotransport.Point relative_angular_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.Pose relative_pose = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool self_collide = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_self_collide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_collide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gravity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_gravity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kinematic = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_kinematic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kinematic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_wind = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_enable_wind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_wind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canonical = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_canonical();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canonical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.LinkState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.LinkState)
  return false;
#undef DO_
}

void LinkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.LinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.LinkState.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.LinkState.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // required uint32 link_id = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->link_id(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point world_linear_velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_world_linear_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point world_angular_velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_world_angular_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point relative_linear_velocity = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_relative_linear_velocity(), output);
  }

  // required .mw.internal.robotics.gazebotransport.Point relative_angular_velocity = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_relative_angular_velocity(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_world_pose(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose relative_pose = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_relative_pose(), output);
  }

  // optional bool self_collide = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->self_collide(), output);
  }

  // optional bool gravity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gravity(), output);
  }

  // optional bool kinematic = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->kinematic(), output);
  }

  // optional bool enable_wind = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_wind(), output);
  }

  // optional bool canonical = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->canonical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.LinkState)
}

::google::protobuf::uint8* LinkState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.LinkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.LinkState.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string link_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.LinkState.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // required uint32 link_id = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->link_id(), target);
  }

  // required .mw.internal.robotics.gazebotransport.Point world_linear_velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_world_linear_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Point world_angular_velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_world_angular_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Point relative_linear_velocity = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_relative_linear_velocity(), deterministic, target);
  }

  // required .mw.internal.robotics.gazebotransport.Point relative_angular_velocity = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_relative_angular_velocity(), deterministic, target);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_world_pose(), deterministic, target);
  }

  // optional .mw.internal.robotics.gazebotransport.Pose relative_pose = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_relative_pose(), deterministic, target);
  }

  // optional bool self_collide = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->self_collide(), target);
  }

  // optional bool gravity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->gravity(), target);
  }

  // optional bool kinematic = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->kinematic(), target);
  }

  // optional bool enable_wind = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_wind(), target);
  }

  // optional bool canonical = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->canonical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.LinkState)
  return target;
}

size_t LinkState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.LinkState)
  size_t total_size = 0;

  if (has_model_name()) {
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (has_link_name()) {
    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  if (has_world_linear_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point world_linear_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_linear_velocity_);
  }

  if (has_world_angular_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point world_angular_velocity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_angular_velocity_);
  }

  if (has_relative_linear_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point relative_linear_velocity = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_linear_velocity_);
  }

  if (has_relative_angular_velocity()) {
    // required .mw.internal.robotics.gazebotransport.Point relative_angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_angular_velocity_);
  }

  if (has_link_id()) {
    // required uint32 link_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_id());
  }

  return total_size;
}
size_t LinkState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.LinkState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000013f) ^ 0x0000013f) == 0) {  // All required fields are present.
    // required string model_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());

    // required string link_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());

    // required .mw.internal.robotics.gazebotransport.Point world_linear_velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_linear_velocity_);

    // required .mw.internal.robotics.gazebotransport.Point world_angular_velocity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_angular_velocity_);

    // required .mw.internal.robotics.gazebotransport.Point relative_linear_velocity = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_linear_velocity_);

    // required .mw.internal.robotics.gazebotransport.Point relative_angular_velocity = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_angular_velocity_);

    // required uint32 link_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional .mw.internal.robotics.gazebotransport.Pose world_pose = 8;
    if (has_world_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *world_pose_);
    }

    // optional .mw.internal.robotics.gazebotransport.Pose relative_pose = 9;
    if (has_relative_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *relative_pose_);
    }

  }
  if (_has_bits_[8 / 32] & 15872u) {
    // optional bool self_collide = 10;
    if (has_self_collide()) {
      total_size += 1 + 1;
    }

    // optional bool gravity = 11;
    if (has_gravity()) {
      total_size += 1 + 1;
    }

    // optional bool kinematic = 12;
    if (has_kinematic()) {
      total_size += 1 + 1;
    }

    // optional bool enable_wind = 13;
    if (has_enable_wind()) {
      total_size += 1 + 1;
    }

    // optional bool canonical = 14;
    if (has_canonical()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.LinkState)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.LinkState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.LinkState)
    MergeFrom(*source);
  }
}

void LinkState::MergeFrom(const LinkState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.LinkState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_world_linear_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.world_linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_world_angular_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.world_angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_relative_linear_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.relative_linear_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_relative_angular_velocity()->::mw::internal::robotics::gazebotransport::Point::MergeFrom(from.relative_angular_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_world_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.world_pose());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_relative_pose()->::mw::internal::robotics::gazebotransport::Pose::MergeFrom(from.relative_pose());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      link_id_ = from.link_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      self_collide_ = from.self_collide_;
    }
    if (cached_has_bits & 0x00000400u) {
      gravity_ = from.gravity_;
    }
    if (cached_has_bits & 0x00000800u) {
      kinematic_ = from.kinematic_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_wind_ = from.enable_wind_;
    }
    if (cached_has_bits & 0x00002000u) {
      canonical_ = from.canonical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinkState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.LinkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkState::CopyFrom(const LinkState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.LinkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;
  if (has_world_linear_velocity()) {
    if (!this->world_linear_velocity_->IsInitialized()) return false;
  }
  if (has_world_angular_velocity()) {
    if (!this->world_angular_velocity_->IsInitialized()) return false;
  }
  if (has_relative_linear_velocity()) {
    if (!this->relative_linear_velocity_->IsInitialized()) return false;
  }
  if (has_relative_angular_velocity()) {
    if (!this->relative_angular_velocity_->IsInitialized()) return false;
  }
  if (has_world_pose()) {
    if (!this->world_pose_->IsInitialized()) return false;
  }
  if (has_relative_pose()) {
    if (!this->relative_pose_->IsInitialized()) return false;
  }
  return true;
}

void LinkState::Swap(LinkState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkState::InternalSwap(LinkState* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(world_linear_velocity_, other->world_linear_velocity_);
  swap(world_angular_velocity_, other->world_angular_velocity_);
  swap(relative_linear_velocity_, other->relative_linear_velocity_);
  swap(relative_angular_velocity_, other->relative_angular_velocity_);
  swap(world_pose_, other->world_pose_);
  swap(relative_pose_, other->relative_pose_);
  swap(link_id_, other->link_id_);
  swap(self_collide_, other->self_collide_);
  swap(gravity_, other->gravity_);
  swap(kinematic_, other->kinematic_);
  swap(enable_wind_, other->enable_wind_);
  swap(canonical_, other->canonical_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinkState::GetMetadata() const {
  protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mw_2einternal_2erobotics_2egazebotransport_2eCoSimMsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Time* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Time >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Time >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::PacketHeader* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::PacketHeader >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::PacketHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Packet* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Packet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::StepSimulation* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::StepSimulation >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::StepSimulation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ResetSimulation* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ResetSimulation >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ResetSimulation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Image* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Image >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Image >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::RequestImage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::RequestImage >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::RequestImage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::RequestCoSim* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::RequestCoSim >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::RequestCoSim >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::StopCoSim* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::StopCoSim >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::StopCoSim >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetGroundTruthWorldPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Point* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Point >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Quaternion* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Quaternion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Pose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::StopSimulation* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::StopSimulation >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::StopSimulation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::LaserData* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::LaserData >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::LaserData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::RequestLaser* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::RequestLaser >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::RequestLaser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ImuData* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ImuData >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ImuData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::RequestImu* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::RequestImu >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::RequestImu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SubscribeImage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SubscribeImage >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SubscribeImage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SubscribeLaser* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SubscribeLaser >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SubscribeLaser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SubscribeImu* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SubscribeImu >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SubscribeImu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ApplyLinkWrench* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ApplyLinkWrench >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ApplyLinkWrench >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ApplyJointTorque* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ApplyJointTorque >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ApplyJointTorque >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetPose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetPose >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetTopicList* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetTopicList >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetTopicList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TopicList_TopicInfo* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TopicList_TopicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TopicList_TopicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::TopicList* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TopicList >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::TopicList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetModelInfo* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetModelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetModelInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ModelInfo_LINKS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ModelInfo_JOINTS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ModelInfo_Model* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ModelInfo_Model >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ModelInfo_Model >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::ModelInfo* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::ModelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::ModelInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::MaxStepSize* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::MaxStepSize >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::MaxStepSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::InitCustomPublisher* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::InitCustomPublisher >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::InitCustomPublisher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::InitCustomSubscriber* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::InitCustomSubscriber >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::InitCustomSubscriber >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::CustomMessageSupport* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::CustomMessageSupport >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::CustomMessageSupport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::RequestCustomMessageSupport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SetJointPosition* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SetJointPosition >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SetJointPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SetJointVelocity* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SetJointVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SetJointVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetJointState* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetJointState >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetJointState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::Axis* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::Axis >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::Axis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::JointState* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::JointState >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::JointState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SetLinkWorldPose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SetLinkWorldPose >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SetLinkWorldPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SetLinkLinearVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::SetLinkAngularVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::GetLinkState* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::GetLinkState >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::GetLinkState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mw::internal::robotics::gazebotransport::LinkState* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::LinkState >(Arena* arena) {
  return Arena::CreateInternal< ::mw::internal::robotics::gazebotransport::LinkState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
