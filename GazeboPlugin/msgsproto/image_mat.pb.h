// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_mat.proto

#ifndef PROTOBUF_INCLUDED_image_5fmat_2eproto
#define PROTOBUF_INCLUDED_image_5fmat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_image_5fmat_2eproto 

namespace protobuf_image_5fmat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_image_5fmat_2eproto
namespace robotics {
namespace matlab {
class ImageMat;
class ImageMatDefaultTypeInternal;
extern ImageMatDefaultTypeInternal _ImageMat_default_instance_;
}  // namespace matlab
}  // namespace robotics
namespace google {
namespace protobuf {
template<> ::robotics::matlab::ImageMat* Arena::CreateMaybeMessage<::robotics::matlab::ImageMat>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robotics {
namespace matlab {

// ===================================================================

class ImageMat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robotics.matlab.ImageMat) */ {
 public:
  ImageMat();
  virtual ~ImageMat();

  ImageMat(const ImageMat& from);

  inline ImageMat& operator=(const ImageMat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageMat(ImageMat&& from) noexcept
    : ImageMat() {
    *this = ::std::move(from);
  }

  inline ImageMat& operator=(ImageMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMat* internal_default_instance() {
    return reinterpret_cast<const ImageMat*>(
               &_ImageMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageMat* other);
  friend void swap(ImageMat& a, ImageMat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageMat* New() const final {
    return CreateMaybeMessage<ImageMat>(NULL);
  }

  ImageMat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageMat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageMat& from);
  void MergeFrom(const ImageMat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes m_data = 5;
  bool has_m_data() const;
  void clear_m_data();
  static const int kMDataFieldNumber = 5;
  const ::std::string& m_data() const;
  void set_m_data(const ::std::string& value);
  #if LANG_CXX11
  void set_m_data(::std::string&& value);
  #endif
  void set_m_data(const char* value);
  void set_m_data(const void* value, size_t size);
  ::std::string* mutable_m_data();
  ::std::string* release_m_data();
  void set_allocated_m_data(::std::string* m_data);

  // required uint32 m_width = 1;
  bool has_m_width() const;
  void clear_m_width();
  static const int kMWidthFieldNumber = 1;
  ::google::protobuf::uint32 m_width() const;
  void set_m_width(::google::protobuf::uint32 value);

  // required uint32 m_height = 2;
  bool has_m_height() const;
  void clear_m_height();
  static const int kMHeightFieldNumber = 2;
  ::google::protobuf::uint32 m_height() const;
  void set_m_height(::google::protobuf::uint32 value);

  // required uint32 m_pixel_format = 3;
  bool has_m_pixel_format() const;
  void clear_m_pixel_format();
  static const int kMPixelFormatFieldNumber = 3;
  ::google::protobuf::uint32 m_pixel_format() const;
  void set_m_pixel_format(::google::protobuf::uint32 value);

  // required uint32 m_step = 4;
  bool has_m_step() const;
  void clear_m_step();
  static const int kMStepFieldNumber = 4;
  ::google::protobuf::uint32 m_step() const;
  void set_m_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robotics.matlab.ImageMat)
 private:
  void set_has_m_width();
  void clear_has_m_width();
  void set_has_m_height();
  void clear_has_m_height();
  void set_has_m_pixel_format();
  void clear_has_m_pixel_format();
  void set_has_m_step();
  void clear_has_m_step();
  void set_has_m_data();
  void clear_has_m_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr m_data_;
  ::google::protobuf::uint32 m_width_;
  ::google::protobuf::uint32 m_height_;
  ::google::protobuf::uint32 m_pixel_format_;
  ::google::protobuf::uint32 m_step_;
  friend struct ::protobuf_image_5fmat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMat

// required uint32 m_width = 1;
inline bool ImageMat::has_m_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageMat::set_has_m_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageMat::clear_has_m_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageMat::clear_m_width() {
  m_width_ = 0u;
  clear_has_m_width();
}
inline ::google::protobuf::uint32 ImageMat::m_width() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.ImageMat.m_width)
  return m_width_;
}
inline void ImageMat::set_m_width(::google::protobuf::uint32 value) {
  set_has_m_width();
  m_width_ = value;
  // @@protoc_insertion_point(field_set:robotics.matlab.ImageMat.m_width)
}

// required uint32 m_height = 2;
inline bool ImageMat::has_m_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageMat::set_has_m_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageMat::clear_has_m_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageMat::clear_m_height() {
  m_height_ = 0u;
  clear_has_m_height();
}
inline ::google::protobuf::uint32 ImageMat::m_height() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.ImageMat.m_height)
  return m_height_;
}
inline void ImageMat::set_m_height(::google::protobuf::uint32 value) {
  set_has_m_height();
  m_height_ = value;
  // @@protoc_insertion_point(field_set:robotics.matlab.ImageMat.m_height)
}

// required uint32 m_pixel_format = 3;
inline bool ImageMat::has_m_pixel_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageMat::set_has_m_pixel_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageMat::clear_has_m_pixel_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageMat::clear_m_pixel_format() {
  m_pixel_format_ = 0u;
  clear_has_m_pixel_format();
}
inline ::google::protobuf::uint32 ImageMat::m_pixel_format() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.ImageMat.m_pixel_format)
  return m_pixel_format_;
}
inline void ImageMat::set_m_pixel_format(::google::protobuf::uint32 value) {
  set_has_m_pixel_format();
  m_pixel_format_ = value;
  // @@protoc_insertion_point(field_set:robotics.matlab.ImageMat.m_pixel_format)
}

// required uint32 m_step = 4;
inline bool ImageMat::has_m_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageMat::set_has_m_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageMat::clear_has_m_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageMat::clear_m_step() {
  m_step_ = 0u;
  clear_has_m_step();
}
inline ::google::protobuf::uint32 ImageMat::m_step() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.ImageMat.m_step)
  return m_step_;
}
inline void ImageMat::set_m_step(::google::protobuf::uint32 value) {
  set_has_m_step();
  m_step_ = value;
  // @@protoc_insertion_point(field_set:robotics.matlab.ImageMat.m_step)
}

// required bytes m_data = 5;
inline bool ImageMat::has_m_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageMat::set_has_m_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageMat::clear_has_m_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageMat::clear_m_data() {
  m_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_data();
}
inline const ::std::string& ImageMat::m_data() const {
  // @@protoc_insertion_point(field_get:robotics.matlab.ImageMat.m_data)
  return m_data_.GetNoArena();
}
inline void ImageMat::set_m_data(const ::std::string& value) {
  set_has_m_data();
  m_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robotics.matlab.ImageMat.m_data)
}
#if LANG_CXX11
inline void ImageMat::set_m_data(::std::string&& value) {
  set_has_m_data();
  m_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robotics.matlab.ImageMat.m_data)
}
#endif
inline void ImageMat::set_m_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_m_data();
  m_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robotics.matlab.ImageMat.m_data)
}
inline void ImageMat::set_m_data(const void* value, size_t size) {
  set_has_m_data();
  m_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robotics.matlab.ImageMat.m_data)
}
inline ::std::string* ImageMat::mutable_m_data() {
  set_has_m_data();
  // @@protoc_insertion_point(field_mutable:robotics.matlab.ImageMat.m_data)
  return m_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMat::release_m_data() {
  // @@protoc_insertion_point(field_release:robotics.matlab.ImageMat.m_data)
  if (!has_m_data()) {
    return NULL;
  }
  clear_has_m_data();
  return m_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMat::set_allocated_m_data(::std::string* m_data) {
  if (m_data != NULL) {
    set_has_m_data();
  } else {
    clear_has_m_data();
  }
  m_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_data);
  // @@protoc_insertion_point(field_set_allocated:robotics.matlab.ImageMat.m_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace matlab
}  // namespace robotics

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_image_5fmat_2eproto
